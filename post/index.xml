<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>Posts on Journey-C</title>
  <link>https://journey-c.github.io/post/</link>
  <description>Recent content in Posts on Journey-C</description>
  <generator>Hugo -- gohugo.io</generator>
  
  <language>en-us</language>
  
  
  
  
  <lastBuildDate>Mon, 12 Jul 2021 22:38:33 +0800</lastBuildDate>
  
      <atom:link href="https://journey-c.github.io/post/index.xml" rel="self" type="application/rss+xml" />
  
  
  <item>
    <title>网络性能优化：TFO</title>
    <link>https://journey-c.github.io/linux-tcp-fast-open/</link>
    <pubDate>Mon, 12 Jul 2021 22:38:33 +0800</pubDate>
    
    <guid>https://journey-c.github.io/linux-tcp-fast-open/</guid>
    <description>&lt;p&gt;今天大多数的web服务都是基于TCP协议对外提供交互，TCP协议是诞生在网络环境普遍很差的年代。传输时延由客户端和服务端之间往返时间(RTT)以及数据传输需要的往返次数决定。过去的几十年网络带宽有大幅增长，但传输时延还是受到光速的限制，所以谷歌公司在2011年的&lt;a href=&#34;https://conferences.sigcomm.org/co-next/2011/papers/1569470463.pdf&#34;&gt;TCP FAST OPEN&lt;/a&gt;论文中介绍TCP协议的扩展——TCP FAST OPEN。&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/pdfrfc/rfc793.txt.pdf&#34;&gt;TCP标准&lt;/a&gt;中只允许握手建立连接后进行数据传输，这就意味着在应用层数据交互之前有一个额外的RTT。
&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-tcp-handshake.png&#34; alt=&#34;TCP Handshake&#34;&gt;
而这个额外RTT是传播时延的一部分。下图是谷歌公司统计的google.com请求中TCP握手占总请求时延的百分比。可以看到cold request(新TCP连接)的握手时延占比明显高出很多。
&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-tcp-handshake-cast.png&#34; alt=&#34;TCP Handshake Cast&#34;&gt;
这个问题的解决方案一个是应用层协议复用TCP，请求结束后连接不关闭，缓存给下次使用。但实际效果不理想，谷歌公司对一些大型CDN的研究表明，实际生产中每个TCP连接平均只有2.4个HTTP请求。&lt;/p&gt;
&lt;p&gt;而另外一种解决方式就是在握手时期就进行数据传输，直接消除了额外的RTT。TCP标准中也是在握手第三阶段将数据包放入了SYN包中，所以应用层数据放入第一、二阶段SYN包中的设计理论上也是可行的。然而，这个想法的直接实现容易受到拒绝服务 (DoS) 攻击，并且可能面临重复或陈旧 SYN 的困难。谷歌的论文中提出了一种称为 TCP 快速打开 (TFO) 的新 TCP 机制，它可以在 TCP 的初始握手期间安全地交换数据。 TFO 的核心是一个安全 cookie，服务器使用它来验证启动 TFO 连接的客户端。
&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-tcp-fast-open.png&#34; alt=&#34;TCP Fast Open&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;实现&#34;&gt;实现&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;(被抓包程序代码在最后)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新TCP连接时，客户端发送带有 Fast Open Cookie Request TCP 选项的 SYN 数据包。
&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-tfo1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;服务器通过在密钥下加密客户端的 IP 地址来生成 cookie。服务器使用 SYN-ACK 响应客户端，该 SYN-ACK 在 TCP 选项字段中包含生成的 Fast Open Cookie。
&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-tfo2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;客户端缓存 cookie，以便将来 TFO 连接到同一服务器。&lt;/p&gt;
&lt;p&gt;要使用从服务器接收到的TFO cookie，客户端执行以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送带有缓存的 Fast Open cookie（作为 TCP 选项）以及应用程序数据的 SYN。&lt;/li&gt;
&lt;li&gt;服务器通过解密并比较 IP 地址或通过重新加密 IP 地址并与接收到的 cookie 进行比较来验证 cookie。
(a) 如果 cookie 有效，服务器发送一个 SYN-ACK 确认 SYN 和数据。数据被传送到服务器应用程序。
(b) 否则，服务器丢弃数据，并发送仅确认 SYN 序列号的 SYN-ACK。连接通过常规的 3WHS 进行。
3.如果SYN包中的数据被接受，服务器可能会在收到客户端的第一个ACK之前向客户端发送额外的响应数据段。&lt;/li&gt;
&lt;li&gt;客户端发送确认服务器 SYN 的 ACK。如果客户端的数据未被确认，则使用 ACK 重新传输。&lt;/li&gt;
&lt;li&gt;然后连接像正常的 TCP 连接一样进行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-tfo3.png&#34; alt=&#34;3&#34;&gt;
可以看到第二次TCP连接的握手第一步携带了上次服务端返回的cookie，并且携带了数据的。&lt;/p&gt;
&lt;p&gt;TFO是TCP协议的experimental update，所以协议要求TCP实现默认必须禁止TFO，Linux中打开方式如下：（确保内核版本在3.17及以上）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;在/etc/sysctl.conf文件中添加
net.ipv4.tcp_fastopen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/net/tcp.h#L232&#34;&gt;Linux实现&lt;/a&gt;中，tcp_fastopen值如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define	TFO_CLIENT_ENABLE	1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define	TFO_SERVER_ENABLE	2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define	TFO_CLIENT_NO_COOKIE	4	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Data in SYN w/o cookie option */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置为3，则客户端服务端均开启TFO功能。&lt;/p&gt;
&lt;p&gt;最后是谷歌公司针对TFO做的对比数据，可以看到TFO机制明显缩短了传输时延，并且RTT越大的情况下越明显。
&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-result.png&#34; alt=&#34;result&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;广域网tfo可用性&#34;&gt;广域网TFO可用性&lt;/h1&gt;
&lt;p&gt;由于中间路由器、交换机等设备可能不支持，导致TFO在互联网环境下可能失败，从而弱化到标准的TCP握手，甚至导致更恶劣的重传，不过从Anna Maria Mandalari博士的测试数据来看，只有2.18%的SYN数据包会被直接丢弃，引起重传。
下面是博士团队在2015年对18个国家、22个ISP环境下进行TFO的测试数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/linux-tcp-fast-open-result-data.png&#34; alt=&#34;result&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;附录&#34;&gt;附录&lt;/h1&gt;
&lt;h2 id=&#34;serverc&#34;&gt;server.c&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netdb.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Listen&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rc;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; addrinfo &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;listp, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p, hints;
    memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;hints, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(hints));
    hints.ai_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;
    hints.ai_socktype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SOCK_STREAM;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getaddrinfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;hints, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;listp)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getaddrinfo: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, gai_strerror(rc));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ln;
    socklen_t ai_addrlen;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr ai_addr;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listp; p; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_next) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((ln &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_family, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_socktype, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_protocol)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bind(ln, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_addr, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_addrlen)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bind: %d %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, errno, strerror(errno));
            close(ln);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; qlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
        setsockopt(ln, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_protocol, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;qlen, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(qlen));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((rc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; listen(ln, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listen: %d %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, errno, strerror(errno));
            close(ln);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }

        ai_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_addr;
        ai_addrlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ai_addrlen;
    }
    freeaddrinfo(listp);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ln;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; client) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
    recv(client, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; client) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];

    sprintf(buf, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;);
    send(client, buf, strlen(buf), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ln &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Listen();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ln &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr ai_addr;
        socklen_t ai_addrlen;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accept(ln, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ai_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ai_addrlen);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (client &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept: %d %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, errno, strerror(errno));
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr;
        socklen_t addrlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (getpeername(client, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addrlen) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;get remote addr: %d %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, errno,
                   strerror(errno));
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ntohs(addr.sin_port);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inet_ntoa(addr.sin_addr);
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client addr: %s:%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ip, port);

        request(client);
        response(client);
        close(client);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;clientc&#34;&gt;client.c&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netdb.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; client) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];

    sprintf(buf, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;);
    send(client, buf, strlen(buf), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; client) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
    recv(client, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in serv_addr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; hostent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;server;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 第一次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gethostbyname(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;);

    bzero((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(serv_addr));
    serv_addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;
    bcopy((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr.sin_addr.s_addr,
          server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_length);
    serv_addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; htons(&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;);

    sendto(client, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, MSG_FASTOPEN &lt;span style=&#34;color:#75715e&#34;&gt;/*MSG_FASTOPEN*/&lt;/span&gt;,
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(serv_addr));
    response(client);
    close(client);

    &lt;span style=&#34;color:#75715e&#34;&gt;// 第二次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gethostbyname(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;);

    bzero((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(serv_addr));
    serv_addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;
    bcopy((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_addr, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr.sin_addr.s_addr,
          server&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;h_length);
    serv_addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; htons(&lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;);

    sendto(client, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, MSG_FASTOPEN &lt;span style=&#34;color:#75715e&#34;&gt;/*MSG_FASTOPEN*/&lt;/span&gt;,
           (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(serv_addr));
    response(client);
    close(client);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
  </item>
  
  <item>
    <title>Redis的网络模型</title>
    <link>https://journey-c.github.io/redis-network-model/</link>
    <pubDate>Sun, 16 May 2021 23:10:11 +0800</pubDate>
    
    <guid>https://journey-c.github.io/redis-network-model/</guid>
    <description>&lt;blockquote&gt;
&lt;p&gt;服务端程序几乎都会有网络交互的功能，一个优秀网络模型可以合理配合使用计算机的各资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis作为广为人知的内存数据库，从玩具级项目到工业级项目中都可以看到它的身影，而Redis在最初的几个版本中一直是单线程，却能扛住&lt;a href=&#34;https://redis.io/topics/faq#what39s-the-redis-memory-footprint&#34;&gt;1 million requests per second&lt;/a&gt;的请求量（非单点）。其实现的单线程网络模型必然十分优秀。
&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-share.png&#34; alt=&#34;redis-network-model-share&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;设计原理&#34;&gt;设计原理&lt;/h1&gt;
&lt;p&gt;在分析网络模型之前先分析一下Redis中网络交互的场景。一般来说我们在使用Redis时，一般会和Redis-Server建若干个连接，然后并发的给Redis-Server发送指令并得到回复。而Redis-Server就需要同时维护若干个与Redis-Client的连接，并且随时处理每个连接发来的请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-connecttion-per-thread.png&#34; alt=&#34;redis-network-model-connecttion-per-thread&#34;&gt;
一种方式是起一个线程监听一个端口，当新连接到来时，创建一个新线程处理这个连接。这样做的缺点是，当连接过多时线程数也随之增多，线程栈大小一般8MB，大量的线程会占用大量内存和CPU资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-connecttion-worker-pool.png&#34; alt=&#34;redis-network-model-connecttion-worker-pool&#34;&gt;
另一种方式是起一个线程监听端口，新连接交给线程池来处理，这样做的优点是连接数不再会压垮计算机，而缺点就是服务器的处理能力受限与线程池的大小，并且空闲连接也会占用线程池的资源。&lt;/p&gt;
&lt;p&gt;上边两种网络模型的问题就在于一个线程只处理一个连接，而操作系统提供的&lt;a href=&#34;https://journey-c.github.io/io-multiplexing&#34;&gt;IO多路复用技术&lt;/a&gt;可以解决这一问题。一个线程监听多个连接，每个连接只有在活跃时才会使用CPU，从而达到节省资源的目录。&lt;/p&gt;
&lt;p&gt;Redis采用Reactor模式实现的网络模型。主要由事件收集器、事件发送器、事件处理器组成。事件收集器主要收集所有事件，包括来自硬件软件的事件。事件发送器负责将事件发送到实现注册的事件处理器。而事件处理器则负责处理事件。其中事件收集器就是通过&lt;a href=&#34;https://journey-c.github.io/io-multiplexing&#34;&gt;IO多路复用技术&lt;/a&gt;来实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model.png&#34; alt=&#34;redis-network-model&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-data-structure.png&#34; alt=&#34;redis-network-model-data-structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;结构体&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;封装了事件循环相关的变量，包括两种事件的链表(时间事件、文件事件)。然后文件事件（&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L72&#34;&gt;aeFileEvent&lt;/a&gt;）中封装了读写事件接口充当事件处理器，时间事件（&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L80&#34;&gt;aeTimeEvent&lt;/a&gt;）中也封装了相应接口作为事件处理器。&lt;/p&gt;
&lt;h1 id=&#34;事件&#34;&gt;事件&lt;/h1&gt;
&lt;p&gt;默认有两种事件：&lt;code&gt;文件事件&lt;/code&gt;, &lt;code&gt;时间事件&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件事件对应文件的I/O事件，例如socket可读可写事件。&lt;/li&gt;
&lt;li&gt;时间事件对应定时任务，例如Redis的定时清理等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先来看一下文件事件的封装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* File event structure */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeFileEvent {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mask; &lt;span style=&#34;color:#75715e&#34;&gt;/* one of AE_(READABLE|WRITABLE|BARRIER) */&lt;/span&gt;
    aeFileProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rfileProc;
    aeFileProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;wfileProc;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;clientData;
} aeFileEvent;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包含了一个标志位&lt;code&gt;mask&lt;/code&gt;和&lt;code&gt;read事件&lt;/code&gt;、&lt;code&gt;write事件&lt;/code&gt;的处理器。如果文件事件对应的是客户端的话&lt;code&gt;clientData&lt;/code&gt;就储存了对应&lt;code&gt;connection接口&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;时间事件就比较复杂，redis没有采用&lt;code&gt;Time FD&lt;/code&gt;来实现定时任务，采用事件循环的timeout来辅助实现的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Time event structure */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeTimeEvent {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; id; &lt;span style=&#34;color:#75715e&#34;&gt;/* time event identifier. */&lt;/span&gt;
    monotime when;
    aeTimeProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;timeProc;
    aeEventFinalizerProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;finalizerProc;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;clientData;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeTimeEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;prev;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeTimeEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; refcount; &lt;span style=&#34;color:#75715e&#34;&gt;/* refcount to prevent timer events from being
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;           * freed in recursive time event calls. */&lt;/span&gt;
} aeTimeEvent;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;id&lt;/code&gt;每个时间事件的ID。&lt;code&gt;when&lt;/code&gt;为事件发生的时间戳（毫秒）。&lt;code&gt;timeProc&lt;/code&gt;为事件发生时处理器。&lt;code&gt;finalizerProc&lt;/code&gt;为事件终止处理器，时间事件被删除时触发。&lt;code&gt;prev&lt;/code&gt;和&lt;code&gt;next&lt;/code&gt;为时间事件链表的指针，所有的时间事件都在一个链表中。&lt;code&gt;refcount&lt;/code&gt;为事件引用数。&lt;/p&gt;
&lt;h1 id=&#34;事件循环&#34;&gt;事件循环&lt;/h1&gt;
&lt;p&gt;首先最核心的数据结构就是&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;，它封装了redis-server的事件循环，充当了事件收集器和事件发送器的作用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* State of an event based program */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeEventLoop {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxfd;   &lt;span style=&#34;color:#75715e&#34;&gt;/* highest file descriptor currently registered */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; setsize; &lt;span style=&#34;color:#75715e&#34;&gt;/* max number of file descriptors tracked */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; timeEventNextId;
    aeFileEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;events; &lt;span style=&#34;color:#75715e&#34;&gt;/* Registered events */&lt;/span&gt;
    aeFiredEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fired; &lt;span style=&#34;color:#75715e&#34;&gt;/* Fired events */&lt;/span&gt;
    aeTimeEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;timeEventHead;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stop;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;apidata; &lt;span style=&#34;color:#75715e&#34;&gt;/* This is used for polling API specific data */&lt;/span&gt;
    aeBeforeSleepProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;beforesleep;
    aeBeforeSleepProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;aftersleep;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags;
} aeEventLoop;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;maxfd&lt;/code&gt;字段为当前监听fd的最大值。&lt;code&gt;setsize&lt;/code&gt;为最多监听事件的数量，一般为最大连接数加上一部分冗余。&lt;code&gt;timeEventNextId&lt;/code&gt;为下一个时间事件的id。&lt;code&gt;stop&lt;/code&gt;为停止标志。&lt;code&gt;beforesleep&lt;/code&gt;和&lt;code&gt;aftersleep&lt;/code&gt;为事件循环之前和之后触发的函数。&lt;code&gt;flags&lt;/code&gt;用于存各种标记。
最后再看一下几个主要的字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt;为所有注册的文件事件(最大长度为&lt;code&gt;setsize&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fired&lt;/code&gt;为已触发的文件事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeEventHead&lt;/code&gt;用于存时间事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apidata&lt;/code&gt;为&lt;a href=&#34;https://journey-c.github.io/io-multiplexing/&#34;&gt;多路复用&lt;/a&gt;的接口，根据平台的不同其实现可能是evport/epoll/kqueue/select等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要数据结构介绍完了，下面再来通过客户端和服务端一次交互来分析网络模型的工作过程。&lt;/p&gt;
&lt;p&gt;Redis初始化时，首先调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/server.c#L2893&#34;&gt;adjustOpenFilesLimit&lt;/a&gt;函数根据配置文件中的最大连接数修改进程最大文件打开数。然后调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L66&#34;&gt;aeCreateEventLoop&lt;/a&gt;创建&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;结构维护事件循环。&lt;/p&gt;
&lt;p&gt;根据配置文件监听端口之后，会调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/server.c#L3000&#34;&gt;createSocketAcceptHandler&lt;/a&gt;将&lt;code&gt;Listen FD&lt;/code&gt;封装成文件事件加入&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;此时服务端准备工作基本完成了，端口监听了，&lt;code&gt;Listen FD&lt;/code&gt;的&lt;code&gt;accept&lt;/code&gt;动作也监听了。&lt;/p&gt;
&lt;p&gt;然后就会调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L484&#34;&gt;aeMain&lt;/a&gt;进入事件循环了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-eventloop.png&#34; alt=&#34;redis-network-model-eventloop&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L484&#34;&gt;aeMain&lt;/a&gt;函数中是一个循环，不断判断是否停止，不停止就执行&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L348&#34;&gt;aeProcessEvents&lt;/a&gt;函数。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L348&#34;&gt;aeProcessEvents&lt;/a&gt;中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算最近一个时间事件距离现在的时间差和已触发时间事件。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;aeApiPoll&lt;/code&gt;接口（对应底层封装的select/poll/epoll_wait函数）。&lt;/li&gt;
&lt;li&gt;文件事件来临时执行实现注册的读写处理器。&lt;/li&gt;
&lt;li&gt;执行已触发的时间事件（如果有）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时如果客户端连接到Redis的话，会触发初始化时注册的&lt;code&gt;Listen FD&lt;/code&gt;的&lt;code&gt;accept&lt;/code&gt;事件，对应处理器为&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L1106&#34;&gt;acceptTcpHandler&lt;/a&gt;，这个函数主要是调用&lt;code&gt;anetTcpAccept&lt;/code&gt;接口（对应各平台的accept函数）获取&lt;code&gt;Conn FD&lt;/code&gt;。得到&lt;code&gt;Conn FD&lt;/code&gt;之后调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L1034&#34;&gt;acceptCommonHandler&lt;/a&gt;处理这个连接，参数为&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L95&#34;&gt;connCreateAcceptedSocket&lt;/a&gt;函数根据&lt;code&gt;Conn FD&lt;/code&gt;创建的连接对象（&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.h#L73&#34;&gt;connection&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L95&#34;&gt;connCreateAcceptedSocket&lt;/a&gt;首先根据&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.h#L73&#34;&gt;connection&lt;/a&gt;调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L110&#34;&gt;createClient&lt;/a&gt;创建一个&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/server.h#L859&#34;&gt;client&lt;/a&gt;对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L110&#34;&gt;createClient&lt;/a&gt;中首先会调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.h#L165&#34;&gt;connSetReadHandler&lt;/a&gt;执行&lt;code&gt;conn-&amp;gt;type-&amp;gt;set_read_handler&lt;/code&gt;接口，如果是TCP连接的话对应&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L348&#34;&gt;CT_Socket&lt;/a&gt;的&lt;code&gt;set_read_handler&lt;/code&gt;接口，也就是&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L238&#34;&gt;connSocketSetReadHandler&lt;/a&gt;设置读处理器并且将&lt;code&gt;Conn FD&lt;/code&gt;封装成文件事件加入&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;。最后将&lt;code&gt;Connection&lt;/code&gt;和&lt;code&gt;Client&lt;/code&gt;关联起来。&lt;/p&gt;
&lt;p&gt;然后调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L973&#34;&gt;clientAcceptHandler&lt;/a&gt;函数处理一些客户端需要做的事情。&lt;/p&gt;
&lt;p&gt;到此为止，监听动作可以处理了，客户端发来的数据（读事件）也可以处理了。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;上面分析的网络模型在Redis中都是在单线程中实现的，所有事件执行也是串行的，这也是很多人使用Redis实现分布式锁而不用考虑并发原因了。Redis采用单线程实现网络模型也能扛住大量请求，一方面是网络模型足够优秀，另一方面就是所有操作都在内存中，单事物处理时间短，并且Redis数据库中数据结构实现优化到了极致，比如同种数据结构根据数据量大小选择不同底层实现，通用回复字符串共享，秒级时间戳缓存等等。&lt;/p&gt;
&lt;p&gt;事件驱动实现并非只能单线程实现，Redis之所以使用单线程实现一方面是为了方便开发者，另一方面是Redis的瓶颈并不在网络请求。而多线程实现的代表就是&lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-nginx.png&#34; alt=&#34;redis-network-model-nginx&#34;&gt;&lt;/p&gt;
&lt;p&gt;nginx实现时，Master监听，将连接分发给若干个Worker线程处理，每个Worker线程有自己的事件循环。为了避免调度对网络响应的损耗，nginx会调用&lt;a href=&#34;https://man7.org/linux/man-pages/man2/sched_setaffinity.2.html&#34;&gt;SCHED_SETAFFINITY&lt;/a&gt;将每个Worker分散绑定到不同CPU上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-golang.png&#34; alt=&#34;redis-network-model-golang&#34;&gt;&lt;/p&gt;
&lt;p&gt;而以高并发著称的golang语言却不适合采用事件驱动编程。golang标准库中的网络模型都是&lt;code&gt;connection-per-goroutine&lt;/code&gt;，这样做的原因是go无法将goroutine固定到指定&lt;code&gt;P&lt;/code&gt;上，如果采用事件驱动模型，最坏的情况下所有Worker被调度到同一个&lt;code&gt;P&lt;/code&gt;上，就变成单线程模型了。从上面golang事件驱动模型的尖刺非常明显（蓝色为 netpoll + 多路复用，绿色为 netpoll + 长连接，黄色为 net 库 + 长连接）。&lt;/p&gt;
</description>
  </item>
  
  <item>
    <title>Linux内存管理</title>
    <link>https://journey-c.github.io/linux-memory-management/</link>
    <pubDate>Fri, 19 Feb 2021 23:25:19 +0800</pubDate>
    
    <guid>https://journey-c.github.io/linux-memory-management/</guid>
    <description>&lt;blockquote&gt;
&lt;p&gt;计算机的计算，一方面说的是进程、线程对于CPU的使用，另一方面是对于内存的管理。本文就是介绍Linux的内存管理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Linux中用户态是没有权限直接操作物理内存的，与硬件相关的交互都是通过系统调用由内核来完成操作的。Linux抽象出虚拟内存，用户态操作的只是虚拟内存，真正操作的物理内存由内核内存管理模块管理。本文通篇都在探索三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虚拟地址空间是如何管理的&lt;/li&gt;
&lt;li&gt;物理地址空间是如何管理的&lt;/li&gt;
&lt;li&gt;虚拟地址空间和物理地址空间是如何映射的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述三个问题得到解决之后，我们就可通过一个虚拟地址空间找到对应的物理地址空间。我们首先来看一下Linux虚拟地址空间的管理。&lt;/p&gt;
&lt;h1 id=&#34;1-虚拟地址空间的管理&#34;&gt;1. 虚拟地址空间的管理&lt;/h1&gt;
&lt;p&gt;是不是用户态使用虚拟内存，内核态直接使用物理内存呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是的，内核态和用户态使用的都是虚拟内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用虚拟地址一个核心的问题，需要记录虚拟地址到物理地址的映射，最简单的方式是虚拟地址与物理地址一一对应，这样4G内存光是维护映射关系就需要4G（扯淡）。所以需要其他有效的内存管理方案。通常有两种：分段、分页。下面我们来一起分析一下这两种管理机制以及在Linux中是如何应用的。&lt;/p&gt;
&lt;h2 id=&#34;分段&#34;&gt;分段&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/memory-management-x86-cpu.png&#34; alt=&#34;&#34;&gt;
8086升级到80386之后，段寄存器CS、DS、SS、ES从直接存放地址变成高位存放段选择子，低位做段描述符缓存器。由原来的直接使用内存地址变为现在的通过分段机制来使用内存地址。&lt;/p&gt;
&lt;p&gt;那我们先来看一下内存管理中分段机制的原理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/memory-management-segmented.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;分段机制下虚拟地址由两部分组成，&lt;strong&gt;段选择子&lt;/strong&gt;和&lt;strong&gt;段内偏移量&lt;/strong&gt;。段选择子中的段号作为段表的索引，通过段号可以在段表找到对应段表项，每一项记录了一段空间：段基址、段的界限、特权级等。用段基址+段内偏移量就可以计算出对应的物理地址。&lt;/p&gt;
&lt;p&gt;Linux中段表称为段描述符表，放在全局描述符表中，用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/desc_defs.h#L23&#34;&gt;GDT_ENTRY_INIT&lt;/a&gt;函数来初始化表项&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/desc_defs.h#L16&#34;&gt;desc_struct&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是Linux中&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/segment.h#L171&#34;&gt;段选择子&lt;/a&gt;和&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/kernel/cpu/common.c#L115&#34;&gt;段表&lt;/a&gt;的定义，看一下所有段表项初始化传入的参数中，段基址base都是0，这没有分段。事实上Linux中没有用到全部的分段功能，对于内存管理更倾向于分页机制。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GDT_ENTRY_KERNEL32_CS		1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GDT_ENTRY_KERNEL_CS		2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GDT_ENTRY_KERNEL_DS		3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define GDT_ENTRY_DEFAULT_USER32_CS	4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GDT_ENTRY_DEFAULT_USER_DS	5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GDT_ENTRY_DEFAULT_USER_CS	6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;DEFINE_PER_CPU_PAGE_ALIGNED(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; gdt_page, gdt_page) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { .gdt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_X86_64
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	[GDT_ENTRY_KERNEL32_CS]		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc09b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_KERNEL_CS]		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xa09b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_KERNEL_DS]		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc093&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_DEFAULT_USER32_CS]	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc0fb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_DEFAULT_USER_DS]	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc0f3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_DEFAULT_USER_CS]	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xa0fb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
&lt;span style=&#34;color:#75715e&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	[GDT_ENTRY_KERNEL_CS]		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc09a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_KERNEL_DS]		&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc092&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_DEFAULT_USER_CS]	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc0fa&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	[GDT_ENTRY_DEFAULT_USER_DS]	&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GDT_ENTRY_INIT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc0f2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffff&lt;/span&gt;),
	......
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;} };
EXPORT_PER_CPU_SYMBOL_GPL(gdt_page);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分页&#34;&gt;分页&lt;/h2&gt;
&lt;p&gt;分页机制和分段机制差不多，都是将物理地址分块。不同的是分段一般将内存大段大段的分割且每段大小一般不相同。而分页将物理内存分成一块块大小相同的页，一般大小为4KB。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-pagination_0.png&#34; alt=&#34;&#34;&gt;
在分页机制下，虚拟地址有两部分组成(两部分不是严格的两段，比如页号就可以有多级页号)，&lt;strong&gt;页号、页内偏移量&lt;/strong&gt;。通过页号找到对应页表项，页表项高位存了物理页号，低位存储了FLAGS。&lt;/p&gt;
&lt;p&gt;例如页大小为4KB，只分一级，32位环境中虚拟地址为32位，$2^{32}/2^{12}=2^{20}$可以分1M个页，用20位可以表示页号，12位表示页内偏移。页表项大小为4B(32位)，那么页表大小就是$1M*4B=4MB$，因为每个进程都有自己独立的虚拟地址空间，有100个进程的话光维护页表就需要100MB的空间，这个对于内核来说有点太大了。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-pagination_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Linux是如何解决页表太大的问题呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;采用多级分页的策略才解决页表太大的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;32位环境中，一级分页和上边描述的一样，分成1M个4KB的页，由页表维护虚拟页号到物理页号的映射。内核在这次分页之后，又对页表进行分页。页表大小为4MB，我们在按照4KB一页进行分页，4KB包含页表项1K项。所以二级分页就是把页表1M的项按照1K项为一页分了1K页。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-pagination_2.png&#34; alt=&#34;&#34;&gt;
二级分页后，虚拟地址就被分成三部分：页目录号、页表内偏移、页内偏移。通过虚拟地址查找物理地址时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过虚拟地址前10位的页目录号找到对应页目录项，这个页目录项管理了1K个页表项。&lt;/li&gt;
&lt;li&gt;通过虚拟地址中10位的页表内偏移，从1K个页表项中定位到一个页表项。这个页表项里有物理页号和各种标志位。&lt;/li&gt;
&lt;li&gt;物理页号+虚拟地址中后12位的页内偏移得到对应物理地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样用于维护分页机制的额外空间就是页表（4MB）+ 页表目录（4KB），这不是比一级分页更高了吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际不是的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果使用一级页表，那么每个进程都需要一个页表来维护虚拟地址空间，就是说100个进程需要额外400 MB的空间。&lt;/li&gt;
&lt;li&gt;如果使用二级页表，每个进程必须的是一个4KB的页目录表。当然并不是每个进程都是用全部4GB内存的。所以4MB的二级页表不会全部使用，用到多少地址就建多少个页表项。所以实际需要额外空间为4KB+使用的页表项数量*4KB
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-pagination_3.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然64位的环境中，二级页表就不够了，使用的是四级页表，包括&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/pgtable_types.h#L286&#34;&gt;全局页目录项 PGD（Page Global Directory）&lt;/a&gt;、&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/pgtable_types.h#L359&#34;&gt;上层页目录项 PUD（Page Upper Directory）&lt;/a&gt;、&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/pgtable_types.h#L385&#34;&gt;中间页目录项 PMD（Page Middle Directory）&lt;/a&gt;和&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/pgtable_64_types.h#L21&#34;&gt;页表项 PTE（Page Table Entry）&lt;/a&gt;
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-pagination_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然多级分页解决了页表过大的问题，但是同时也增大了访问延时，由原来的一次访问内存，变为现在访问多次页表之后才能访问目的地址。&lt;/p&gt;
&lt;p&gt;到目前为止，我们已经知道如何通过一个虚拟地址得到对应的物理地址。&lt;/p&gt;
&lt;h1 id=&#34;2-进程的虚拟地址空间&#34;&gt;2. 进程的虚拟地址空间&lt;/h1&gt;
&lt;p&gt;接下来我们再一起看一下进程内的虚拟地址空间是什么样的，Linux中没有进程线程的区别，用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/sched.h#L640&#34;&gt;struct task_struct&lt;/a&gt;表示任务。那么我们可以分析&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/sched.h#L640&#34;&gt;struct task_struct&lt;/a&gt;中内存相关变量来分析进程的虚拟内存布局。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; task_struct {
	...
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; mm_struct		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;mm;
	...	
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/sched.h#L640&#34;&gt;struct task_struct&lt;/a&gt;里面&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;来管理内存。&lt;/p&gt;
&lt;p&gt;首先，既然分析用户态的基本布局，当然要知道用户态和内核态的界限在哪，&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;里面的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L405&#34;&gt;task_size&lt;/a&gt;变量表示用户态空间的大小。&lt;/p&gt;
&lt;p&gt;使用系统调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L2054&#34;&gt;execve&lt;/a&gt;加载二进制文件的调用链是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1977&#34;&gt;do_execve&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1855&#34;&gt;do_execveat_common&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1775&#34;&gt;bprm_execve&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1727&#34;&gt;exec_binprm&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1681&#34;&gt;search_binary_handler&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L100&#34;&gt;linux_binfmt的load_binary接口&lt;/a&gt;。load_binary接口实际是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L820&#34;&gt;load_elf_binary&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L820&#34;&gt;load_elf_binary&lt;/a&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1412&#34;&gt;setup_new_exec&lt;/a&gt;。这个函数中会将task的mm_struct成员变量task_size 设置为TASK_SIZE。&lt;/p&gt;
&lt;p&gt;32位环境中内核定义如下，TASK_SIZE为0xC0000000，用户空间默认3GB，内核空间1GB。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * User space process size: 3GB (default).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define IA32_PAGE_OFFSET	__PAGE_OFFSET
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE		__PAGE_OFFSET
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE_LOW		TASK_SIZE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE_MAX		TASK_SIZE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DEFAULT_MAP_WINDOW	TASK_SIZE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STACK_TOP		TASK_SIZE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define STACK_TOP_MAX		STACK_TOP
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;64位环境中虚拟地址只是用了48位，TASK_SIZE为 (1 &amp;laquo; 47) 减去一页的大小为0x00007FFFFFFFF000。用户空间大概位128TB，内核空间也是128TB，且用户空间和内核空间之间留有空隙用于隔离。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE_MAX	((_AC(1,UL) &amp;lt;&amp;lt; __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define DEFAULT_MAP_WINDOW	((1UL &amp;lt;&amp;lt; 47) - PAGE_SIZE)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* This decides where the kernel will search for a free chunk of vm
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * space during mmap&amp;#39;s.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define IA32_PAGE_OFFSET	((current-&amp;gt;personality &amp;amp; ADDR_LIMIT_3GB) ? \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;					0xc0000000 : 0xFFFFe000)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE_LOW		(test_thread_flag(TIF_ADDR32) ? \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;					IA32_PAGE_OFFSET : DEFAULT_MAP_WINDOW)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE		(test_thread_flag(TIF_ADDR32) ? \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define TASK_SIZE_OF(child)	((test_tsk_thread_flag(child, TIF_ADDR32)) ? \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/memory-management-task-size.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户态&#34;&gt;用户态&lt;/h2&gt;
&lt;p&gt;了解了用户空间和内核空间分界之后，我们先来看下用户空间。用户态虚拟内存布局如下，32位和64位区域和布局差别不大。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-user-mode-memory-layout.png&#34; alt=&#34;&#34;&gt;
这些空间里的内容是从哪填充来的呢？没错，是不是感觉和可执行文件的格式有点像。一个进程创建之后所有的内存空间都是复制父进程的，当父进程调用exec加载新的二进制时就会将二进制文件内容加载到进程内存各个模块中，但是不一定是立即加载，有些非必需字段是用时加载。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-executable-file-format.png&#34; alt=&#34;&#34;&gt;
&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;结构体中如下参数定义了这些模块的属性和位置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;字段名&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;struct vm_area_struct *&lt;/td&gt;
&lt;td&gt;mmap&lt;/td&gt;
&lt;td&gt;内存中每个区域对应一个mmap，这些区域用链表连接起来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;struct rb_root&lt;/td&gt;
&lt;td&gt;mm_rb&lt;/td&gt;
&lt;td&gt;红黑树，用来辅助操作mmap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;mmap_base&lt;/td&gt;
&lt;td&gt;用于映射的内存起始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;task_size&lt;/td&gt;
&lt;td&gt;用户空间大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;total_vm&lt;/td&gt;
&lt;td&gt;总共映射的页数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;locked_vm&lt;/td&gt;
&lt;td&gt;当内存吃紧，将个别页换到磁盘上，locaked_vm表示被锁定不能换出的页数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;pinned_vm&lt;/td&gt;
&lt;td&gt;不能换出也不能移动的页数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;data_vm&lt;/td&gt;
&lt;td&gt;存放数据页数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;exec_vm&lt;/td&gt;
&lt;td&gt;可执行文件占用的页数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;stack_vm&lt;/td&gt;
&lt;td&gt;栈占用的页数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;start_code, end_code, start_data, end_data&lt;/td&gt;
&lt;td&gt;代码段起始和结束位置，数据段起始和结束位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;start_brk, brk, start_stack&lt;/td&gt;
&lt;td&gt;堆起始结束位置，栈起始位置(栈结束位置在SP寄存器中)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unsigned long&lt;/td&gt;
&lt;td&gt;arg_start, arg_end, env_start, env_end&lt;/td&gt;
&lt;td&gt;参数列表起始和结束位置，环境变量起始和结束位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L820&#34;&gt;load_elf_binary&lt;/a&gt;负责加载二进制，并且根据可执行文件内容初始化各个区域。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1412&#34;&gt;setup_new_exec&lt;/a&gt;设置&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;的mm_base参数（mmap内存映射区域）,并且设置task_size的值。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L741&#34;&gt;setup_arg_pages&lt;/a&gt;设置栈的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L305&#34;&gt;struct vm_area_struct&lt;/a&gt;结构，并设置参数列表起始位置arg_start的值，arg_start指向栈低start_stack的位置。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L360&#34;&gt;elf_map&lt;/a&gt;将可执行文件中的代码段映射到内存空间。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L110&#34;&gt;set_brk&lt;/a&gt;设置堆空间的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L305&#34;&gt;struct vm_area_struct&lt;/a&gt;，并且初始化start_brk=brk（堆为空）。&lt;/li&gt;
&lt;li&gt;如果有动态库，则调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/binfmt_elf.c#L588&#34;&gt;load_elf_interp&lt;/a&gt;映射到内存映射区域。&lt;/li&gt;
&lt;li&gt;给start_code, end_code, start_data, end_data赋值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进程的用户态布局就变成下面这样。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-user-mode-memory-layout_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;内存区域映射完之后，存在一下情况区域会发生变化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户调用malloc/free申请堆空间，小内存操作调用brk移动堆结束指针，大内存操作调用mmap。&lt;/li&gt;
&lt;li&gt;创建临时变量或函数调用导致栈指针移动时对应栈区域也会移动。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里简单看下堆内存操作brk的过程，mmap后边会讲解。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入口在&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L190&#34;&gt;SYSCALL_DEFINE1(brk, unsigned long, brk)&lt;/a&gt;。参数brk就是新堆顶的位置。&lt;/li&gt;
&lt;li&gt;将参数堆顶位置brk和进程旧堆顶位置brk关于页对齐，如果对齐后两者相同说明变化量很小可以在同一页里解决。将mm_struct的brk指向新的brk即可。&lt;/li&gt;
&lt;li&gt;如果两者对齐后不相同，说明操作跨页了，如果新brk小于旧的brk说明是释放内存，就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L2806&#34;&gt;__do_munmap&lt;/a&gt;将多余的页去掉映射。&lt;/li&gt;
&lt;li&gt;如果新brk大于旧brk说明是申请内存，就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L2300&#34;&gt;find_vma&lt;/a&gt;在红黑树中找到下一个&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L305&#34;&gt;struct vm_area_struct&lt;/a&gt;的位置，看中间是否还能分配一个完整的页，分配不了就报错。如果能就更新各参数分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;内核态&#34;&gt;内核态&lt;/h2&gt;
&lt;p&gt;内核态的虚拟地址空间和某个进程没关系，所有进程共享同一个内核态虚拟地址空间。并且此时讨论的还是虚拟地址空间。前面分析用户态和内核态分界的时候讲了32位内核态是1GB，64位内核态是128TB。因为空间的数量级就差很大，可想而知布局也会有一定差别，毕竟32位太小了。我们先来分析一下32位内核态的布局。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-kernel-mode-memory-layout.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前896M为直接映射区，这部分地址连续，虚拟地址与物理地址映射关系较为简单，内核用了两个宏定义来转换地址&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/page.h#L59&#34;&gt;#define __va(x)&lt;/a&gt;，&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/page.h#L42&#34;&gt;#define __pa(x)&lt;/a&gt;实际转换规则就是虚拟地址-PAGE_OFFSET(前面讲过用户空和内核空间分界)得到物理地址，物理地址+PAGE_OFFSET得到虚拟地址。直接映射区前1M空间开机处于实模式时会使用，内核代码从1M开始加载，然后就是全局变量、BSS等，另外内存管理的页表以及进程的内核栈都会放在这个区域。&lt;/li&gt;
&lt;li&gt;接下来就是8M的空洞，用于捕捉内存越界。其他空洞也是这个原因。&lt;/li&gt;
&lt;li&gt;VMALLOC_START到VMALLOC_END成为动态映射空间，类似进程的堆，内核使用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmalloc.c#L2632&#34;&gt;vmalloc&lt;/a&gt;进行动态申请内存的区域。&lt;/li&gt;
&lt;li&gt;PKMAP_BASE到FIXADDR_START是持久映射空间，通常为4M，内核使用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/gfp.h#L555&#34;&gt;alloc_pages&lt;/a&gt;获得&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L68&#34;&gt;struct page&lt;/a&gt;结构，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/highmem.h#L48&#34;&gt;kmap&lt;/a&gt;将其映射到这个区域。&lt;/li&gt;
&lt;li&gt;FIXADDR_START到FIXADDR_TOP为固定映射区域，留作特定用途。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;64位的内核态布局就较为简单了，毕竟128TB太大不需要扣内存。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-kernel-mode-memory-layout-64.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核空间从0xffff800000000000开始，之后有8T空洞。&lt;/li&gt;
&lt;li&gt;0xFFFF880000000000到0xFFFFC80000000000是直接映射区，同32位。&lt;/li&gt;
&lt;li&gt;0xFFFFC90000000000到0xFFFFE90000000000是动态映射区，同32位。&lt;/li&gt;
&lt;li&gt;然后就是存放物理页表，同32位持久映射区域。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-物理地址空间的管理&#34;&gt;3. 物理地址空间的管理&lt;/h1&gt;
&lt;p&gt;讲完了虚拟地址空间的管理，现在再来看一下Linux是如何管理物理内存的。&lt;/p&gt;
&lt;p&gt;传统的x86架构的工作模式中，多处理器与一个集中存储器相连时，所有CPU都要通过总线去访问内存。也就是对称多处理器模式&lt;a href=&#34;https://en.wikipedia.org/wiki/Symmetric_multiprocessing&#34;&gt;SMP（Symmetric multiprocessing）&lt;/a&gt;。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-symmetric-multiprocessing.png&#34; alt=&#34;&#34;&gt;
由于所有的内存访问都要经过总线，所以总线会成为瓶颈。&lt;/p&gt;
&lt;p&gt;为了提高性能和扩展性，诞生了一种更高级的模式，非一致性内存访问&lt;a href=&#34;https://en.wikipedia.org/wiki/Non-uniform_memory_access&#34;&gt;NUMA（Non-uniform memory access）&lt;/a&gt;。这种模式下每个CPU有自己本地的内存，当本地内存不足时才会访问其他NUMA节点的内存。这样就提高了访问的效率。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-physical-memory.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;值得注意的一点就是Mysql对NUMA支持不友好，NUMA在默认在本地CPU上分配内存，会导致CPU节点之间内存分配不均衡，当某个CPU节点的内存不足会使用Swap而不是直接从远程节点分配内存。经常内存还有耗尽，Mysql就已经使用Swap照成抖动，这就是&amp;quot;Swap Insanity&amp;rdquo;。所以单机部署Mysql的时候最好将NUMA关掉。&lt;/p&gt;
&lt;h2 id=&#34;节点&#34;&gt;节点&lt;/h2&gt;
&lt;p&gt;接下来我们就看一下当前主流的模式NUMA，NUMA模式中内存分节点，每个CPU有本地内存，内核中用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mmzone.h#L726&#34;&gt;typedef struct pglist_data pg_data_t&lt;/a&gt;表示节点。我们来看一下这个结构体重点的变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pglist_data {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; zone node_zones[MAX_NR_ZONES];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; zonelist node_zonelists[MAX_ZONELISTS];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nr_zones; &lt;span style=&#34;color:#75715e&#34;&gt;/* number of populated zones in this node */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_FLAT_NODE_MEM_MAP	&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* means !SPARSEMEM */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;node_mem_map;
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_PAGE_EXTENSION
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	...
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; node_start_pfn;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; node_present_pages; &lt;span style=&#34;color:#75715e&#34;&gt;/* total number of physical pages */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; node_spanned_pages; &lt;span style=&#34;color:#75715e&#34;&gt;/* total size of physical page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;					     range, including holes */&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; node_id;
	...
} pg_data_t;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;节点ID，node_id。&lt;/li&gt;
&lt;li&gt;node_mem_map 就是这个节点的 struct page 数组，用于描述这个节点里面的所有的页。&lt;/li&gt;
&lt;li&gt;node_start_pfn 是这个节点的起始页号。&lt;/li&gt;
&lt;li&gt;node_spanned_pages 是这个节点中包含不连续的物理内存地址的页面数。&lt;/li&gt;
&lt;li&gt;node_present_pages 是真正可用的物理页面的数目。&lt;/li&gt;
&lt;li&gt;节点内再将页分成区，存放在node_zones数组中。大小是MAX_NR_ZONES。&lt;/li&gt;
&lt;li&gt;nr_zones表示节点的区域数量。&lt;/li&gt;
&lt;li&gt;node_zonelists是备用节点和它的内存区域的情况。当本地内存不足时会使用到。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;区域的类型如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; zone_type {
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_ZONE_DMA
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	ZONE_DMA,
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_ZONE_DMA32
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	ZONE_DMA32,
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	ZONE_NORMAL,
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_HIGHMEM
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	ZONE_HIGHMEM,
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	ZONE_MOVABLE,
&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef CONFIG_ZONE_DEVICE
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	ZONE_DEVICE,
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	__MAX_NR_ZONES
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;ZONE_DMA直接内存读取区域，DMA是一种机制，要把外设的数据读入内存或把内存的数据传送到外设，原来都要通过 CPU 控制完成，但是这会占用 CPU，影响 CPU 处理其他事情，所以有了 DMA 模式。CPU 只需向 DMA 控制器下达指令，让 DMA 控制器来处理数据的传送，数据传送完毕再把信息反馈给 CPU，这样就可以解放 CPU。对于64位系统有两个DMA区域ZONE_DMA、ZONE_DMA32，后者只能被32位设备访问。&lt;/li&gt;
&lt;li&gt;ZONE_NORMAL直接映射区，内核虚拟地址空间讲过，就是地址加上一个常量与虚拟地址空间映射。&lt;/li&gt;
&lt;li&gt;ZONE_HIGHMEM高端内存区，64位系统是不需要的。&lt;/li&gt;
&lt;li&gt;ZONE_MOVABLE可移动区，通过将内存划分为可移动区和不可移动区来避免碎片。&lt;/li&gt;
&lt;li&gt;ZONE_DEVICE为支持热插拔设备而分配的Non Volatile Memory非易失性内存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;区&#34;&gt;区&lt;/h2&gt;
&lt;p&gt;内核将内存分区的目的是形成不同内存池，从而根据用途进行分配。内核使用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mmzone.h#L448&#34;&gt;struct zone&lt;/a&gt;表示区。区就是本节点一个个页集合了。我们再来看一下这个结构体。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; zone {
	...
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pglist_data	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;zone_pgdat;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; per_cpu_pageset __percpu &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pageset;
	...
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;		zone_start_pfn;
	atomic_long_t		managed_pages;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;		spanned_pages;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;		present_pages;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;name;
	...
	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; free_area	free_area[MAX_ORDER];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;		flags;
	spinlock_t		lock;
	...
} ____cacheline_internodealigned_in_smp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;zone_start_pfn表示这个区中第一页。&lt;/li&gt;
&lt;li&gt;spanned_pages表示和节点中的node_spanned_pages变量类似，都是不连续物理页数，就是终止页减去起始页(中间可能有空洞，但是不管)。&lt;/li&gt;
&lt;li&gt;present_pages实际物理页数量。&lt;/li&gt;
&lt;li&gt;managed_pages被伙伴系统管理的所有的 page 数目。&lt;/li&gt;
&lt;li&gt;pageset用于区分冷热页，前面将分段机制时说过80386架构CS、DS等段寄存器由单纯表示段地址升级为段选择子和段描述符缓存器。就是说有些经常被访问的页会被缓存在寄存器中，被缓存的就是热页，这个变量就是用于区分冷热页。&lt;/li&gt;
&lt;li&gt;free_area空闲页。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;页&#34;&gt;页&lt;/h2&gt;
&lt;p&gt;然后就到了最基本的内存单元——页，内核使用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L68&#34;&gt;struct page&lt;/a&gt;表示物理页。结构体中有很多union，用于不同模式时的表示。主要有两种模式，1. 整页分配使用伙伴系统、2. 小内存分配使用slab allocator技术。&lt;/p&gt;
&lt;h2 id=&#34;页的分配&#34;&gt;页的分配&lt;/h2&gt;
&lt;p&gt;页的分配有两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按页分配&lt;/li&gt;
&lt;li&gt;Slab分配（通常分配大小小于一页）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;按页分配&#34;&gt;按页分配&lt;/h3&gt;
&lt;p&gt;使用伙伴系统分配，&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mmzone.h#L448&#34;&gt;struct zone&lt;/a&gt;中的free_area数组每个元素都是一个链表首地址，每条链表有1、2、4、8、16、32、64、128、256、512 和 1024 个连续页。也就是说最多可以分配4MB的连续内存，每个页块的地址物理页地址是页块大小的整数倍。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-free-area.png&#34; alt=&#34;&#34;&gt;
分配使用函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/gfp.h#L545&#34;&gt;alloc_pages&lt;/a&gt;，该函数返回连续物理页的第一页的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L68&#34;&gt;struct page&lt;/a&gt;的地址。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/gfp.h#L545&#34;&gt;alloc_pages&lt;/a&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mempolicy.c#L2256&#34;&gt;alloc_pages_current&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mempolicy.c#L2256&#34;&gt;alloc_pages_current&lt;/a&gt;中根据参数gfp判断分配什么类型的页，GFP_USER用户空间页，GFP_KERNEL内核空间页，GFP_HIGHMEM高端内存页。参数order表示分配$2^{order}$个页。之后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/page_alloc.c#L4917&#34;&gt;__alloc_pages_nodemask&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/page_alloc.c#L4917&#34;&gt;__alloc_pages_nodemask&lt;/a&gt;是伙伴系统的核心方法，大概逻辑就是先看当前区空闲页是否足够，不够就看备用区，遍历每个区时，比如要分配128个页，就会从128个页的块往上找，例如128没有，256有，就将256分割称128和128，一个用于分配，另一个放入128页为一块的链表中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;释放页使用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/page_alloc.c#L5020&#34;&gt;free_pages&lt;/a&gt;，参数addr和order分别为page地址和要是释放的页数，释放页数为$2^{order}$。&lt;/p&gt;
&lt;h3 id=&#34;slab分配&#34;&gt;Slab分配&lt;/h3&gt;
&lt;p&gt;内核以及用户空间几乎很少用到按页分配的情况，普遍使用都是像malloc那样小段内存申请，并且操作十分频繁。这种频繁的操作通常会使用空闲链表，空闲链表缓存被释放的结构，下次分配是直接从链表抓取而不是申请。&lt;/p&gt;
&lt;p&gt;内核中，空闲链表面临的主要问题是不能全局控制，当可用内存紧缺时，内核无法通知每个空闲链表收缩从而释放一些内存。事实上内核根本不知道存在哪些空闲链表。为了弥补这一缺陷，Linux内核提供了Slab层。Slab分配器来充当通用数据结构缓存层的角色，以感知所有缓存链表状态。&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/memory-management-slab-allocator.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Slab分配模式中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个结构体对应一个高速缓存，由&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slab.h#L147&#34;&gt;kmem_cache_create&lt;/a&gt;函数创建，由&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slab.h#L155&#34;&gt;kmem_cache_destroy&lt;/a&gt;函数销毁。例如进程线程的结构体&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/sched.h#L640&#34;&gt;struct task_struct&lt;/a&gt;对应高速缓存为&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/kernel/fork.c#L166&#34;&gt;task_struct_cachep&lt;/a&gt;，进程虚拟内存管理结构体&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;对应高速缓存为&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/kernel/fork.c#L342&#34;&gt;mm_cachep&lt;/a&gt;，每个高速缓存都使用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slub_def.h#L83&#34;&gt;struct kmem_cache&lt;/a&gt;表示。这里的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slub_def.h#L83&#34;&gt;struct kmem_cache&lt;/a&gt;是&lt;code&gt;include/linux/slub_def.h&lt;/code&gt;下的，高速缓存中有多个slab。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;内核最开始只有slab，后来开发者对slab逐渐完善，就出现了slob和slub。slob针对嵌入式等内存有限的机器，slub针对large NUMA系统的大型机。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每个slab里面存放了若干个连续物理页用于分配，物理页按照结构体大小分割。工程师通过&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slab.h#L390&#34;&gt;kmem_cache_alloc&lt;/a&gt;申请结构体，通过&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slab.h#L391&#34;&gt;kmem_cache_free&lt;/a&gt;释放结构体(放回)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先分析一下高速缓存&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slub_def.h#L83&#34;&gt;struct kmem_cache&lt;/a&gt;。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-kmem-cache.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cpu_slab 是每个CPU本地缓存。
&lt;ul&gt;
&lt;li&gt;void **freelist 空闲对象链表&lt;/li&gt;
&lt;li&gt;struct page *page 所有连续的物理页&lt;/li&gt;
&lt;li&gt;struct page *partial 部分分配的物理页，这是备用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;list 是高速缓存所在链表。&lt;/li&gt;
&lt;li&gt;node[MAX_NUMNODES] 是该高速缓存所有的slab的数组，每个slab都有一个状态(1.满的，2.空的，3.半满)，本地缓存不够时根据这个状态去找其他的slab。另外还用链表维护着这三个状态的slab。
&lt;ul&gt;
&lt;li&gt;struct list_head slabs_partial 存放半满的slab&lt;/li&gt;
&lt;li&gt;struct list_head slabs_full 存放已满的slab&lt;/li&gt;
&lt;li&gt;struct list_head slabs_free 存放空的slab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面我们根据调用系统调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L2054&#34;&gt;execve&lt;/a&gt;加载二进制文件的例子来看一下NUMA环境中Slab分配内存的完整过程。既然要加载二进制文件，那么进程结构体&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/sched.h#L640&#34;&gt;struct task_struct&lt;/a&gt;中内存管理变量&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;当然要申请了。&lt;/p&gt;
&lt;p&gt;调用链为&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L2054&#34;&gt;execve&lt;/a&gt;-&amp;gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1977&#34;&gt;do_execve&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1855&#34;&gt;do_execveat_common&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L1484&#34;&gt;alloc_bprm&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/exec.c#L363&#34;&gt;bprm_mm_init&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/kernel/fork.c#L1059&#34;&gt;mm_alloc&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/kernel/fork.c#L669&#34;&gt;allocate_mm&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slab.h#L390&#34;&gt;kmem_cache_alloc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;到这里可以看到高速缓存申请的接口&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slab.h#L390&#34;&gt;kmem_cache_alloc&lt;/a&gt;，其中参数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/slub_def.h#L83&#34;&gt;struct kmem_cache&lt;/a&gt;是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;对应的高速缓存。再看一下这个函数做了哪些事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2896&#34;&gt;slab_alloc&lt;/a&gt;，紧接着调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2807&#34;&gt;slab_alloc_node&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2807&#34;&gt;slab_alloc_node&lt;/a&gt;中首先在CPU本地缓存cpu_slab中分配，这就是注释中说的快速通道，分配到了直接返回，否则就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2660&#34;&gt;__slab_alloc&lt;/a&gt;去其他slab中分配，这就是普通通道。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2660&#34;&gt;__slab_alloc&lt;/a&gt;中首先再尝试从本地缓存cpu_slab中分配，没有的话就跳到&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2732&#34;&gt;new_slab&lt;/a&gt;先考虑从本地缓存cpu_slab备用物理页partial中分配，再没有的话就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slub.c#L2564&#34;&gt;new_slab_objects&lt;/a&gt;去其他slab中分配了。如果在没有就只能在申请物理页了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到现在已经说完slab分配对象的逻辑了，但是还有一个问题，就是空闲缓存的回收，由于有了slab层内核已经可以感知所有空闲链表的状态了，所以回收问题是可以解决的。初始化时内核就会注册回收任务，每隔两秒进行一次检查，检查是否需要收缩空闲链表。调用链是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slab.c#L1311&#34;&gt;cpucache_init&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slab.c#L1077&#34;&gt;slab_online_cpu&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slab.c#L510&#34;&gt;start_cpu_timer&lt;/a&gt; 将&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/slab.c#L3951&#34;&gt;cache_reap&lt;/a&gt;注册为定时回调函数。&lt;/p&gt;
&lt;h2 id=&#34;页换出&#34;&gt;页换出&lt;/h2&gt;
&lt;p&gt;不管32位还是64位操作系统，不一定非得按照操作系统要求装内存条，例如32位最大4G虚拟地址空间，但是用户就买了2G怎么办？超过2G的虚拟地址空间不用了吗？不会的，现在几乎所有操作系统都是支持SWAP，就是将不活跃的物理页暂时缓存到磁盘上。&lt;/p&gt;
&lt;p&gt;一般页换出有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主动（当申请内存时，内存紧张就考虑将部分页缓存到磁盘）&lt;/li&gt;
&lt;li&gt;被动（Linux 内核线程&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmscan.c#L3862&#34;&gt;kswapd&lt;/a&gt;定时检查是否需要换出部分页）
&lt;ul&gt;
&lt;li&gt;调用链为&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmscan.c#L3542&#34;&gt;balance_pgdat&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmscan.c#L3494&#34;&gt;kswapd_shrink_node&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmscan.c#L2667&#34;&gt;shrink_node&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmscan.c#L2610&#34;&gt;shrink_node_memcgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/vmscan.c#L2610&#34;&gt;shrink_node_memcgs&lt;/a&gt;就是处理页换出的函数了，里面有个LRU表，根据最近最少未使用的原则换出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4-内存映射&#34;&gt;4. 内存映射&lt;/h1&gt;
&lt;p&gt;上边讲完了虚拟地址空间和物理地址空间是如何管理的，还剩下最后一个问题，这俩是怎么映射的？其实虚拟地址不止可以和物理内存映射，还可以和文件等映射。物理内存只是一种特殊的情况。&lt;/p&gt;
&lt;h2 id=&#34;用户态映射&#34;&gt;用户态映射&lt;/h2&gt;
&lt;p&gt;首先来看一下用户态映射方式。
&lt;img src=&#34;https://journey-c.github.io/images/memory-management-user-mode-memory-mapping.png&#34; alt=&#34;&#34;&gt;
前边说堆的时候，malloc函数只讲了小内存brk的方式，当申请内存较大时会使用mmap（不是系统调用那个），对于堆来说就是将虚拟地址映射到物理地址。另外如果想将文件映射到内存也可以调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/kernel/sys_x86_64.c#L89&#34;&gt;mmap&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们先来分析一下&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/kernel/sys_x86_64.c#L89&#34;&gt;mmap&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L1591&#34;&gt;ksys_mmap_pgoff&lt;/a&gt;参数有fd，通过fd找到对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/fs.h#L916&#34;&gt;struct file&lt;/a&gt;。接下来调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/util.c#L494&#34;&gt;vm_mmap_pgoff&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L1404&#34;&gt;do_mmap&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L1404&#34;&gt;do_mmap&lt;/a&gt;中：
&lt;ol&gt;
&lt;li&gt;首先调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L2256&#34;&gt;get_unmapped_area&lt;/a&gt;在进程地址空间里找到一个没映射的区域(那棵红黑树)。&lt;/li&gt;
&lt;li&gt;然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mmap.c#L1726&#34;&gt;mmap_region&lt;/a&gt;将文件映射到这个区域，并且调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/fs.h#L1906&#34;&gt;call_mmap&lt;/a&gt;执行file-&amp;gt;f_op-&amp;gt;mmap接口把这个区域的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L305&#34;&gt;struct vm_area_struct&lt;/a&gt;结构的内存操作接口换成那个文件的操作函数，也就是说对这段虚拟内存读写，就相当于执行该文件的读写函数。如果是ext4文件系统对应的mmap接口就是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/file.c#L748&#34;&gt;ext4_file_mmap&lt;/a&gt;。&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/file.c#L748&#34;&gt;ext4_file_mmap&lt;/a&gt;中执行内存操作替换为文件操作vma-&amp;gt;vm_ops = &amp;amp;ext4_file_vm_ops;&lt;/li&gt;
&lt;li&gt;然后将&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L305&#34;&gt;struct vm_area_struct&lt;/a&gt;挂到进程的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L388&#34;&gt;struct mm_struct&lt;/a&gt;上。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;现在文件已经和虚拟内存地址有映射了。还没有与物理内存产生关系，而物理内存的映射是用到的时候才映射。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;缺页&#34;&gt;缺页&lt;/h3&gt;
&lt;p&gt;访问某个虚拟地址时，如果没有对应的物理页就会触发缺页中断&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/mm/fault.c#L1416&#34;&gt;handle_page_fault&lt;/a&gt;这里会判断是内核态缺页还是用户态缺页，我们先来看用户态的，会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/mm/fault.c#L1213&#34;&gt;do_user_addr_fault&lt;/a&gt;。这个函数中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到缺页区域对应的&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm_types.h#L305&#34;&gt;struct vm_area_struct&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4579&#34;&gt;handle_mm_fault&lt;/a&gt;-&amp;gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4423&#34;&gt;__handle_mm_fault&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4423&#34;&gt;__handle_mm_fault&lt;/a&gt;中首先会创建前面一直提的页表，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4330&#34;&gt;handle_pte_fault&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4330&#34;&gt;handle_pte_fault&lt;/a&gt;中有三种情况：
&lt;ol&gt;
&lt;li&gt;PTE表为空，说明是缺页(新的)
&lt;ul&gt;
&lt;li&gt;如果映射到物理内存就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L3469&#34;&gt;do_anonymous_page&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;如果映射到文件就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4098&#34;&gt;do_fault&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PTE表不为空，说明页表创建过了，是被换出到磁盘的就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L3241&#34;&gt;do_swap_page&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个个分析，首先看映射到物理页的函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L3469&#34;&gt;do_anonymous_page&lt;/a&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/mm.h#L2231&#34;&gt;pte_alloc&lt;/a&gt;分配一个页表。&lt;/li&gt;
&lt;li&gt;页表有了，就要申请一个物理页放到页表项里了，调用链是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/highmem.h#L274&#34;&gt;alloc_zeroed_user_highpage_movable&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/highmem.h#L251&#34;&gt;__alloc_zeroed_user_highpage&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/gfp.h#L565&#34;&gt;alloc_page_vma&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/mempolicy.c#L2173&#34;&gt;alloc_pages_vma&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/page_alloc.c#L4917&#34;&gt;__alloc_pages_nodemask&lt;/a&gt;。又看到熟悉的函数了&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/page_alloc.c#L4917&#34;&gt;__alloc_pages_nodemask&lt;/a&gt;就是前边说过的伙伴系统核心函数。&lt;/li&gt;
&lt;li&gt;调用mk_pte创建一个页表项并把物理页放进去，最后调用set_pte_at将页表项放入页表。至此页表里面有对应物理页了，虚拟地址就有映射了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再来看下映射到文件的函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4098&#34;&gt;do_fault&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L4098&#34;&gt;do_fault&lt;/a&gt;也有几种不同情况但最终都会调到&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L3585&#34;&gt;__do_fault&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L3585&#34;&gt;__do_fault&lt;/a&gt;中会调用vma-&amp;gt;vm_ops-&amp;gt;fault接口，之前文件映射是说过在缺页之前已经将内存操作接口换成文件操作接口了，所以如果是ext4文件系统，这里的vm_ops就应该是ext4_file_vm_ops，也就是调用了&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/inode.c#L6186&#34;&gt;ext4_filemap_fault&lt;/a&gt;。紧接着调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/filemap.c#L2709&#34;&gt;filemap_fault&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/filemap.c#L2709&#34;&gt;filemap_fault&lt;/a&gt;首先调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/pagemap.h#L332&#34;&gt;find_get_page&lt;/a&gt;查找一下物理内存里事先有没有缓存好的，如果找到了就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/filemap.c#L2662&#34;&gt;do_async_mmap_readahead&lt;/a&gt;从文件中预读一些数据到内存。没有的话就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/filemap.c#L1787&#34;&gt;pagecache_get_page&lt;/a&gt;分配一个物理页并且把物理页加到LRU表里，然后调用struct address_space *mapping-&amp;gt;a_ops-&amp;gt;readpage接口将文件内容缓存到物理页中。ext4文件系统readpage接口对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/inode.c#L3228&#34;&gt;ext4_readpage&lt;/a&gt;，这个函数又调用到&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/inline.c#L498&#34;&gt;ext4_readpage_inline&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/inline.c#L464&#34;&gt;ext4_read_inline_page&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/fs/ext4/inline.c#L464&#34;&gt;ext4_read_inline_page&lt;/a&gt;中首先调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/linux/highmem.h#L92&#34;&gt;kmap_atomic&lt;/a&gt;映射到内核的虚拟地址空间得到虚拟地址kaddr，本来的目的是将物理内存映射到用户虚拟地址空间，但是从文件读取内容缓存到物理内存又不能用物理地址(除了内存管理模块其他操作都得是虚拟地址)，所以这里kaddr只是临时虚拟地址，读取完再把kaddr取消就行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后一种是交换空间类型的，函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/memory.c#L3241&#34;&gt;do_swap_page&lt;/a&gt;，swap类型的和映射到文件的差不多，都是需要从把磁盘文件映射到内存。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/swap_state.c#L369&#34;&gt;lookup_swap_cache&lt;/a&gt;查看swap文件在内存有没有缓存页，有就直接用，没有就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/swap_state.c#L891&#34;&gt;swapin_readahead&lt;/a&gt;将swap文件读到内存页中缓存，再调用mk_pte创建页表项，调用set_pte_at将页表项放入页表。&lt;/li&gt;
&lt;li&gt;读swap文件过程和上一步映射到文件的差不多。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/swapfile.c#L1357&#34;&gt;swap_free&lt;/a&gt;释放掉swap文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;处理完缺页之后，物理页有内容、进程空间有页表，接下来就可以通过虚拟地址找到物理地址了。&lt;/p&gt;
&lt;p&gt;为了加快映射速度，我们引进了&lt;a href=&#34;https://en.wikipedia.org/wiki/Translation_lookaside_buffer&#34;&gt;TLB&lt;/a&gt;专门来做地址映射的硬件，缓存了部分页表。查询时先查快表TLB查到了直接用物理内存，查不到再到内存访问页表。&lt;/p&gt;
&lt;h2 id=&#34;内核态映射&#34;&gt;内核态映射&lt;/h2&gt;
&lt;p&gt;首先内核页表和用户态页表不同，内核页表在初始化时就创建了。内核&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/mm/init-mm.c#L31&#34;&gt;初始化时&lt;/a&gt;将swapper_pg_dir赋值给顶级目录pgd。&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/pgtable_64.h#L29&#34;&gt;swapper_pg_dir&lt;/a&gt;指向顶级目录init_top_pgt。&lt;/p&gt;
&lt;p&gt;系统初始化函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/kernel/setup.c#L771&#34;&gt;setup_arch&lt;/a&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/include/asm/processor.h#L255&#34;&gt;load_cr3(swapper_pg_dir)&lt;/a&gt;刷新TLB说明页表已经构建完了。&lt;/p&gt;
&lt;p&gt;实际初始化在&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/arch/x86/kernel/head_64.S&#34;&gt;arch/x86/kernel/head_64.S&lt;/a&gt;中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if defined(CONFIG_XEN_PV) || defined(CONFIG_PVH)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;SYM_DATA_START_PTI_ALIGNED(init_top_pgt)
	.quad   level3_ident_pgt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __START_KERNEL_map &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; _KERNPG_TABLE_NOENC
	.org    init_top_pgt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; L4_PAGE_OFFSET&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	.quad   level3_ident_pgt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __START_KERNEL_map &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; _KERNPG_TABLE_NOENC
	.org    init_top_pgt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; L4_START_KERNEL&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;/* (2^48-(2*1024*1024*1024))/(2^39) = 511 */&lt;/span&gt;
	.quad   level3_kernel_pgt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __START_KERNEL_map &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; _PAGE_TABLE_NOENC
	.fill	PTI_USER_PGD_FILL,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
SYM_DATA_END(init_top_pgt)

SYM_DATA_START_PAGE_ALIGNED(level3_ident_pgt)
	.quad	level2_ident_pgt &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; __START_KERNEL_map &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; _KERNPG_TABLE_NOENC
	.fill	&lt;span style=&#34;color:#ae81ff&#34;&gt;511&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
SYM_DATA_END(level3_ident_pgt)
SYM_DATA_START_PAGE_ALIGNED(level2_ident_pgt)
	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Since I easily can, map the first 1G.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Don&amp;#39;t set NX because code runs from these pages.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * Note: This sets _PAGE_GLOBAL despite whether
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * the CPU supports it or it is enabled.  But,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 * the CPU should ignore the bit.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	 */&lt;/span&gt;
	PMDS(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, __PAGE_KERNEL_IDENT_LARGE_EXEC, PTRS_PER_PMD)
SYM_DATA_END(level2_ident_pgt)
&lt;span style=&#34;color:#75715e&#34;&gt;#else
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;SYM_DATA_START_PTI_ALIGNED(init_top_pgt)
	.fill	&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	.fill	PTI_USER_PGD_FILL,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
SYM_DATA_END(init_top_pgt)
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;缺页-1&#34;&gt;缺页&lt;/h3&gt;
&lt;p&gt;内核空间缺页同样会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/arch/x86/mm/fault.c#L1416&#34;&gt;handle_page_fault&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;5-总结&#34;&gt;5. 总结&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Linux虚拟地址空间采用分页机制，多级页表来减小页表占用空间。其原因就是越往后的页表项没用到的可以不用建。&lt;/li&gt;
&lt;li&gt;物理地址管理:
&lt;ol&gt;
&lt;li&gt;内核管理单元管理。主流采用NUMA模型，每个CPU有本地内存(节点)，本地内存根据用途再分区，每个区里就是物理页集合。&lt;/li&gt;
&lt;li&gt;物理页申请时:
&lt;ol&gt;
&lt;li&gt;大内存按页分配通过伙伴系统&lt;/li&gt;
&lt;li&gt;小内存通过slab分配器。那个结构体对应一个高速缓存，结构体申请释放都通过高速缓存，高速缓存里有很多slab，每个CPU又一个本地slab。slab里面就是很多待分配的结构体了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;物理内存紧张时会换出部分页面到磁盘上，也就是swap文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;地址映射
&lt;ol&gt;
&lt;li&gt;虚拟地址映射到物理地址&lt;/li&gt;
&lt;li&gt;虚拟地址映射到文件&lt;/li&gt;
&lt;li&gt;用到虚拟地址是会检查是否有对应物理地址没有的话，就缺页。
&lt;ol&gt;
&lt;li&gt;虚拟地址映射到物理地址的缺页——分配物理页。&lt;/li&gt;
&lt;li&gt;虚拟地址映射到文件的缺页——分配物理页，加载部分数据到物理页。&lt;/li&gt;
&lt;li&gt;物理地址映射到磁盘swap文件——分配物理页，将swap文件加载进来。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/6097773/&#34;&gt;Linux内核设计与实现第三版&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
  </item>
  
  <item>
    <title>backlog参数指的是什么？</title>
    <link>https://journey-c.github.io/what-is-the-backlog/</link>
    <pubDate>Sun, 31 Jan 2021 03:35:33 +0800</pubDate>
    
    <guid>https://journey-c.github.io/what-is-the-backlog/</guid>
    <description>&lt;h1 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h1&gt;
&lt;p&gt;服务端编程中涉及网络交互的服务几乎都会监听一个端口，然后等待客户端的请求，然后交互。在Linux中监听的&lt;a href=&#34;https://journey-c.github.io/what-is-system-call&#34;&gt;系统调用&lt;/a&gt;是listen。glibc的接口如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; backlog);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中参数sockfd为已经bind过端口和地址的fd，而backlog就是本文介绍的对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebsd.org/cgi/man.cgi?query=listen&amp;amp;apropos=0&amp;amp;sektion=0&amp;amp;manpath=FreeBSD+12.2-RELEASE+and+Ports&amp;amp;arch=default&amp;amp;format=html&#34;&gt;BSD手册中&lt;/a&gt;给它的定义是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;the maximum length the queue of pending connections may grow to.（由未处理连接构成的队列可能增长的最大长度）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话并没有解释backlog到底是处于SYN_RCVD状态的连接数还是处于ESTABLISHED状态的连接数。或者是处于两者皆可。&lt;/p&gt;
&lt;h1 id=&#34;linux中的backlog是如何实现&#34;&gt;Linux中的backlog是如何实现&lt;/h1&gt;
&lt;p&gt;下面我们从Linux实现来一步步揭开backlog的真面目。&lt;/p&gt;
&lt;p&gt;首先listen涉及与网卡的交互，这种涉及与硬件交互的操作Linux都是通过系统调用来实现的，既然是系统调用那么目标就明确了，从listen的系统调用入口开始看。&lt;/p&gt;
&lt;p&gt;listen函数的入口是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/socket.c#L1697&#34;&gt;SYSCALL_DEFINE2(listen, int, fd, int, backlog)&lt;/a&gt;参数正如glibc的listen接口，第一个参数是listen用的socket，第二个参数是backlog。这个函数没有做任何事情只是调用了&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/socket.c#L1676&#34;&gt;__sys_listen&lt;/a&gt;，&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/socket.c#L1676&#34;&gt;__sys_listen&lt;/a&gt;就是具体的listen实现了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先根据传入的fd调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/socket.c#L494&#34;&gt;sockfd_lookup_light&lt;/a&gt;找到对应的socket对象。&lt;/li&gt;
&lt;li&gt;将backlog和Linux配置中的&lt;code&gt;somaxconn(/proc/sys/net/core/somaxconn，默认128)&lt;/code&gt;比较，如果比somaxconn大，就用somaxconn替换。&lt;/li&gt;
&lt;li&gt;调用struct socket结构里面ops的listen函数，拿TCP来说，创建socket时type=SOCK_STREAM，protocol=IPPROTO_TCP的ops是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/af_inet.c#L1018&#34;&gt;inet_stream_ops&lt;/a&gt;，对应的listen函数是&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/af_inet.c#L196&#34;&gt;inet_listen&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/af_inet.c#L196&#34;&gt;inet_listen&lt;/a&gt;中判断一下socket状态还不是LISTEN的话，会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/inet_connection_sock.c#L911&#34;&gt;inet_csk_listen_start&lt;/a&gt;进入监听状态。另外还会将backlog值赋给socket的sk_max_ack_backlog参数，后边虽然调用一直带着backlog参数，实际没用了，socket中已经有了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/inet_connection_sock.c#L911&#34;&gt;inet_csk_listen_start&lt;/a&gt;中会创建一个新结构&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/net/inet_connection_sock.h#L80&#34;&gt;struct inet_connection_sock&lt;/a&gt;。这个结构体是维护连接状态的，里面包含了各种状态队列和超时以及拥塞控制的变量，其中我们关心的是icsk_accept_queue队列。内核会为每个socket维护两个队列，一个是三次握手完成处于ESTABLISHED状态的连接队列，另一个是三次握手进行中处于SYN_RCVD状态的连接队列，icsk_accept_queue就是前者。而用户调用accept实际是从icsk_accept_queue队列取出连接。&lt;/li&gt;
&lt;li&gt;初始化完之后，将 TCP 的状态设置为 TCP_LISTEN，再次调用 get_port 判断端口是否冲突。listen的逻辑就结束了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面已经介绍完listen的整个逻辑了，与咱们讨论的backlog有关的就是icsk_accept_queue队列。&lt;/p&gt;
&lt;p&gt;当内核收到网卡收到数据而触发的硬中断之后，并且数据传递到四层时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果是ipv4的tcp包会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/tcp_ipv4.c#L1915&#34;&gt;tcp_v4_rcv&lt;/a&gt;，处理完tcp头以及其他一些信息之后就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/tcp_ipv4.c#L1655&#34;&gt;tcp_v4_do_rcv&lt;/a&gt;，这个函数中分两种情况：处于ESTABLISHED状态的socket和未处于ESTABLISHED状态的socket。&lt;/li&gt;
&lt;li&gt;我们关心的是未处于ESTABLISHED状态的socket，会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/tcp_input.c#L6303&#34;&gt;tcp_rcv_state_process&lt;/a&gt;，这个函数中，当socket状态是LISTEN时（因为客户端的连接包是发给listen fd的），会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/net/inet_connection_sock.h#L80&#34;&gt;struct inet_connection_sock&lt;/a&gt;(listen系统调用时创建的)icsk_af_ops对象的conn_request接口，对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/tcp_input.c#L6743&#34;&gt;tcp_conn_request&lt;/a&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/net/ipv4/tcp_input.c#L6743&#34;&gt;tcp_conn_request&lt;/a&gt;会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/2c85ebc57b3e1817b6ce1a6b703928e113a90442/include/net/inet_connection_sock.h#L279&#34;&gt;inet_csk_reqsk_queue_is_full&lt;/a&gt;函数判断当前icsk_accept_queue长度是否超过sk_max_ack_backlog，如果超过就给客户端发一个RST包，客户端就当SYN包丢了，然后一直重试，第一次6s超时，然后24s，直到75s还没收到SYNACK就返回用户连接超时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/backlog.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;到目前为止得出结论，backlog是指&lt;strong&gt;用户&lt;/strong&gt;未处理的连接数量，例如backlog为1，有三个客户端在同时连接，第一个连接可以正常三次握手，第二个连接SYN包到来时内核只会回一个RST包，客户端就当SYN包丢了不停重试，当用户调用accept获取了第一个连接之后，第二个内核才会给第二个连接回复SYNACK继续握手。&lt;/p&gt;
&lt;p&gt;当然icsk_accept_queue最大长度不是绝对为backlog，而是backlog*模糊因子，下面是不同操作系统的backlog的设置。
&lt;img src=&#34;https://journey-c.github.io/images/backlog_1.jpeg&#34; alt=&#34;&#34;&gt;
图片转自《UNIX网络编程卷一》&lt;/p&gt;
</description>
  </item>
  
  <item>
    <title>为什么redis有多个数据库?</title>
    <link>https://journey-c.github.io/why-redis-has-multiple-databases/</link>
    <pubDate>Fri, 01 Jan 2021 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/why-redis-has-multiple-databases/</guid>
    <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Redis&#34;&gt;Redis&lt;/a&gt;是一个开源内存数据库，在今天几乎每个服务端程序员都会或多或少的使用到。但是很少有人会注意到一个Redis实例并不是只有一个数据库。&lt;/p&gt;
&lt;h1 id=&#34;设计&#34;&gt;设计&lt;/h1&gt;
&lt;p&gt;Redis实例使用&lt;a href=&#34;https://github.com/redis/redis/blob/25214bd7dc2f4c995d76020e95180eb4e6d51672/src/server.h#L1055&#34;&gt;redisServer&lt;/a&gt;结构体表示，结构体成员变量中的&lt;a href=&#34;https://github.com/redis/redis/blob/25214bd7dc2f4c995d76020e95180eb4e6d51672/src/server.h#L1068&#34;&gt;redisDb *db;&lt;/a&gt;是redisServer用来存储用户存入的键值。(默认有16个，通过配置文件中databases配置。每个客户端可以通过&lt;code&gt;SELECT index&lt;/code&gt;命令选择要访问的数据库)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/25214bd7dc2f4c995d76020e95180eb4e6d51672/src/server.h#L1068&#34;&gt;redisDb *db&lt;/a&gt;成员变量如下图最右边方框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/server_data_structure.png&#34; alt=&#34;server&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;h2 id=&#34;数据分块优化查询速度&#34;&gt;数据分块优化查询速度?&lt;/h2&gt;
&lt;p&gt;将数据分块添加多级索引，但是找了很多地方发现每个db都是独立的，而且客户端对单个数据库操作时不会访问其他数据库，并且其他客户端无关操作例如RDB、AOF持久化操作也不会将各db关联起来。&lt;/p&gt;
&lt;p&gt;并且redisdb中的dict本身就会在数据增多时对数据进行rehash，所以这个可能大概率不存在。&lt;/p&gt;
&lt;h2 id=&#34;对数据进行分类&#34;&gt;对数据进行分类?&lt;/h2&gt;
&lt;p&gt;redis本身是一个nosql数据库，想查询部分特征的数据本身操作会非常复杂，所以可能作者想用户可以根据需要将不同数据存入不同的db，但是db本身不支持自定义名称，只有编号，用户如果想将数据分类只能记住db的编号，每次访问数据时先用&lt;code&gt;SELECT index&lt;/code&gt;命令切换数据库然后再操作。这个可能性很高，但也说服力不强。&lt;/p&gt;
&lt;p&gt;因为实在没有想到其他的可能，所以我开始在网上找一下其他同行对此的见解，意外的搜到了作者一封邮件&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/mail.jpeg&#34; alt=&#34;mail&#34;&gt;&lt;/p&gt;
&lt;p&gt;原来作者最初的想法很多，但最后觉得很鸡肋，由于要保持向下兼容，所以就保留了这个功能。虽然实际生产中Redis实例很少会用到多个DB，但每个DB大概1m左右也不是十分耗费资源，所以无伤大雅。&lt;/p&gt;
</description>
  </item>
  
  <item>
    <title>Linux的I/O多路复用机制</title>
    <link>https://journey-c.github.io/io-multiplexing/</link>
    <pubDate>Sun, 20 Dec 2020 21:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/io-multiplexing/</guid>
    <description>&lt;h1 id=&#34;1-文件系统简介&#34;&gt;1. 文件系统简介&lt;/h1&gt;
&lt;p&gt;Linux平台万物皆文件，这句话实际是在夸Linux出色的虚拟文件系统，Linux将所有设备抽象为文件，与设备的数据交互抽象为文件的I/O。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/file.png&#34; alt=&#34;file&#34;&gt;&lt;/p&gt;
&lt;p&gt;Linux的虚拟文件系统大概分为四块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超级块&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;文件系统(ext3,ext4以及windows上的NTFS、FAT32、FAT16等)&lt;/li&gt;
&lt;li&gt;内核结构对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L1415&#34;&gt;super_block&lt;/a&gt;，对应操作对象&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L1921&#34;&gt;super_operations&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;索引节点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;操作系统以块为单位对磁盘操作(块是扇区大小的整数倍)。索引节点记录了文件在磁盘上所有的物理块(文件内容)，以及其他信心(更新时间，操作时间等)。&lt;/li&gt;
&lt;li&gt;内核结构对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L615&#34;&gt;inode&lt;/a&gt;，对应操作对象&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L1843&#34;&gt;inode_operations&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;目录项&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;可以理解为文件的路径(不是目录，Linux上目录也是文件)，进程操作文件时通过目录项找到实际文件。&lt;/li&gt;
&lt;li&gt;内核结构对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/dcache.h#L89&#34;&gt;dentry&lt;/a&gt;，对应操作对象&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/dcache.h#L135&#34;&gt;dentry_operations&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;文件&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;由进程打开的文件。&lt;/li&gt;
&lt;li&gt;内核结构对应&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L921&#34;&gt;file&lt;/a&gt;，对应操作对象&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L1801&#34;&gt;file_operations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常服务里例如socket，pipe等对象的read，write实际就是file对应的file_operations的操作，而本文讲解I/O相关事情。&lt;/p&gt;
&lt;h1 id=&#34;2-几种io模型&#34;&gt;2. 几种I/O模型&lt;/h1&gt;
&lt;h2 id=&#34;21-blocking-io&#34;&gt;2.1 Blocking I/O&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;传统的阻塞I/O，对一个文件描述符操作(FD)时，如果操作没有响应就会一直等待，直到内核有反馈。缺点就是单线程一次只能操作一个FD。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/io_block.jpeg&#34; alt=&#34;io_block&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;22-nonblocking-io&#34;&gt;2.2 Nonblocking I/O&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非阻塞I/O，对FD操作时，如果内核没反馈不会一直等待。非阻塞I/O会将所有FD放入FD set，一直轮询所有FD，直到有反馈的。缺点就是每次轮询时没有事件的FD也会被操作，浪费CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/io_noblock.jpeg&#34; alt=&#34;io_noblock&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-signal-driven-io&#34;&gt;2.3 Signal Driven I/O&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;信号驱动I/O的基本原理就是首先注册signal handler，当FD有事件到来时，内核会像进程发送信号，然后应用进程执行signal handler。缺点就是，编程难度高，信号处理起来复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/io_signal.jpeg&#34; alt=&#34;io_signal&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;24-asynchronous-io&#34;&gt;2.4 Asynchronous I/O&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;异步I/O和信号驱动I/O都是异步的，区别是:信号驱动I/O是FD满足条件时内核通知应用程序可以进行I/O了，而异步I/O是应用程序将I/O操作交给内核，当内核做完之后再通知应用程序I/O做完了。缺点是异步的并发量不好控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/io_async.jpeg&#34; alt=&#34;io_async&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;25-io-multiplexing&#34;&gt;2.5 I/O Multiplexing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多路复用实际不是一个技术而是一个理念，在I/O多路复用之前就有通讯线路的频分复用和时分复用，大概就是合理的安排每个单位使用资源的时间和位置，看起来所有单位一起在使用原本只能允许少量单位同时使用的资源。&lt;/li&gt;
&lt;li&gt;Linux的I/O多路复用机制就是本文要讲的内容了。I/O多路复用就是将所有的FD注册到内核，然后当哪个FD可用时，那个会通知应用程序可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/io_multi.jpeg&#34; alt=&#34;io_multi&#34;&gt;&lt;/p&gt;
&lt;p&gt;应用程序使用Linux提供的I/O多路复用机制都是通过&lt;a href=&#34;https://journey-c.github.io/2020/11/27/what-is-system-call&#34;&gt;系统调用&lt;/a&gt;使用的。最初Linux只提供了Select，在哪个服务端fd使用数量普遍不高的年代是够用的，后来随着网络的发展，1024个FD的限制已经不够用了，所以Linux提供了Poll，Poll只优化了存储结构，Select使用BitMap来存储FD，Poll使用数组来存储FD，不再限制数量，但是遍历时间复杂度还是$O(lg^N)$。终于在Linux 2.5.44版本，epoll闪亮登场，这是现在普遍使用的I/O多路复用机制。&lt;/p&gt;
&lt;h1 id=&#34;3-select&#34;&gt;3. Select&lt;/h1&gt;
&lt;h2 id=&#34;31-使用&#34;&gt;3.1 使用&lt;/h2&gt;
&lt;p&gt;Select是Linux最初提供的I/O多路复用函数。下面是libc库使用select的调用接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nfds, fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;readfds, fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;writefds, fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;exceptfds, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timeval &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;timeout);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FD_SET&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;set);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FD_CLR&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;set);
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;FD_ISSET&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;set);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FD_ZERO&lt;/span&gt;(fd_set &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;set);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Select总共三部分参数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传入FD(文件描述符)最大的+1&lt;/li&gt;
&lt;li&gt;传入的FD，分三类
&lt;ul&gt;
&lt;li&gt;1). 监听读&lt;/li&gt;
&lt;li&gt;2). 监听写&lt;/li&gt;
&lt;li&gt;3). 监听异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果一直没有满足条件的fd，最多等多久(超时时间)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;select用一个&lt;code&gt;__FD_SETSIZE&lt;/code&gt;位的BitMap表示输入参数，&lt;code&gt;__FD_SETSIZE&lt;/code&gt;默认为1024。因为没有1024位那么长的数，所以用一个数组表示，因为数组元素地址连续，所以实际就是一个1024位的数，比如第1位为1，表示这次输入有fd1(标准输出fd)。这个地方也限制了&lt;code&gt;select最多支持1024个fd，并且fd的号码不能大于等于1024。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/fd_set.png&#34; alt=&#34;fd_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;解释完fd_set的构造，FD_SET、FD_CLR等操作也就明白了，FD_SET(d, s)就是d是几号fd就将s的第几位置1，其他的类似。&lt;/p&gt;
&lt;h2 id=&#34;32-实现&#34;&gt;3.2 实现&lt;/h2&gt;
&lt;p&gt;Linux的select函数是通过系统调用的机制提供给用户，我们来一起看一下Select的流程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统调用函数入口在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L722&#34;&gt;SYSCALL_DEFINE5&lt;/a&gt;，可能是历史原因想保留这个接口，所以这个函数没做事情直接调用了&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L700&#34;&gt;kern_select&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Select传入的时间是一个相对时间，&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L700&#34;&gt;kern_select&lt;/a&gt;判断如果时间参数不为空的话，就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L273&#34;&gt;poll_select_set_timeout&lt;/a&gt;将相对时间转化为绝对时间(准确的几点几分几秒)，然后就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L621&#34;&gt;core_sys_select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L621&#34;&gt;core_sys_select&lt;/a&gt;主要的工作就是为Select工作分配资源空间。
&lt;ul&gt;
&lt;li&gt;获取&lt;a href=&#34;https://en.wikipedia.org/wiki/Read-copy-update&#34;&gt;rcu锁&lt;/a&gt;，check一下第一个参数n是不是比进程最大可打开文件描述符数还大，如果还大的话修正n为最大可打开文件描述符数。释放&lt;a href=&#34;https://en.wikipedia.org/wiki/Read-copy-update&#34;&gt;rcu锁&lt;/a&gt;，rcu实际就是延迟更新，读操作不需要获取锁，只需要标记一下还有用户在读。写操作时拷贝一份数据，更新副本，当所有没有读者读旧数据的时候再将副本数据更新到原始数据上。&lt;/li&gt;
&lt;li&gt;接下来就是给输入的三个变量fds.in, fds.out, fds.ex，保存结果的三个变量(fds.res_in, fds.res_out, fds.res_ex)分配存储空间，先从&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L630&#34;&gt;栈&lt;/a&gt;分配，栈空间不够时从&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L658&#34;&gt;堆&lt;/a&gt;分配。&lt;/li&gt;
&lt;li&gt;资源分配结束后就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L476&#34;&gt;do_select&lt;/a&gt;开始真正的检查每个FD是否可用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L476&#34;&gt;do_select&lt;/a&gt;是select的核心，流程如下:
&lt;ul&gt;
&lt;li&gt;首先调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L419&#34;&gt;max_select_fd&lt;/a&gt;找出传入FD的最大值+1，比较一下参数n是不是比最大FD+1还大，如果是就修正n为最大FD+1(&lt;code&gt;这里之所以总是将n修正为最大值+1，是因为do_select遍历范围是[0,n)&lt;/code&gt;)，顺便检查下，传入的FD是不是有已关闭或者未打开的，如果有就报错&lt;code&gt;EBADF&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;传入fd_set是long的数组，openfiles也是long的数组，因为之前n根据线程最大打开文件数修正过，所以通过(n/(long的位数))可以最高位可以比较的数组下表，然后fd_set数组的那一位根据(n % (long的位数))来去掉不满足条件的FD&lt;/li&gt;
&lt;li&gt;然后就从最高位开始fd_set和open_file做AND操作，第一个匹配的就是最大FD。&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://journey-c.github.io/images/max_select_fd.png&#34; alt=&#34;max_select_fd&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L121&#34;&gt;poll_initwait&lt;/a&gt;初始化&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L103&#34;&gt;poll_wqueues&lt;/a&gt;(维护select/poll任务的主要struct)，并且将&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L221&#34;&gt;__pollwait&lt;/a&gt;注册为&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L43&#34;&gt;poll_table&lt;/a&gt;的proc函数，file_operations-&amp;gt;poll会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L48&#34;&gt;poll_wait&lt;/a&gt;将此时所在线程(task)放入队列，poll_wait对调用__poll_wait，这个_poll_wait此时注册的函数。主要作用就是将任务放入队列，以及做一些其他任务。&lt;/li&gt;
&lt;li&gt;如果timeout不为空，调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L236&#34;&gt;poll_schedule_timeout&lt;/a&gt;设置超时时间。&lt;/li&gt;
&lt;li&gt;重复遍历所有fd_set:
&lt;ul&gt;
&lt;li&gt;这个循环是个死循环，跳出条件为:
&lt;ul&gt;
&lt;li&gt;超时时间到(如果设置了超时时间)。&lt;/li&gt;
&lt;li&gt;线程被唤醒。&lt;/li&gt;
&lt;li&gt;当前线程被信号唤醒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/file.h#L63&#34;&gt;fdget&lt;/a&gt;获取fd对应的file结构体。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L86&#34;&gt;vfs_poll&lt;/a&gt;，获取file的事件mask，如果有in，out，ex就放入对应结果的fd_set中。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L86&#34;&gt;vfs_poll&lt;/a&gt;最终会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/fs.h#L1801&#34;&gt;file_operations&lt;/a&gt;的poll函数获取FD的事件状态mask，vfs_poll会调用file_operations-&amp;gt;poll函数检查FD的事件，如果没有就调用poll_wait将线程放入等待队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/file.h#L43&#34;&gt;fdput&lt;/a&gt;释放fd对应file结构体。&lt;/li&gt;
&lt;li&gt;如果本次遍历一个有事件的FD也没有就调用cond_resched出让CPU，并且把线程状态设为INTERRUPTIBLE(睡眠可打断状态)，休眠直到被唤醒。&lt;/li&gt;
&lt;li&gt;等到有&lt;a href=&#34;#event_callback&#34;&gt;事件回调&lt;/a&gt;，就会重新遍历FD集合这次肯定有事件了，如果超时或者被信号唤醒也有相应操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L476&#34;&gt;do_select&lt;/a&gt;将可用FD返回之后，调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L688&#34;&gt;set_fd_set&lt;/a&gt;拷贝回用户空间。&lt;/li&gt;
&lt;li&gt;如果传入参数的BitsMap一开始是分配在堆上的就释放调。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L297&#34;&gt;poll_select_finish&lt;/a&gt;将剩余时间拷贝回用户空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;33-小结&#34;&gt;3.3 小结&lt;/h2&gt;
&lt;p&gt;select的流程简单来讲就是，将FD通过BitsMap传入内核，轮询所有的FD通过调用file-&amp;gt;poll函数查询是否有对应事件，没有就将task加入FD对应file的待唤醒队列，等待事件来临被唤醒。(例如网卡来数据了)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/select_process.png&#34; alt=&#34;select_process&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;select使用BitsMap来传入和接受FD，每次调用都会在用户空间和内核空间之间拷贝。&lt;/li&gt;
&lt;li&gt;select的BitsMap限制只能监听FD 0~1023。&lt;/li&gt;
&lt;li&gt;轮询的方式监听所有FD，$O(n)$的复杂度&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4-poll&#34;&gt;4. Poll&lt;/h1&gt;
&lt;h2 id=&#34;41-使用&#34;&gt;4.1 使用&lt;/h2&gt;
&lt;p&gt;随着互联网的发展Select 1024个FD的限制已经不满足众多服务了，于是出现了Poll，不再用BitsMap来传入FD，取而代之用动态数组传入FD，但获取事件状态的方式还是轮询。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poll&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pollfd &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fds, nfds_t nfds, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout);
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pollfd {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;   fd;         &lt;span style=&#34;color:#75715e&#34;&gt;/* file descriptor */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; events;     &lt;span style=&#34;color:#75715e&#34;&gt;/* requested events */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; revents;    &lt;span style=&#34;color:#75715e&#34;&gt;/* returned events */&lt;/span&gt;
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;1.fds: 传入fd集合，由pollfd构成
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;fd: 文件描述符&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;events: 监听事件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;revents: 返回FD是因为什么事件返回的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2.nfds: fds的长度&lt;/li&gt;
&lt;li&gt;3.timeout: 超时时间，单位毫秒&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;42-实现&#34;&gt;4.2 实现&lt;/h2&gt;
&lt;p&gt;Poll和Select的入口都在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c&#34;&gt;fs/select.c&lt;/a&gt;中，下面我们来看一下Poll内核实现的流程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Poll的入口在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L1057&#34;&gt;SYSCALL_DEFINE3&lt;/a&gt;，&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L1057&#34;&gt;SYSCALL_DEFINE3&lt;/a&gt;的主要工作是将timeout由相对时间转化为绝对时间。然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L970&#34;&gt;do_sys_poll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L970&#34;&gt;do_sys_poll&lt;/a&gt;流程:
&lt;ul&gt;
&lt;li&gt;检查nfds是否超过进程最大可打开文件数，如果是就报错-EINVAL。&lt;/li&gt;
&lt;li&gt;给输入参数分配空间再从用户空间拷贝过来，先试图在栈上分配，如果不够再从堆上分配。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L121&#34;&gt;poll_initwait&lt;/a&gt;初始化poll_wqueues(和select一样)，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L881&#34;&gt;do_poll&lt;/a&gt;，do_poll主要流程为:
&lt;ul&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L75&#34;&gt;select_estimate_accuracy&lt;/a&gt;设置过期时间。&lt;/li&gt;
&lt;li&gt;然后就轮训所有的FD，调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L851&#34;&gt;do_pollfd&lt;/a&gt;检查FD的事件。do_pollfd也是调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L86&#34;&gt;vfs_poll&lt;/a&gt;来检测FD事件的，如果没有就将线程放入对应FD的等待队列等待被激活，自己休眠。(和select一样)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/select.c#L138&#34;&gt;poll_freewait&lt;/a&gt;释放刚刚初始化的poll_wqueues。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;__put_user&lt;/code&gt;将结果拷贝回用户空间。&lt;/li&gt;
&lt;li&gt;如果最开始参数是在堆上分配的，就释放内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;43-小结&#34;&gt;4.3 小结&lt;/h2&gt;
&lt;p&gt;poll和select差不多，区别就是BitsMap换成了链表，FD数量只受poll可用内核内存大小限制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/poll_process.png&#34; alt=&#34;poll_process&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;poll监听FD数量不再有限制(除线程本身限制外)，但是每次调用poll还是要将FD集合拷贝到内核态，完成后再拷贝回来。&lt;/li&gt;
&lt;li&gt;监听所有FD的方式还是轮训，$O(n)$的复杂度。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-epoll&#34;&gt;5. Epoll&lt;/h1&gt;
&lt;h2 id=&#34;51-使用&#34;&gt;5.1 使用&lt;/h2&gt;
&lt;p&gt;正因为select和poll有着各自的缺点，所以linux 2.5.44版本提供了新的I/O复用机制Epoll，在后续的版本中继续做了很多优化。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; epoll_event {
    uint32_t     events;      &lt;span style=&#34;color:#75715e&#34;&gt;/* Epoll events */&lt;/span&gt;
    epoll_data_t data;        &lt;span style=&#34;color:#75715e&#34;&gt;/* User data variable */&lt;/span&gt;
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; epoll_data {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;          fd;
    uint32_t     u32;
    uint64_t     u64;
} epoll_data_t;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 创建用于epoll工作的FD
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_create&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size);

&lt;span style=&#34;color:#75715e&#34;&gt;// 对事件操作：增、删等
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_ctl&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; op, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; epoll_event &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;event); 

&lt;span style=&#34;color:#75715e&#34;&gt;// 等待事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_wait&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; epoll_event &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;events, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxevents, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout);  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;epoll_create&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;size: 监听fd的数量，Linux 2.6.8就去掉了这个参数，因为要兼容，所以留着这个参数，但实际内核没用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;epoll_ctl&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epfd: epoll对应的FD&lt;/li&gt;
&lt;li&gt;op: 操作码，增(EPOLL_CTL_ADD),删(EPOLL_CTL_DEL),改(EPOLL_CTL_MOD)&lt;/li&gt;
&lt;li&gt;fd: 对epoll操作的源FD，例如要添加删除修改的FD&lt;/li&gt;
&lt;li&gt;event: 要监听的事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;epoll_wait&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epfd: epoll对应的FD&lt;/li&gt;
&lt;li&gt;events: 要等待的事件数组&lt;/li&gt;
&lt;li&gt;maxevents: 监听事件数量&lt;/li&gt;
&lt;li&gt;timeout: 超时时间，单位毫秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-实现&#34;&gt;5.2 实现&lt;/h2&gt;
&lt;h3 id=&#34;521-epoll_create&#34;&gt;5.2.1 epoll_create&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;epoll_create的入口在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2088&#34;&gt;SYSCALL_DEFINE1&lt;/a&gt;，这个函数只是简单的检查了一下size是否为0，epoll_create的size参数随便填只要大于0即可，不使用的。然后调用了&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2040&#34;&gt;do_epoll_create&lt;/a&gt;对epoll_create操作统一处理。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2040&#34;&gt;do_epoll_create&lt;/a&gt;流程如下:
&lt;ul&gt;
&lt;li&gt;检查一下flags除了EPOLL_CLOEXEC，还有没有其他的flag&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1006&#34;&gt;ep_alloc&lt;/a&gt;申请一个&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L181&#34;&gt;eventpoll&lt;/a&gt;结构，这是存储epoll所有数据的数据结构。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/file.c#L561&#34;&gt;get_unused_fd_flags&lt;/a&gt;根据flags申请一个本进程最小未使用的fd。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/anon_inodes.c#L74&#34;&gt;anon_inode_getfile&lt;/a&gt;创建一个对应匿名inode的file，file的私有数据存的是eventpoll结构体。inode在VFS中对应一个文件，记录了此文件在磁盘那些块以及文件各种信息，匿名inode就是将此文件的dentry(目录项)删掉了，在文件系统中一般是通过dentry(目录项)来查找使用文件，这样其他进程就用不了这个文件。相当于创建一个临时文件。&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://journey-c.github.io/images/anonymous_inode.png&#34; alt=&#34;anonymous_inode&#34;&gt;&lt;/li&gt;
&lt;li&gt;现在file(由进程打开的文件)有了，fd有了，把file和fd的关系放入本进程的open_files中，就相当于本进程打开了这个文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;522-epoll_ctl&#34;&gt;5.2.2 epoll_ctl&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;epoll_ctl的入口在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2272&#34;&gt;SYSCALL_DEFINE4&lt;/a&gt;，首先根据op选择要不要从用户空间拷贝参数(只要不是DEL都需要拷贝)，之后就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2108&#34;&gt;do_epoll_ctl&lt;/a&gt;做主要的工作了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2108&#34;&gt;do_epoll_ctl&lt;/a&gt;主要流程如下:
&lt;ul&gt;
&lt;li&gt;参数获取:
&lt;ul&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/file.h#L63&#34;&gt;fdget&lt;/a&gt;根据epfd获得epoll对应的file(epoll_create时创建的)，根据参数传入的fd获取对应的file。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数 :
&lt;ul&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L81&#34;&gt;file_can_poll&lt;/a&gt;判断该文件支不支持poll函数，实际就是判断该文件对应的file_operation的poll函数为不为空。&lt;/li&gt;
&lt;li&gt;判断系统支不支持autosleep功能，如果支持且用户也传入了EPOLLWAKEUP标志，就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/uapi/linux/eventpoll.h#L83&#34;&gt;ep_take_care_of_epollwakeup&lt;/a&gt;将标志加到事件中，否则就将EPOLLWAKEUP事件丢弃。&lt;/li&gt;
&lt;li&gt;check一下要操作的fd是不是epfd(操作自己epoll的fd)和epfd是不是一个epoll fd。&lt;/li&gt;
&lt;li&gt;EPOLLEXCLUSIVE(since Linux 3.5)是一个FD被多个epoll监听时，当这个FD事件来临只有一个epoll会被唤起(避免惊群效应)。而epoll只允许add的时传入不允许mod时传入，这里就是check一下这种情况。&lt;/li&gt;
&lt;li&gt;处理一种Epoll A包含Epoll B的FD，Epoll B也包含Epoll A的FD的情况，这时候如果其中一个FD有了事件，那么两个Epoll会循环被唤醒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接下来就是核心操作:
&lt;ul&gt;
&lt;li&gt;根据file地址和fd大小 调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1041&#34;&gt;ep_find&lt;/a&gt; 查找传入fd是否在eventpoll结构体中的rbtree(存储所有监听的fd)已存在。rbtree的key就是&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L107&#34;&gt;epoll_filefd&lt;/a&gt;，比较规则，先比较file的地址，相同的话在比较fd的大小。&lt;/li&gt;
&lt;li&gt;如果是ADD就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1490&#34;&gt;ep_insert&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;当前用用户的epoll_watch和&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1502&#34;&gt;max_user_watches&lt;/a&gt;检查是否还有可用空间，内核给每个用户的epoll可以用空间限制为syscall可使用空间的$1/25$。&lt;/li&gt;
&lt;li&gt;从缓存中创建一个新的epitem(&lt;a href=&#34;https://journey-c.github.io/2020/10/22/red-black-tree&#34;&gt;红黑树&lt;/a&gt;的value)。&lt;/li&gt;
&lt;li&gt;初始化rdllink(满足事件链表)，fllink(链接fd对应的file链表)，pwqlist(poll等待队列)。&lt;/li&gt;
&lt;li&gt;初始化epitem的参数，调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L322&#34;&gt;ep_set_ffd&lt;/a&gt;根据file，fd生成&lt;a href=&#34;https://journey-c.github.io/2020/10/22/red-black-tree&#34;&gt;红黑树&lt;/a&gt;的key(struct epoll_filefd)等。&lt;/li&gt;
&lt;li&gt;向插入fd对应file的epoll事件链表(f_ep_links)中新增事件。&lt;/li&gt;
&lt;li&gt;将epitem插入&lt;a href=&#34;https://journey-c.github.io/2020/10/22/red-black-tree&#34;&gt;红黑树&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L75&#34;&gt;init_poll_funcptr&lt;/a&gt;注册poll回调函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1309&#34;&gt;ep_ptable_queue_proc&lt;/a&gt;。在前select一节有描述。这里回调函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1309&#34;&gt;ep_ptable_queue_proc&lt;/a&gt;除了将task放入FD对应file的等待队列之外，事件来临还会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1204&#34;&gt;ep_poll_callback&lt;/a&gt;函数。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L877&#34;&gt;ep_item_poll&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;如果不是epoll的FD就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L86&#34;&gt;vfs_poll&lt;/a&gt;-&amp;gt;file_operations.poll查询FD事件如果有就返回，没有就插入等待队列。&lt;/li&gt;
&lt;li&gt;如果是epoll的FD，就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L677&#34;&gt;ep_scan_ready_list&lt;/a&gt;将epoll的rdllist(已就绪的FD)传入用户空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有事件的话并且之前不在就绪链表rdllist，就放入就绪链表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是DEL就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L767&#34;&gt;ep_remove&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L618&#34;&gt;ep_unregister_pollwait&lt;/a&gt;注销epoll_add时注册的file对应的poll_wait函数。&lt;/li&gt;
&lt;li&gt;从各链表中删除。&lt;/li&gt;
&lt;li&gt;从&lt;a href=&#34;https://journey-c.github.io/2020/10/22/red-black-tree&#34;&gt;红黑树&lt;/a&gt;中删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是MOD就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1622&#34;&gt;ep_modify&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;修改FD事件。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L877&#34;&gt;ep_item_poll&lt;/a&gt;查询是否修改后有事件，有的话就放入rdllist就绪链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;523-epoll_wait&#34;&gt;5.2.3 epoll_wait&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;epoll_wait入口在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2330&#34;&gt;SYSCALL_DEFINE4&lt;/a&gt;，之后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2288&#34;&gt;do_epoll_wait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L2288&#34;&gt;do_epoll_wait&lt;/a&gt;主要流程:
&lt;ul&gt;
&lt;li&gt;检查参数，参数是否正确，返回结果地址是否正确，要操作的epollfd是否正确。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1818&#34;&gt;ep_poll&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;如果有timeout不为零，就将时间转化为绝对时间，如果为0就检查一下当前就绪队列是否为空，如果有事件直接返回，没有事件就返回空。&lt;/li&gt;
&lt;li&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L375&#34;&gt;ep_events_available&lt;/a&gt;检查当前有无就绪FD，有就直接返回，或者当前file_operations-&amp;gt;poll函数正忙就等等，看工作完有没有。&lt;/li&gt;
&lt;li&gt;如果没有就进入死循环，和select一样，将task设为TASK_INTERRUPTIBLE，等待被唤醒或被信号唤醒或超时。&lt;/li&gt;
&lt;li&gt;直到被唤醒依然调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L375&#34;&gt;ep_events_available&lt;/a&gt;检查有没有就绪FD，有的话就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1778&#34;&gt;ep_send_events&lt;/a&gt;将结果传回用户空间。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1778&#34;&gt;ep_send_events&lt;/a&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L677&#34;&gt;ep_scan_ready_list&lt;/a&gt;扫描rdllist链表并且调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/fs/eventpoll.c#L1694&#34;&gt;ep_send_events_proc&lt;/a&gt;将事件发回用户空间，如果FD的使用的epoll的模式为EPOLLET(水平触发)发送完之后重新被加入rdllist链表，等待下次epoll_wait时，如果fd在rdllink中且已经不可读了就不再加入rdllist中了。&lt;/li&gt;
&lt;li&gt;发送会用户空间之后，将因为rdllist发送时加锁而没加入的事件(放入了ovflist)加入rdllist。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;53-小结&#34;&gt;5.3 小结&lt;/h2&gt;
&lt;p&gt;select和poll的模式都是，一次将参数拷贝到内核空间，等有结果了再一次拷贝出去，类似无状态服务。而epoll则只是在epoll_ctl(ADD)时将数据拷入，epoll_wait时在将数据拷出，多次复用没有其他数据拷贝，大大节省了数据拷贝。epoll采用&lt;a href=&#34;https://journey-c.github.io/2020/10/22/red-black-tree&#34;&gt;红黑树&lt;/a&gt;存储所有被监听的FD是的查找删除时间复杂度由$O(N)$缩短为$O(log^N)$。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/epoll_process.png&#34; alt=&#34;epoll_process&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;epoll_create创建eventpoll结构。&lt;/li&gt;
&lt;li&gt;epoll_ctl:
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;ADD检查FD事件，有就加入rdllist队列，没有就将task放入FD对应file的待唤醒列表，将FD加入&lt;a href=&#34;https://journey-c.github.io/2020/10/22/red-black-tree&#34;&gt;红黑树&lt;/a&gt;维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;DEL从eventpoll的各个资源中删除。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;MOD修改事件，并再次检查FD事件，有就加入rdllist队列，没有就将task放入FD对应file的待唤醒列表并且注册事件回调函数——有事件来临就加入rdllist。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;epoll_wait检查rdllist有没有已经就绪的FD，没有就等待时间来临唤醒，有事件就返回用户空间，并且清空rdllist链表，如果FD是EPOLLLET模式的就重新加入rdllist链表中，等待下次epoll_wait看情况清理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;6-selectpollepoll对比&#34;&gt;6. select、poll、epoll对比&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;监听FD数量&lt;/th&gt;
&lt;th&gt;数据拷贝&lt;/th&gt;
&lt;th&gt;操作复杂度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;select&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;每次操作从用户空间拷入内核空间然后拷出&lt;/td&gt;
&lt;td&gt;$O(N)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;poll&lt;/td&gt;
&lt;td&gt;内核限制sys内存大小&lt;/td&gt;
&lt;td&gt;每次操作从用户空间拷入内核空间然后拷出&lt;/td&gt;
&lt;td&gt;$O(N)$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;epoll&lt;/td&gt;
&lt;td&gt;内核限制sys内存大小&lt;/td&gt;
&lt;td&gt;ADD时拷贝一次，epoll_wait时利用MMAP和用户共享空间，直接拷贝数据到用户控件&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span id = &#34;event_callback&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;7-事件回调&#34;&gt;7. 事件回调&lt;/h1&gt;
&lt;p&gt;select/poll/epoll最后都会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L86&#34;&gt;vfs_poll&lt;/a&gt;，检查FD是否有相应事件。
&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/poll.h#L86&#34;&gt;vfs_poll&lt;/a&gt;的核心流程就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先检查FD对应的file目前是否已有事件，如果没有则将当前task(linux中线程进程都是task)加入到file的wait_queue，然后就让出CPU，等待被激活。&lt;/li&gt;
&lt;li&gt;当file对应的设备有事件来临时，会激活file的wait_queue中所有等待的task(将task从等待态变为运行态，重新加入到调度列表中)。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;CPU1                CPU2
sys_select          receive packet
...                 ...
__add_wait_queue    update tp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rcv_nxt
...                 ...
tp&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;rcv_nxt check   sock_def_readable
...                 {
schedule               rcu_read_lock();
                       wq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rcu_dereference(sk&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;sk_wq);
                       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wq &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; waitqueue_active(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;wq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;wait))
                           wake_up_interruptible(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;wq&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;wait)
                       ...
                    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;71-流程&#34;&gt;7.1 流程&lt;/h2&gt;
&lt;p&gt;下面我们以socket为例，分析一下事件是如何回调的。&lt;/p&gt;
&lt;p&gt;设备驱动层主要做的事情是，网卡作为一个硬件，当收到网络包的时候如何通知操作系统。没错，是硬件中断，硬件和操作系统打交道的方式基本都是硬件中断。而网卡与内核交互采用了硬件中断+下半部（主要是拷贝数据太耗时，放在中断处理程序中不妥）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备给中断控制器引脚发送信号。&lt;/li&gt;
&lt;li&gt;中断控制器收到后给CPU发送信号。&lt;/li&gt;
&lt;li&gt;CPU收到信号后产生中断，根据中断号在中断向量表中执行内核实现的中断处理程序。(执行程序实际就是已经与内核通讯了)
&lt;img src=&#34;https://journey-c.github.io/images/event_driver.png&#34; alt=&#34;event_driver&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以intel的ixgb网卡为例。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网卡程序初始化时调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L116&#34;&gt;ixgb_init_module&lt;/a&gt;注册驱动&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L92&#34;&gt;ixgb_driver&lt;/a&gt;，并且调用驱动的probe函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L359&#34;&gt;ixgb_probe&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L359&#34;&gt;ixgb_probe&lt;/a&gt;中与本文相关的有:
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;创建一个&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/linux/netdevice.h#L1863&#34;&gt;struct net_device&lt;/a&gt;表示网络设备。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;设置网卡的相关操作&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L331&#34;&gt;ixgb_netdev_ops&lt;/a&gt;，其中ndo_open函数是网卡激活时执行的函数，对应ixgb网卡的&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L593&#34;&gt;ixgb_open&lt;/a&gt;函数。调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L6600&#34;&gt;netif_napi_add&lt;/a&gt;为这个网络设备注册一个轮询 poll 函数 &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1752&#34;&gt;ixgb_clean&lt;/a&gt;，将来一旦出现网络包的时候，就是要通过它来轮询了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L593&#34;&gt;ixgb_open&lt;/a&gt;中调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L171&#34;&gt;ixgb_up&lt;/a&gt;注册硬件中断，类型为IRQF_SHARED，中断设备名字ixgb，并且中断处理程序为&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1721&#34;&gt;ixgb_intr&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当网卡有数据来临时，网卡给中断控制器发送信号，中断控制器给CPU发送信号，CPU执行对应的中断处理函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1721&#34;&gt;ixgb_intr&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1721&#34;&gt;ixgb_intr&lt;/a&gt;中调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L6281&#34;&gt;__napi_schedule&lt;/a&gt;和&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L4240&#34;&gt;___napi_schedule&lt;/a&gt;将设备标记，触发软件中断NET_RX_SOFTIRQ，软件中断号对应的中断处理函数为&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L6735&#34;&gt;net_rx_action&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L6735&#34;&gt;net_rx_action&lt;/a&gt;调用napi_poll轮询所有的网络设备，napi_poll调用网卡注册是注册的poll函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1752&#34;&gt;ixgb_clean&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1752&#34;&gt;ixgb_clean&lt;/a&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/drivers/net/ethernet/intel/ixgb/ixgb_main.c#L1929&#34;&gt;ixgb_clean_rx_irq&lt;/a&gt;读取数据并将数据存放到struct sk_buff中，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L5553&#34;&gt;netif_receive_skb&lt;/a&gt;处理二层的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L5553&#34;&gt;netif_receive_skb&lt;/a&gt;开始处理二层的数据，调用链&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L5478&#34;&gt;netif_receive_skb_internal&lt;/a&gt;-&amp;gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L5380&#34;&gt;__netif_receive_skb&lt;/a&gt;-&amp;gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L5079&#34;&gt;__netif_receive_skb_core&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/dev.c#L5079&#34;&gt;__netif_receive_skb_core&lt;/a&gt;中根据协议头将数据交给三层对应的协议栈。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在就开始处理三层的数据里，假如当前的包是一个IPv4的包，数据就会流向&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/ip_input.c#L530&#34;&gt;ip_rcv&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/ip_input.c#L530&#34;&gt;ip_rcv&lt;/a&gt;中得到IP的报头，然后调用NF_HOOK判断路由，不是本机的包就发走，是本机的包就调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/ip_input.c#L414&#34;&gt;ip_rcv_finish&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/ip_input.c#L414&#34;&gt;ip_rcv_finish&lt;/a&gt;调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/ip_input.c#L314&#34;&gt;ip_rcv_finish_core&lt;/a&gt;然后根据IP报头中的协议把数据交给四层的协议栈。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;千辛万苦数据终于来到了四层，假如当前是一个TCP包的话。会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/tcp_ipv4.c#L1886&#34;&gt;tcp_v4_rcv&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/tcp_ipv4.c#L1886&#34;&gt;tcp_v4_rcv&lt;/a&gt;根据IP以及tcp报头内容在&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/tcp_ipv4.c#L91&#34;&gt;tcp_hashinfo&lt;/a&gt; (&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/include/net/inet_hashtables.h#L124&#34;&gt;inet_hashinfo&lt;/a&gt;)找到对应socket&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;接下来根据socket的不同状态进行处理，socket根据情况进入三个不同队列，这一步主要是先将包找个地方放一下，赶紧离开中断状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;backlog 当前没有用户在读数据，就将socket 放入backlog中，离开软件中断状态(到之前为止一直在软件中断中)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;prequeue 如果当前有用户在读数据，且一个窗口的包还没收集完就放入prequeue&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;sk_receive_queue 当一个窗口的包准确收集完了，就放入sk_receive_queue中，用户可读取了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;当一个窗口的包准确收集完之后，就会调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/tcp_input.c#L4849&#34;&gt;tcp_data_queue&lt;/a&gt;将数据放入sk_receive_queue，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/tcp_input.c#L4837&#34;&gt;tcp_data_ready&lt;/a&gt;，在调用sock的sk_data_ready函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/sock.c#L2901&#34;&gt;sock_def_readable&lt;/a&gt;，&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/core/sock.c#L2901&#34;&gt;sock_def_readable&lt;/a&gt;会唤醒之前因为调用file_operations.poll为阻塞的进程或线程。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这就到了咱们最关心的问题了，&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/net/ipv4/tcp_input.c#L4837&#34;&gt;tcp_data_ready&lt;/a&gt;唤醒的是哪些task。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;72-流程图&#34;&gt;7.2 流程图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/net_callback.png&#34; alt=&#34;net_callback&#34;&gt;&lt;/p&gt;
</description>
  </item>
  
  <item>
    <title>系统调用</title>
    <link>https://journey-c.github.io/what-is-system-call/</link>
    <pubDate>Fri, 27 Nov 2020 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/what-is-system-call/</guid>
    <description>&lt;h1 id=&#34;1-简介&#34;&gt;1 .简介&lt;/h1&gt;
&lt;p&gt;系统调用就是操作系统提供给用户态应用与硬件交互的一组接口。在用户空间和硬件之间添加一个中间层(系统调用)主要的作用有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为用户空间提供抽象接口，用户不需要关心硬件种类介质等。&lt;/li&gt;
&lt;li&gt;保障系统的稳定和安全，避免用户错误的使用硬件危害系统或者窃取其他进程的资源。&lt;/li&gt;
&lt;li&gt;由于Linux进程都是运行在虚拟系统中，如果操作系统对用户访问硬件一无所知，就几乎无法实现多任务和虚拟内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/unix_arch.jpeg&#34; alt=&#34;unix_arch&#34;&gt;&lt;/p&gt;
&lt;div&gt;
	&lt;center&gt;图片来源&lt;a href=&#34;https://www.amazon.com/Advanced-Programming-UNIX-Environment-3rd/dp/0321637739&#34;&gt;《Advanced Programming in the UNIX Environment, 3rd Edition》&lt;/a&gt;&lt;/center&gt;
&lt;/div&gt;
&lt;h1 id=&#34;2-三种使用系统调用方式&#34;&gt;2. 三种使用系统调用方式&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/syscall_method.png&#34; alt=&#34;syscall_method&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;21-软件中断&#34;&gt;2.1 软件中断&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/interrupt.png&#34; alt=&#34;interrupt&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有外界打扰的情况下处理器会一直执行给定指令，中断就是打断处理器的执行并且告诉他先执行另一段指令，执行完毕再接着执行中断前的指令。从中断指令发出的对象可以分为硬件中断和软件中断。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件中断就是硬件通过传输电信号到中断控制器的输入引脚，中断控制器收到电信号之后会给处理器发送一个电信号，处理器一经检测到电信号之后就中断当前工作转而处理中断。之后会通知操作系统已经产生中断，进而操作系统可以处理这个中断了。&lt;/li&gt;
&lt;li&gt;软件中断就是处理器执行特定指令时触发的中断，之后也会通知操作系统。&lt;/li&gt;
&lt;li&gt;除了系统调用，还有中断下半部tasklet也是用软件中断实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在x86的机器上可以使用$INT$指令触发软件中断，Linux早期的时候就是使用软件中断来处理系统调用，中断号为128。
软件中断执行系统调用的流程为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户将中断号放入$eax$寄存器，前六个参数按顺序放入$ebx$、$ecx$、$edx$、$esi$、$edi$、$ebp$寄存器，六个以上的情况，需要把所有参数放在用户空间的一段连续内存中(类似用struct传参)，然后将指向该内存区域的指针放入$ebx$中。&lt;/li&gt;
&lt;li&gt;执行$int$ 0x80指令，处理器在中断向量表(&lt;a href=&#34;https://en.wikipedia.org/wiki/Interrupt_descriptor_table&#34;&gt;IDT&lt;/a&gt;)中查找对应的中端处理程序，执行中断处理程序(操作系统由ring3进入ring0)&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_32.S#L1052&#34;&gt;entry_INT80_32&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;a. 调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_32.S#L1056&#34;&gt;SAVE_ALL&lt;/a&gt;将当前上下文保存到内核栈，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L84&#34;&gt;do_int80_syscall_32&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;b. &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L84&#34;&gt;do_int80_syscall_32&lt;/a&gt; 从用户空间进入内核空间然后调用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L72&#34;&gt;do_syscall_32_irqs_on&lt;/a&gt;，退出内核空间返回用户空间。&lt;/li&gt;
&lt;li&gt;c. &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L72&#34;&gt;do_syscall_32_irqs_on&lt;/a&gt; 检查系统调用号，从系统调用表&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/syscall_32.c#L18&#34;&gt;ia32_sys_call_table&lt;/a&gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/syscalls/syscall_32.tbl&#34;&gt;syscall_32.tbl&lt;/a&gt;中找出对应函数，并且将参数传给对应系统调用函数，唤起软件中断，将返回值放入$eax$寄存器。&lt;/li&gt;
&lt;li&gt;d. 从内核栈恢复上下文。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/interrupt_call.png&#34; alt=&#34;interrupt_call&#34;&gt;
下面就是一个通过软件中断调用write系统调用的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;global _start

section .text
_start:
    mov eax,4      ; system call number
    mov ebx,1      ; args 1: fd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;STDOUT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    mov ecx,msg    ; args 2: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
    mov edx,msglen ; args 3: len&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    int 0x80       ; soft interrupt
    mov eax,1      ; syscall exit number
    mov ebx,0      ; args 1: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    int 0x80       ; soft interrupt

section .rodata
    msg: db &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    msglen: equ $ - msg 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nasm -g -f elf64 -o sys_call.o sys_call.s
ld -o sys_call sys_call.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-汇编指令&#34;&gt;2.2 汇编指令&lt;/h2&gt;
&lt;p&gt;由于中断实现的系统调用在个别处理器上表现非常差，Linux在较新版本上使用了intel和amd上实现的快速系统调用指令syscall/sysret(64)和sysenter/sysexit(32)。这也是目前最常用的系统调用方式。
&lt;img src=&#34;https://journey-c.github.io/images/asm.png&#34; alt=&#34;asm&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体流程为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cpu初始化&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/kernel/cpu/common.c#L1869&#34;&gt;cpu_init&lt;/a&gt; 调用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/kernel/cpu/common.c#L1702&#34;&gt;syscall_init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/kernel/cpu/common.c#L1702&#34;&gt;syscall_init&lt;/a&gt; 将系统调用处理函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_64.S#L95&#34;&gt;entry_SYSCALL_64&lt;/a&gt;和&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_32.S#L903&#34;&gt;entry_SYSENTER_32&lt;/a&gt;注册到&lt;a href=&#34;https://en.wikipedia.org/wiki/Model-specific_register&#34;&gt;MSR&lt;/a&gt;寄存器，&lt;a href=&#34;https://en.wikipedia.org/wiki/Model-specific_register&#34;&gt;MSR&lt;/a&gt;寄存器是用于控制CPU运行、功能开关、调试、跟踪程序执行、监测CPU性能等方面的寄存器。&lt;/li&gt;
&lt;li&gt;触发系统调用后，它会在&lt;a href=&#34;https://en.wikipedia.org/wiki/Model-specific_register&#34;&gt;MSR&lt;/a&gt;中读取需要执行的函数然后执行。&lt;/li&gt;
&lt;li&gt;剩余流程和软件中断方式差不多。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/asm_call.png&#34; alt=&#34;asm_call&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-vdos&#34;&gt;2.3 vDOS&lt;/h2&gt;
&lt;p&gt;Linux平台的用户使用系统调用的方式大多是通过&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;, 由于&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;库要兼容BSD，SysV Windows等平台，所以每当Linux新增系统调用时，&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;库都要间隔一段时间才会支持。并且有的用户升级Linux时并不会顺带升级&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;，导致双方都带有沉重历史包袱。&lt;/p&gt;
&lt;p&gt;后来Linux实现了快速系统调用vsyscall，内核提供.so通过动态链接直接map到进程空间里供用户使用，但是vsyscall有一个风险点——map 的起始地址固定（0xffffffffff600000)，有潜在的安全风险。&lt;/p&gt;
&lt;p&gt;为了改善vsyscall的局限性，设计了&lt;a href=&#34;https://en.wikipedia.org/wiki/VDSO&#34;&gt;vDSO&lt;/a&gt;。但为了兼容vsyscall现在还保留着。&lt;/p&gt;
&lt;p&gt;vDSO利用&lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;ASLR&lt;/a&gt;增强里安全性，随机地址。&lt;/p&gt;
&lt;p&gt;可以看到Linux中的进程大多包含vDSO的动态库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ ldd /bin/cat 
	linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffc03be0000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f52236dd000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	/lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f5223aa7000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是并不存在实际的.so文件，vsyscall以及vDOS将系统调用变为函数调用，并把他们映射到用户空间，明显的提高了系统调用的性能。
Linux 2.6时，vsyscall就支持了clock_gettime, gettimeofday, time。&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/vdso/vdso.lds.S&#34;&gt;vdso.lds.S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/vdso.jpeg&#34; alt=&#34;vdso&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到这里的时候突然想到，刚参加工作的时候一位前辈和我说获取时间可以不使用系统调用，当时一脸懵逼，现在想想确实知道的太少。一些知识不是需要多高的智商才能学到，而是就摆在那，看了就不知道，不看就不知道。&lt;/p&gt;
&lt;h1 id=&#34;3-总结&#34;&gt;3. 总结&lt;/h1&gt;
&lt;p&gt;系统调用是用户和硬件交互的媒介&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软中断实现是最初Linux实现系统调用方式，但现在还有使用的方式，例如golang在一些架构上系统调用还是使用软中断的方式，因为golang团队在做基准测试的时候发现，软中断方式和快速指令方式效率差不多。&lt;a href=&#34;https://go-review.googlesource.com/c/go/+/16996/&#34;&gt;runtime, syscall: use int $0x80 to invoke syscalls on android/386&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;快速汇编指令，intel和amd专门用于系统调用的指令。&lt;/li&gt;
&lt;li&gt;vsyscall和vDSO通过动态库的方式。&lt;/li&gt;
&lt;/ol&gt;
</description>
  </item>
  
  <item>
    <title>如何使用vim作为golang和cxx开发IDE</title>
    <link>https://journey-c.github.io/how-to-use-vim-as-golang-and-cxx-development-ide/</link>
    <pubDate>Thu, 19 Nov 2020 23:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/how-to-use-vim-as-golang-and-cxx-development-ide/</guid>
    <description>&lt;blockquote&gt;
&lt;p&gt;作为一个初学者，很多同学的路子都是这样的：费劲心思装好windows和Linux双系统，看着Linux界面难看，开始找美化软件的工具；美化好了，安装好了g++，因为gedit不好用，sublimetext、atom好用但是不太方便编译，然后陷入vim还是emacs的抉择；最终决定用vim，打印了一张vim键盘图开始学习，略为抱怨门槛高；入门之后发现写代码确实快了很多，为了更快，更美观，开始折腾vim的插件，学习怎么打tag等等等等…感觉万事具备，只欠好好学c++了，发现需要学习g++的编译连接，库文件，多个源文件，大工程，然后开始学习makefile的写法…从此越跑越偏，后来突然发现python看起来简单，要不学python吧。后来又觉得python似乎找工作不占很大优势，转而学java。后来又觉得javascript更简单，所以搞前端吧。然后发现还需要学html、css、数据库、日新月异的新框架…一本书，《c++从入门到放弃》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-最终成品&#34;&gt;1. 最终成品&lt;/h1&gt;
&lt;p&gt;先给大家看看成品的样子
&lt;img src=&#34;https://journey-c.github.io/images/vim_0.jpeg&#34; alt=&#34;vim_0.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-所见即所得&#34;&gt;2. 所见即所得&lt;/h1&gt;
&lt;p&gt;折腾vim大概有四五年的时间了，下面总结了想要将vim作为主开发工具需要的条件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;开发&lt;/td&gt;
&lt;td&gt;代码跳转&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;查看引用&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代码补全&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;查找替换&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;变量、函数更名&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;辅助&lt;/td&gt;
&lt;td&gt;文件目录&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;函数目录&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;注释&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;全局搜索文件&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;全局搜索关键词&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;补全括号&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;美化&lt;/td&gt;
&lt;td&gt;主题&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;状态栏&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Git信息&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;启动页美化&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;21-准备&#34;&gt;2.1 准备&lt;/h2&gt;
&lt;p&gt;很多插件在neo-vim下支持更好，但是寡人是个念旧的人，所以一直用【&lt;em&gt;VIM - Vi IMproved 8.2&lt;/em&gt;】
所以在开始配置之前，需要准备vim 8.0以上版本并且支持python3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/vim/vim.git
cd vim
./configure --with-features&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;huge &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--enable-multibyte &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--enable-python3interp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--with-python3-config-dir&lt;span style=&#34;color:#f92672&#34;&gt;=[&lt;/span&gt;你机器上python3的路径&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--enable-gui&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gtk2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--enable-cscope &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	--prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/vim
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不知道python3的路径，可以用whereis python3找一下。
最终下面的效果就可以了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ vim --version
VIM - Vi IMproved 8.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; Dec 12, compiled May &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; 06:16:44&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
macOS version
...
+comments          +linebreak         +python3           +visualextra
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-插件管理&#34;&gt;2.2 插件管理&lt;/h2&gt;
&lt;p&gt;现在最通用的插件管理插件就是&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;了，支持异步安装更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用
想安装某个插件只需要在.vimrc里配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 目录树&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrooloose/nerdcommenter&amp;#39;&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 注释&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 显示git分支&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yggdroot/LeaderF&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v1.22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./install.sh&amp;#39;&lt;/span&gt; }   &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 全局搜索&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fatih/vim-go&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:GoUpdateBinaries&amp;#39;&lt;/span&gt; }  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-go&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yianwillis/vimcdoc&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 中文文档&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neoclide/coc.nvim&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;release&amp;#39;&lt;/span&gt;}     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 补全&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;octol/vim-cpp-enhanced-highlight&amp;#39;&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; C++高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mhinz/vim-startify&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 启动界面&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在vim的NORMAL状态(按ESC)下执行&lt;code&gt;:PlugInstall&lt;/code&gt;即可完成插件的安装。
&lt;img src=&#34;https://journey-c.github.io/images/vim_1.jpeg&#34; alt=&#34;vim_1&#34;&gt;&lt;/p&gt;
&lt;p&gt;插件更新的命令为&lt;code&gt;:PlugUpdate&lt;/code&gt;
vim-plug更新的命令为&lt;code&gt;:PlugUpgrade&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-开发&#34;&gt;2.3 开发&lt;/h2&gt;
&lt;h3 id=&#34;231-插件安装&#34;&gt;2.3.1 插件安装&lt;/h3&gt;
&lt;p&gt;vim代码跳转、查看引用、代码补全、变量更名功能现在流行的解决方案都是基于微软提出的&lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP协议&lt;/a&gt;进行开发，我使用的插件是&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;coc-nvim&lt;/a&gt;是目前比较好的LSP客户端插件。&lt;/p&gt;
&lt;p&gt;coc-nvim基于nodejs开发，所以首先安装nodejs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -sL install-node.now.sh/lts | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用vim-plug安装coc-nvim&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fatih/vim-go&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:GoUpdateBinaries&amp;#39;&lt;/span&gt; }  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-go&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neoclide/coc.nvim&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;release&amp;#39;&lt;/span&gt;}     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 补全&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为&lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt;针对go开发定制了特别多功能，所以通常会连着vim-go一起安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vim-go
安装完之后需要到vim里执行&lt;code&gt;:GoInstallBinaries&lt;/code&gt;安装vim-go需要的一些go工具(gopls，goimports等，可能需要科学上网)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coc-nvim
安装完需要到vim里用coc-nvim配置golang和cxx环境，&lt;code&gt;:CocInstall coc-go&lt;/code&gt; &lt;code&gt;:CocInstall coc-clangd&lt;/code&gt;
&lt;img src=&#34;https://journey-c.github.io/images/vim_3.jpeg&#34; alt=&#34;vim_3&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;232-插件配置&#34;&gt;2.3.2 插件配置&lt;/h3&gt;
&lt;p&gt;安装完需要配置一下，下面是vim-go的配置，coc-nvim配置太长了，附录里有完整配置可以参考。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-go {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_fmt_command&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goimports&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 格式化将默认的 gofmt 替换&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_info_mode&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_def_mode&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_rename_command&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 重命名变量&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_referrers_mode&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 美化类&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_autodetect_gopath&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_list_type&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quickfix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_version_warning&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_types&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_fields&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_functions&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_function_calls&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_operators&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_extra_types&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_methods&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_generate_tags&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_function_parameters&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_build_constraints&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;godef_split&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; push quickfix window always to the bottom&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileType&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wincmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;233-lsp安装&#34;&gt;2.3.3 LSP安装&lt;/h3&gt;
&lt;p&gt;coc-nvim是基于&lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP协议&lt;/a&gt;开发的，所以要安装go和cxx的LSP服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go
golang 有官方出的gopls，上面步骤里面vim-go已经给安装好了，只需要配置下环境变量即可&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$GOPATH/bin:$HOME/.cargo/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在终端直接输入gopls有反应即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clangd
cpp和c的补全跳转等功能向来没有完美解决方案，小编用的是&lt;a href=&#34;https://clangd.llvm.org/&#34;&gt;clangd&lt;/a&gt; + &lt;a href=&#34;https://github.com/rizsotto/Bear&#34;&gt;bear&lt;/a&gt;
clangd最为cxx的LSP，bear用于生成编译数据库compile_commands.json
注意: mac用户使用bear需要关闭SIP&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;安装bear&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;centos下没装成功过&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

ubuntu:
sudo apt-install bear

mac:
brew install bear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;clangd安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p ~/.vim/LSP/bin
cd ~/.vim/LSP
wget https://github.com/clangd/clangd/releases/download/11.0.0/clangd-linux-11.0.0.zip &lt;span style=&#34;color:#75715e&#34;&gt;# ubuntu&lt;/span&gt;
wget https://github.com/clangd/clangd/releases/download/11.0.0/clangd-mac-11.0.0.zip   &lt;span style=&#34;color:#75715e&#34;&gt;# mac os&lt;/span&gt;

解压完，将bin目录下的clangd放到~/.vim/LSP/bin下
设置环境变量
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$GOPATH/bin:$HOME/.vim/LSP/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在终端输入clangd有反应即可
下面就可以愉快的开发golang和cxx了&lt;/p&gt;
&lt;h3 id=&#34;234-快捷键&#34;&gt;2.3.4 快捷键&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;查看引用&lt;/td&gt;
&lt;td&gt;leader键+gr或者:GoReferrers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跳转&lt;/td&gt;
&lt;td&gt;gd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量重命名&lt;/td&gt;
&lt;td&gt;leader键+rn或者:GoRename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查找替换&lt;/td&gt;
&lt;td&gt;%s/要查找的/要替换的/g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代码补全&lt;/td&gt;
&lt;td&gt;自动的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看channel读写情况&lt;/td&gt;
&lt;td&gt;:GoChannelPeers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;235-效果&#34;&gt;2.3.5 效果&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/vim_5.jpeg&#34; alt=&#34;vim_5&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;24-辅助&#34;&gt;2.4 辅助&lt;/h2&gt;
&lt;h3 id=&#34;241-目录树和注释&#34;&gt;2.4.1 目录树和注释&lt;/h3&gt;
&lt;p&gt;目录插件: &lt;a href=&#34;https://github.com/preservim/nerdtree&#34;&gt;nerdtree&lt;/a&gt;
注释插件: &lt;a href=&#34;https://github.com/scrooloose/nerdcommenter&#34;&gt;nerdcommenter&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 目录树&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrooloose/nerdcommenter&amp;#39;&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 注释&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; NERDTree {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeToggle&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; map &amp;lt;F4&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;设置NERDTree的宽度&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeWinSize&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeWinPos&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeShowIgnoredStatus&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeDirArrowExpandable&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeDirArrowCollapsible&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; nerdcommenter {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDSpaceDelims&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 注释后加空格&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;快捷键&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;打开关闭目录&lt;/td&gt;
&lt;td&gt;leader键+n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;注释&lt;/td&gt;
&lt;td&gt;leader键+c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;242-补全括号&#34;&gt;2.4.2 补全括号&lt;/h3&gt;
&lt;p&gt;在vim执行&lt;code&gt;:CocInstall coc-pairs&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;243-全局搜索&#34;&gt;2.4.3 全局搜索&lt;/h3&gt;
&lt;p&gt;插件: &lt;a href=&#34;https://github.com/Yggdroot/LeaderF&#34;&gt;LeaderF&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yggdroot/LeaderF&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v1.22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./install.sh&amp;#39;&lt;/span&gt; }   &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 全局搜索&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; LeaderF {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;Lf_ShortcutF&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;C-P&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:Lf_ShowDevIcons=0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;快捷键&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件搜索&lt;/td&gt;
&lt;td&gt;leader键+p或者:LeaderfFile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;函数目录&lt;/td&gt;
&lt;td&gt;:LeaderfFunction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;已打开文件跳转&lt;/td&gt;
&lt;td&gt;:LeaderfBuffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量搜索&lt;/td&gt;
&lt;td&gt;::LeaderfRgInteractive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;成品图
&lt;img src=&#34;https://journey-c.github.io/images/vim_2.jpeg&#34; alt=&#34;vim_2&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-美化&#34;&gt;2.5 美化&lt;/h2&gt;
&lt;h3 id=&#34;251-主题&#34;&gt;2.5.1 主题&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/joshdick/onedark.vim&#34;&gt;onedark&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;joshdick/onedark.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Colorscheme {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 语法高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 文件类型带上颜色&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 文件类型探测 使用缩进文件&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filetype&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;indent&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;=light&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置主题&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;colorscheme&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onedark&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Set the vertical split character to  a space (there is a single space after &amp;#39;\ &amp;#39;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fillchars&lt;/span&gt;+=&lt;span style=&#34;color:#a6e22e&#34;&gt;vert&lt;/span&gt;:\ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;highlight&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VertSplit&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctermbg&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;236&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctermfg&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;236&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;252-状态栏&#34;&gt;2.5.2 状态栏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;vim-airline&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-airline {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g:airline_symbols&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;={}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;ignore_bufadd_pat&lt;/span&gt; =&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;            \ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\c\vgundo|undotree|vimfiler|tagbar|nerd_tree&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;keymap_ignored_filetypes&lt;/span&gt; =&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;            \ [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vimfiler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nerdtree&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;left_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;left_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;right_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;right_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_left_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_left_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_right_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_right_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;branch&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readonly&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;linenr&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;☰&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;maxlinenr&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dirty&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;⚡&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:airline_theme=&amp;#39;jellybeans&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;formatter&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unique_tail&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;253-git信息和启动页&#34;&gt;2.5.3 GIT信息和启动页&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;vim-fugitive&lt;/a&gt;
&lt;a href=&#34;https://github.com/mhinz/vim-startify&#34;&gt;vim-startify&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 显示git分支&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mhinz/vim-startify&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 启动界面&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;效果
&lt;img src=&#34;https://journey-c.github.io/images/vim_4.jpeg&#34; alt=&#34;vim_4&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;附录&#34;&gt;附录&lt;/h1&gt;
&lt;h2 id=&#34;完整配置&#34;&gt;完整配置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Common config {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置行号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 不生成备份文件&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nobackup&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 不创建临时交换文件&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noswapfile&lt;/span&gt;     &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 右下角显示光标位置&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ruler&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 查找不区分大小写&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ignorecase&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 查找高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hlsearch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 启用256色&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set t_Co=16&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 不兼容VI&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nocompatible&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置保存历史(命令, 查找模式的历史&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;history&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 右下角显示未完成的命令 &lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showcmd&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 再输入部分查找模式时显示相应的匹配点 &lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incsearch&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 使用UTF-8编码&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoding&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;utf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-8&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 所在行高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set cursorcolumn&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cursorline&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 相对行号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set relativenumber&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 使用鼠标&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set mouse=a&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 显示TAB键&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set list&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 自动保存&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set autowrite&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置n个字自动换行&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set textwidth=n&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foldmethod&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nofoldenable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置leader键&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapleader&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;space&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 恢复光标位置&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autocmd&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;au&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BufReadPost&lt;/span&gt; * &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt;) &amp;lt;= &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;) | &lt;span style=&#34;color:#a6e22e&#34;&gt;exe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal! g&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 右侧打开内置terminal&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;rightbelow&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vert&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;term&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Plugin Management {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filetype&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;off&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt;                          &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 目录树&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scrooloose/nerdcommenter&amp;#39;&lt;/span&gt;                     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 注释&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 显示git分支&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yggdroot/LeaderF&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v1.22&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./install.sh&amp;#39;&lt;/span&gt; }   &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 全局搜索&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fatih/vim-go&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:GoUpdateBinaries&amp;#39;&lt;/span&gt; }  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-go&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yianwillis/vimcdoc&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 中文文档&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neoclide/coc.nvim&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;release&amp;#39;&lt;/span&gt;}     &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 补全&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;octol/vim-cpp-enhanced-highlight&amp;#39;&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; C++高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mhinz/vim-startify&amp;#39;&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 启动界面&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; coc-nvim {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; TextEdit might fail if hidden is not set.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hidden&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Some servers have issues with backup files, see #649.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nobackup&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nowritebackup&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Give more space for displaying messages.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmdheight&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; delays and poor user experience.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updatetime&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Don&amp;#39;t pass messages to |ins-completion-menu|.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shortmess&lt;/span&gt;+=&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Always show the signcolumn, otherwise it would shift the text each time&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; diagnostics appear/become resolved.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;patch-8.1.1564&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Recently vim can merge signcolumn and number column into one&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signcolumn&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signcolumn&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use tab for trigger completion with characters ahead and navigate.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; NOTE: Use command &amp;#39;:verbose imap &amp;lt;tab&amp;gt;&amp;#39; to make sure tab is not mapped by&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; other plugin before putting this into your config.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TAB&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &lt;span style=&#34;color:#a6e22e&#34;&gt;pumvisible&lt;/span&gt;() ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-n&amp;gt;&amp;#34;&lt;/span&gt; :&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SID&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check_back_space&lt;/span&gt;() ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;TAB&amp;gt;&amp;#34;&lt;/span&gt; :&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;refresh&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;TAB&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pumvisible&lt;/span&gt;() ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-p&amp;gt;&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-h&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;check_back_space&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;abort&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; || &lt;span style=&#34;color:#a6e22e&#34;&gt;getline&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]  =~# &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use &amp;lt;c-space&amp;gt; to trigger completion.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nvim&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;refresh&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;-@&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;refresh&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use &amp;lt;cr&amp;gt; to confirm completion, `&amp;lt;C-g&amp;gt;u` means break undo chain at current&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; position. Coc only does snippet and additional edit on confirm.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; &amp;lt;cr&amp;gt; could be remapped by other vim plugin, try `:verbose imap &amp;lt;CR&amp;gt;`.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*complete_info&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complete_info&lt;/span&gt;()[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;selected&amp;#34;&lt;/span&gt;] != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&amp;#34;&lt;/span&gt; ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-y&amp;gt;&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-g&amp;gt;u\&amp;lt;CR&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pumvisible&lt;/span&gt;() ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-y&amp;gt;&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-g&amp;gt;u\&amp;lt;CR&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use `[g` and `]g` to navigate diagnostics&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;diagnostic&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; ]&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;diagnostic&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; GoTo code navigation.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gd&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;definition&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gy&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;definition&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gi&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;implementation&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gr&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;references&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use K to show documentation in preview window.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;K&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SID&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show_documentation&lt;/span&gt;()&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;show_documentation&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;], &amp;amp;&lt;span style=&#34;color:#a6e22e&#34;&gt;filetype&lt;/span&gt;) &amp;gt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h &amp;#39;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;expand&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;cword&amp;gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CocActionAsync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;doHover&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Highlight the symbol and its references when holding the cursor.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CursorHold&lt;/span&gt; * &lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CocActionAsync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Symbol renaming.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rn&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;rename&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Formatting selected code.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;  &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;selected&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;  &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;selected&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;augroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mygroup&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt;!&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Setup formatexpr specified filetype(s).&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileType&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;typescript&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formatexpr&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;CocAction&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;formatSelected&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  &amp;#34; Update signature help on jump placeholder.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CocJumpPlaceholder&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CocActionAsync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;showSignatureHelp&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;augroup&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Applying codeAction to the selected region.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Example: `&amp;lt;leader&amp;gt;aap` for current paragraph&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;  &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;codeaction&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;selected&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;  &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;codeaction&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;selected&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Remap keys for applying codeAction to the current buffer.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ac&lt;/span&gt;  &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;codeaction&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Apply AutoFix to problem on the current line.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;qf&lt;/span&gt;  &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;fix&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Map function and class text objects&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; NOTE: Requires &amp;#39;textDocument.documentSymbol&amp;#39; support from the language server.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;funcobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;omap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;funcobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;af&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;funcobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;omap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;af&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;funcobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ic&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;classobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;omap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ic&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;classobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ac&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;classobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;omap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ac&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;classobj&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Use CTRL-S for selections ranges.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Requires &amp;#39;textDocument/selectionRange&amp;#39; support of language server.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;range&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Add `:Format` command to format current buffer.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CocAction&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;format&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Add `:Fold` command to fold current buffer.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=? &lt;span style=&#34;color:#a6e22e&#34;&gt;Fold&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;CocAction&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fold&amp;#39;&lt;/span&gt;, &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;&amp;gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Add `:OR` command for organize imports of the current buffer.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OR&lt;/span&gt;   :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;CocAction&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;runCommand&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;editor.action.organizeImport&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Add (Neo)Vim&amp;#39;s native statusline support.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; NOTE: Please see `:h coc-status` for integrations with external plugins that&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; provide custom statusline: lightline.vim, vim-airline.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set statusline^=%{coc#status()}%{get(b:,&amp;#39;coc_current_function&amp;#39;,&amp;#39;&amp;#39;)}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Mappings for CoCList&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Show all diagnostics.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocList&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diagnostics&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Manage extensions.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocList&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Show commands.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocList&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Find symbol of current document.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocList&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outline&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Search workspace symbols.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocList&lt;/span&gt; -&lt;span style=&#34;color:#a6e22e&#34;&gt;I&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;symbols&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Do default action for next item.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocNext&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Do default action for previous item.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocPrev&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Resume latest coc list.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nowait&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;space&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;  :&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CocListResume&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Colorscheme {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 语法高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 文件类型带上颜色&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 文件类型探测 使用缩进文件&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filetype&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;indent&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;=light&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置主题&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;colorscheme&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onedark&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Set the vertical split character to  a space (there is a single space after &amp;#39;\ &amp;#39;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fillchars&lt;/span&gt;+=&lt;span style=&#34;color:#a6e22e&#34;&gt;vert&lt;/span&gt;:\ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;highlight&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VertSplit&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctermbg&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;236&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ctermfg&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;236&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-go {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_fmt_command&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;goimports&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 格式化将默认的 gofmt 替换&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_info_mode&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_def_mode&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_rename_command&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 重命名变量&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_referrers_mode&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gopls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_autodetect_gopath&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_list_type&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;quickfix&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_version_warning&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_types&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_fields&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_functions&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_function_calls&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_operators&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_extra_types&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_methods&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_generate_tags&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_function_parameters&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;go_highlight_build_constraints&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;godef_split&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; push quickfix window always to the bottom&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileType&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qf&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wincmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;J&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; LeaderF {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;Lf_ShortcutF&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;C-P&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:Lf_ShowDevIcons=0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; NERDTree {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;leader&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeToggle&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; map &amp;lt;F4&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;设置NERDTree的宽度&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeWinSize&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeWinPos&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeShowIgnoredStatus&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeDirArrowExpandable&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeDirArrowCollapsible&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;  *        &lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; vim-airline {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g:airline_symbols&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;={}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;ignore_bufadd_pat&lt;/span&gt; =&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;            \ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\c\vgundo|undotree|vimfiler|tagbar|nerd_tree&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;keymap_ignored_filetypes&lt;/span&gt; =&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;            \ [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vimfiler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nerdtree&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;left_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;left_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;right_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;right_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_left_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_left_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_right_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_right_alt_sep&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;branch&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readonly&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;linenr&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;☰&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;maxlinenr&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_symbols&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dirty&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;⚡&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:airline_theme=&amp;#39;jellybeans&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;tabline&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;formatter&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unique_tail&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; nerdcommenter {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDSpaceDelims&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 注释后加空格&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Compile {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CodeForces&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunCXXCodeForces&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CxxRun&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunCPP&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;! -&lt;span style=&#34;color:#a6e22e&#34;&gt;nargs&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ShellRun&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunSH&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; shell&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;RunSH&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!sh ./%&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endfunc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; CXX&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;RunCPP&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!g++ % -std=c++17 -o %&amp;lt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;! ./%&amp;lt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endfunc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; codeforces&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;RunCXXCodeForces&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!g++ % -std=c++17 -o %&amp;lt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;! ./%&amp;lt; &amp;lt; in&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endfunc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Code Style {&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileType&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpp&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;yaml&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:call SetCppFileConfig()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileType&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;go&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;bash&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;python&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;java&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;javascipt&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;vim&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;sh&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;dot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:call SetCommonFileConfig()&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SetCppFileConfig&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    &amp;#34; 设置tab为2个空格&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabstop&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    &amp;#34; 设置缩进为2个空格&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shiftwidth&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    &amp;#34; 用space替代tab的输入&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expandtab&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endfunc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SetCommonFileConfig&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    &amp;#34; 设置tab为4个空格&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabstop&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    &amp;#34; 设置缩进为4个空格&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shiftwidth&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    &amp;#34; 用space替代tab的输入&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expandtab&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;endfunc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;F8&lt;/span&gt;&amp;gt; :!&lt;span style=&#34;color:#a6e22e&#34;&gt;dot&lt;/span&gt; % -&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt; -&lt;span style=&#34;color:#a6e22e&#34;&gt;Gsize&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;\! -&lt;span style=&#34;color:#a6e22e&#34;&gt;Gdpi&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -&lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt; %&amp;lt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt; %&amp;lt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;png&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
  </item>
  
  <item>
    <title>channel 源码阅读</title>
    <link>https://journey-c.github.io/channel-read/</link>
    <pubDate>Thu, 29 Oct 2020 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/channel-read/</guid>
    <description>&lt;blockquote&gt;
&lt;p&gt;年初的时候go语言的学习提上了日程，前一篇sync.pool阅读之后，阅读代码进度本该更快些，奈何身体被掏空，所以这篇文章断断续续一个月终于攒起来了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-简介&#34;&gt;1. 简介&lt;/h1&gt;
&lt;p&gt;channel是golang中用于goroutine之间通讯的数据结构，有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;li&gt;创建channel时返回的是指针，不需要考虑拷贝的问题&lt;/li&gt;
&lt;li&gt;顺序通讯，写入和读出的顺序一致&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-数据部分&#34;&gt;2. 数据部分&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/chan.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源码位置go/src/runtime/chan.go&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;21--hchan&#34;&gt;2.1  hchan&lt;/h2&gt;
&lt;p&gt;channel对应的数据结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;elemsize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_type&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// lock protects all fields in hchan, as well as several
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// fields in sudogs blocked on this channel.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Do not change another G&amp;#39;s status while holding this lock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// (in particular, do not ready a G), as this can deadlock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// with stack shrinking.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutex&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;211-参数意义&#34;&gt;2.1.1 参数意义&lt;/h3&gt;
&lt;p&gt;qcount   uint // 表示channel中元素的个数
dataqsiz uint // 表示channel的大小长度
buf      unsafe.Pointer // 存储元素的环形队列头指针
elemsize uint16 // 表示此channel能存储元素的大小
closed   uint32 // channel是否关闭了
elemtype *_type // 表示此channel能存储元素的类型
sendx    uint // 表示发送操作对应buf的下标，超过dataqsiz之后清0（因为是循环队列嘛）
recvx    uint // 表示接收操作对应buf的下标
recvq    waitq // 等待接收操作的goroutine队列
sendq    waitq // 等待发送操作的goroutine队列&lt;/p&gt;
&lt;p&gt;lock mutex // channel的锁&lt;/p&gt;
&lt;h2 id=&#34;22-waitq&#34;&gt;2.2 waitq&lt;/h2&gt;
&lt;p&gt;用来表示等待发送或者接受的goroutine队列（用sudog表示队列一个节点）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;221-参数意义&#34;&gt;2.2.1 参数意义&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;goroutine指针&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;队首指针&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;goroutine指针&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;队尾指针&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;222-函数&#34;&gt;2.2.2 函数&lt;/h3&gt;
&lt;h4 id=&#34;2221-enqueue&#34;&gt;2.2.2.1 enqueue&lt;/h4&gt;
&lt;p&gt;两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;队列为空，将元素放入队尾将first指针和last指针赋好值&lt;/li&gt;
&lt;li&gt;队列不为空，直接将元素放入队尾&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;enqueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 将goroutine的next置为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 如果尾指针为空，说明队列为空，就把这个goroutine放进去
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 直接入队列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2222-dequeue&#34;&gt;2.2.2.2 dequeue&lt;/h4&gt;
&lt;p&gt;从队列头开始遍历&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first指针为空，说明队列为空，则直接返回空&lt;/li&gt;
&lt;li&gt;如果队列只有一个元素了，将元素取出，并且清空first指针和last指针&lt;/li&gt;
&lt;li&gt;队列还有很多元素，直接将first指针对应的元素去除&lt;/li&gt;
&lt;li&gt;最后判断如果这个元素(sudog——在channel中用来表示等待接收或者发送的goroutine的)在select结构中并且select结构有其他接口，就跳过，继续遍历下一个节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;waitq&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 头指针为空，说明队列为空，直接返回
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 如果next指针为空，说明队列就一个元素了，取出这个就空了，就将队列置空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// next不为空，就将next作为队首，将原来的队首返回
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// mark as removed (see dequeueSudog)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// if a gogoroutine was put on this queue because of a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// select, there is a small window between the gogoroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// being woken up by a different case and it grabbing the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// channel locks. Once it has the lock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// it removes itself from the queue, so we won&amp;#39;t see it after that.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// We use a flag in the G struct to tell us when someone
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// else has won the race to signal this gogoroutine but the gogoroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// hasn&amp;#39;t removed itself from the queue yet.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 如果goroutine处于select结构中并且select有其他出口就跳过这个
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Cas&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;selectDone&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sgp&lt;/span&gt;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;23-sudog&#34;&gt;2.3 sudog&lt;/h2&gt;
&lt;p&gt;sudog是在等待对channel发送或者接受的goroutine&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么有了goroutine还要有一个sudog？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为goroutine和等待的channel是多对多的关系，一个goroutine可能在等待多个channel，一个channel也可能有很多goroutine在等待，所以用sudog表示这个等待中的goroutine&lt;/li&gt;
&lt;li&gt;sudog是channel等待或者接发送链表的一个node&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;sudog通过acquireSudog创建，releaseSudog销毁&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在go/src/runtime/proc.go中&lt;/li&gt;
&lt;li&gt;go会维护一个全局的缓存（有锁），然后每个调度器（P）有自己的缓存&lt;/li&gt;
&lt;li&gt;创建sudog时会先从P的缓存中找，没有就到全局缓存中找，在没有才new一个&lt;/li&gt;
&lt;li&gt;销毁sudog的时候先判断P是不是满了，如果满了就将一半缓存放到全局缓存然后再把sudog放到自己缓存&lt;/li&gt;
&lt;li&gt;全局缓存的生存周期时两次GC的间隔，go/src/runtime/mgc.go 中clearpools()函数中可以看到，每次GC都会清理全局缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// sudog替哪个goroutine在等待
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 是否在select结构中(select可能取消阻塞发送或接收)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 下一个节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 上一个节点
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// data element (may point to stack)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;acquiretime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 创建时间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 释放时间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ticket&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;parent&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaRoot binary tree
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// g.waiting list or semaRoot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;waittail&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaRoot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;           &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// channel 在等待哪个channel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;231-创建sudogacquiresudog&#34;&gt;2.3.1 创建sudog——acquireSudog&lt;/h3&gt;
&lt;p&gt;大概逻辑就是现在当前goroutine所在调度器(P)的缓存中找，如果没有就从全局缓存中找，如果还没有就new一个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireSudog&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获得当前goroutine所在的线程(M)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquirem&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获得当前goroutine所在调度器(P)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 如果调度器的sudog缓存为空，就从中央缓存找，如果再为空就new一个
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudoglock&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// First, try to grab a batch from central cache.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;) &amp;lt; cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudoglock&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// If the central cache is empty, allocate a new one.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;, new(&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;))
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acquireSudog: found s.elem != nil in cache&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;releasem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;232-销毁sudogreleasesudog&#34;&gt;2.3.2 销毁sudog——releaseSudog&lt;/h3&gt;
&lt;p&gt;大概逻辑就是如果当前goroutine所在调度器(P)的缓存满了，就将调度器(P)的缓存一半放入全局缓存，然后在把sudog放入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;releaseSudog&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 这部分都是check sudog 是否合法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: sudog with non-nil elem&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: sudog with non-false isSelect&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: sudog with non-nil next&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: sudog with non-nil prev&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: sudog with non-nil waitlink&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: sudog with non-nil c&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime: releaseSudog with non-nil gp.param&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquirem&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// avoid rescheduling to another P
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果当前调度器的缓存满了，就将一半放入中央缓存
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Transfer half of local cache to the central cache.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;) &amp;gt; cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;
			} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudoglock&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;last&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudoglock&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;releasem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-实现细节&#34;&gt;3. 实现细节&lt;/h1&gt;
&lt;h2 id=&#34;31-创建channel&#34;&gt;3.1 创建channel&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;go中所有的channel的创建都会使用make关键字，make(arg1, arg2)函数最终会调用到runtime.makechan和runtime.makechan64，下面讲解go在编译时期是如何做这些事情的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.13.8/src/cmd/compile/internal/gc/typecheck.go&#34;&gt;typecheck.go&lt;/a&gt;
编译器会将make(arg1, arg2)转化成OMAKE类型的节点，并在类型检查阶段将OMAKE类型的节点按照arg1的类型转化为OMAKECHAN，OMAKEMAP，OMAKESLICE等类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;typecheck1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Op&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OMAKE&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Etype&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TCHAN&lt;/span&gt;:
            &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;) {
                &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;.
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nodintconst&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            }
            &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Op&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;OMAKECHAN&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 节点类型转化为OMAKECHAN
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.13.8/src/cmd/compile/internal/gc/walk.go&#34;&gt;walk.go&lt;/a&gt;
OMAKECHAN类型的节点最终会在SSA中间代码生成之前被转化成runtime.makechan或者runtime.makechan64&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;walkexpr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Nodes&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Op&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OMAKECHAN&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;// When size fits into int, use makechan instead of
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// makechan64, which is faster and shorter on 32 bit platforms.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Left&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fnname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan64&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;argtype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;types&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Types&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;TINT64&lt;/span&gt;]

        &lt;span style=&#34;color:#75715e&#34;&gt;// Type checking guarantees that TIDEAL size is positive and fits in an int.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// The case of size overflow when converting TUINT or TUINTPTR to TINT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// will be handled by the negative range checks in makechan during runtime.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IsKind&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;TIDEAL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxintval&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Etype&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Cmp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxintval&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;TUINT&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;fnname&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan&amp;#34;&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;argtype&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;types&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Types&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;TINT&lt;/span&gt;]
        }

        &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mkcall1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chanfn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fnname&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;typename&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;conv&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;argtype&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    }
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;311-makechan64&#34;&gt;3.1.1 makechan64&lt;/h3&gt;
&lt;p&gt;check一下size是否是int，然后就执行makechan了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makechan64&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;chantype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int64(int(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; {
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: size out of range&amp;#34;&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makechan&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, int(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;312-makechan&#34;&gt;3.1.2 makechan&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安全检查: channel能存的元素类型大小是否超过2^16&lt;/li&gt;
&lt;li&gt;判断hchanSize是否关于maxAlign对齐，判断元素对齐是否maxAlign小，如果大maxAlign就没用了，这里hchanSize设计十分巧妙，位运算神操作优化，可以看另一篇文章&lt;a href=&#34;https://journey-c.github.io/regarding-the-n-th-power-alignment-of-2&#34;&gt;关于2的n次幂对齐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;判断申请的空间大小是否uint64大，判断所需空间是否超过最大可申请空间，判断size是否小于0(非法)&lt;/li&gt;
&lt;li&gt;然后就是给hchan申请内存空间了
&lt;ol&gt;
&lt;li&gt;无缓冲的size=0的，只需要给hchan申请hchansize大小的内存空间即可&lt;/li&gt;
&lt;li&gt;有缓冲，但是元素是非指针类型的，就申请hchanSize+mem大小的连续内存空间, 并将hchanSize之后的首地址赋值给buf&lt;/li&gt;
&lt;li&gt;有缓冲，并且元素类型是指针的，hchan和底层buf内存就可以分开申请不用连续&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;给其他变量赋值&lt;/li&gt;
&lt;li&gt;返回hchan指针，&lt;strong&gt;注意这里返回的是指针，所以channel在各函数之间传递时，就不是值传递了&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;为什么元素类型是非指针hchan和buf要在一段地址连续的内存中，而指针类型的则可以分开&lt;/strong&gt;
这是源码注释的原话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hchan does not contain pointers interesting for GC when elements stored in buf do not contain pointers.
buf points into the same allocation, elemtype is persistent.
SudoG&amp;rsquo;s are referenced from their owning thread so they can&amp;rsquo;t be collected.
TODO(dvyukov,rlh): Rethink when collector can move allocated objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;猜想:&lt;/strong&gt;
大概意思是，当channel中元素类型不包含指针时，gc时需要回收这段空间的，当channel中元素类型包含指针时，这些指针被自己所在线程引用gc是不能回收，所以当元素不包含指针时申请一段连续的空间可以减小gc的压力&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makechan&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;chantype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// compiler checks this but be safe.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: invalid channel element type&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlign&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;align&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlign&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: bad alignment&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 计算大小需要多少空间，check是否
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 	math.MulUintptr(a, b)函数返回a * b，以及结果是否超过uintptr的最大值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 判断所需空间是否比uint64大，判断所需空间是否超过最大可申请空间，判断size是否小于0(非法)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;math&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MulUintptr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlloc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: size out of range&amp;#34;&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 就是无缓冲channel，只需要申请hchan需要的大小就行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;mallocgc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptrdata&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 有缓冲队列channel，但是存放元素不是指针类型的，就要申请hchanSize+这些元素大小的内存空间，然后把申请下来空间首地址赋给buf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;mallocgc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 默认除了给hchan申请内存空间之外还需要申请size个元素大小的内存空间，并且把首地址赋给c.buf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = new(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mallocgc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mem&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemsize&lt;/span&gt; = uint16(&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; = uint(&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;debugChan&lt;/span&gt; {
		print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makechan: chan=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;; elemsize=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;; elemalg=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;alg&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;; dataqsiz=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;32-发送&#34;&gt;3.2 发送&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;具体编译时做的转换可参考makechan，代码都在类似的地方&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;321-chansend&#34;&gt;3.2.1 chansend&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先检测channel是否为空, 如果为空直接报错&lt;/li&gt;
&lt;li&gt;check是否开启了竞争检测，golang的竞争检测通过ThreadSanitizer库(C++)做的&lt;/li&gt;
&lt;li&gt;然后kill掉一些不用加锁就可以判断的情况，如果是非阻塞并且channel未关闭，size = 0或者channel满了, 直接返回false(发送失败)&lt;/li&gt;
&lt;li&gt;如果已经有goroutine在等待了，就直接调send(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func(), skip int)发给那个goroutine&lt;/li&gt;
&lt;li&gt;如果没有goroutine在等待.&lt;/li&gt;
&lt;li&gt;如果channel是非阻塞并且还地方，就放入buffer中，如果没地方了就直接返回false&lt;/li&gt;
&lt;li&gt;如果channel是阻塞并且不在select中或者在select中且没有其他出口的，就将创建一个sudog，将sudog初始化并且放入待发送队列(sendq), 并且调用goparkunlock(&amp;amp;c.lock, waitReasonChanSend, traceEvGoBlockSend, 3)使当前goroutine陷入沉睡直到被唤醒(已经发出去了)&lt;/li&gt;
&lt;li&gt;清理这个过程的垃圾数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第四步中如果有goroutine在等待就直接发送，会影响非阻塞channel数据的顺序吗？&lt;/strong&gt;
不会，channel的数据由唯一全局锁保护，读写互斥，假设一个goroutine来读channel，只有两种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;channel buffer中有数据，这时goroutine会直接读取数据，不会被阻塞。&lt;/li&gt;
&lt;li&gt;channel buffer中没有数据，这时goroutine会被阻塞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只有当buffer中有数据且有goroutine被阻塞时，顺序才会被打乱，但这两个条件是互斥的，有数据就不可能阻塞，阻塞就不可能有数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// entry point for c &amp;lt;- x from compiled code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//go:nosplit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chansend1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;chansend&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;getcallerpc&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chansend&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果c为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是非阻塞的，就是那种有容量的，就返回false写channel失败
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是非阻塞的就让当前goroutine停止(这里写个小程序就能看效果，这个goroutine的defer不会执行)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanSendNilChan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoStop&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unreachable&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;debugChan&lt;/span&gt; {
		print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chansend: chan=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 开启竞争检测
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;racereadpc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;funcPC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chansend&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 先不加锁判断非阻塞channel且没关闭
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果size = 0或者channel满了, 直接返回false(发送失败)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
		(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt;)) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blockprofilerate&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cputicks&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// channel加锁
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果channel关闭了，就返回panic
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send on closed channel&amp;#34;&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 等receive队列的队首中取出一个接收者，如果这个接收者不是nil就绕过buffer直接把ep发给他，并且释放锁
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Found a waiting receiver. We pass the value we want to send
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// directly to the receiver, bypassing the channel buffer (if any).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;) }, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// channel还没满就将元素放入buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Space is available in the channel buffer. Enqueue the element to send.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 获取一下发送数据的位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanbuf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;racerelease&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 将元素拷贝进buffer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemmove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 循环一下
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是非阻塞channel满了就返回false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Block on the channel. Some receiver will complete our operation for us.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 创建sudog
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireSudog&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// No stack splits between assigning elem and enqueuing mysg
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// on gp.waiting where copystack can find it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 完善sudog的信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 放入发送列表中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 将当前goroutine陷入沉睡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;goparkunlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanSend&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoBlockSend&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;KeepAlive&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 再次唤醒的时候说明元素已经发送完毕了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// someone woke us up.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G waiting list is corrupted&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chansend: spurious wakeup&amp;#34;&lt;/span&gt;)
		}
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send on closed channel&amp;#34;&lt;/span&gt;))
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;blockevent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseSudog&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3211-racereadpc&#34;&gt;3.2.1.1 racereadpc&lt;/h4&gt;
&lt;p&gt;go/src/runtime/race_amd64.s&lt;/p&gt;
&lt;p&gt;PC: 指令计数器寄存器
FP: 函数的帧指针，引用函数的参数。使用形如 symbol+offset(FP) 的方式，引用函数的输入参数。例如 arg0+0(FP)，arg1+8(FP)，使用 FP 不加 symbol 时，无法通过编译，在汇编层面来讲，symbol 并没有什么用，加 symbol 主要是为了提升代码可读性。
SP: 当前函数栈帧的底部
SB: 全局静态基指针，一般用来声明函数或全局变量
参数0放在DI通用寄存器
参数1放在SI通用寄存器
参数2放在DX通用寄存器
参数3放在CX通用寄存器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define RARG0 DI&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define RARG1 SI&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define RARG2 DX&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define RARG3 CX&lt;/span&gt;
// void runtime·racereadpc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;void *addr, void *callpc, void *pc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
TEXT    runtime·racereadpc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, NOSPLIT, $0-24
        MOVQ    addr+0&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, RARG1
        MOVQ    callpc+8&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, RARG2
        MOVQ    pc+16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;FP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, RARG3
        ADDQ    $1, RARG3 // pc is &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; start, tsan wants &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; address
        // void __tsan_read_pc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ThreadState *thr, void *addr, void *callpc, void *pc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;

        MOVQ    $__tsan_read_pc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, AX
        JMP     racecalladdr&amp;lt;&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3212-send&#34;&gt;3.2.1.2 send&lt;/h4&gt;
&lt;p&gt;用于给goroutine直接发送数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果数据没问题就直接将数据拷贝到x := &amp;lt;- c表达式x的内存地址上&lt;/li&gt;
&lt;li&gt;然后将该goroutine放到处理器(P)的runnext上面等待执行，这里不是直接让goroutine执行，而是等下一次调度的时候直接调这个goroutine&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;unlockf&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;racesync&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanbuf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;racerelease&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquireg&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;racereleaseg&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendx&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// c.sendx = (c.sendx+1) % c.dataqsiz
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 如果元素没问题就将发送的数据拷贝到x := &amp;lt;- c表达式x所在内存地址上
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;sendDirect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 然后将将该goroutine放到处理器(P)的runnext上面等待执行，这里不是直接让goroutine执行，而是等下一次调度的时候直接调这个goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;unlockf&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cputicks&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;goready&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;skip&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;33-接收&#34;&gt;3.3 接收&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;具体编译时做的转换可参考makechan，代码都在类似的地方&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;331-chanrecv&#34;&gt;3.3.1 chanrecv&lt;/h3&gt;
&lt;p&gt;两种接收方式：
chanrecv1是丢弃channel出来的元素，类似 &amp;lt;- c这中表达式
chanrecv2是使用channel出来的元素，类似 elem := &amp;lt;- c
最终都会调用到chanrecv&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// entry points for &amp;lt;- c from compiled code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//go:nosplit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanrecv1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;chanrecv&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;//go:nosplit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanrecv2&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;received&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;received&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;chanrecv&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;判断chan是否为nil，如果是直接报错&lt;/li&gt;
&lt;li&gt;kill掉一些不用枷锁就可以判断的情况，如果是非阻塞并且队列为空并且channel未关闭就返回false&lt;/li&gt;
&lt;li&gt;如果channel已经关闭了，就清空ep中的数据，立即返回&lt;/li&gt;
&lt;li&gt;如果已经有sendq在等待了(发送端提到过，如果没有goroutine等待接受，就加入sendq), 就直接接收这个元素&lt;/li&gt;
&lt;li&gt;如果此时没有goroutine等待发送&lt;/li&gt;
&lt;li&gt;如果是非阻塞且buffer中有数据直接从buffer中取出，如果没有数据直接返回false&lt;/li&gt;
&lt;li&gt;如果是阻塞的且当前goroutine没在select中或者在select中但没有其他出口，就把自己加入recvq，然后调用goparkunlock(&amp;amp;c.lock, waitReasonChanReceive, traceEvGoBlockRecv, 3)，等待被唤醒（如果被唤醒说明有有数据来了)&lt;/li&gt;
&lt;li&gt;清理这个过程中的垃圾数据&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanrecv&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;selected&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;received&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;debugChan&lt;/span&gt; {
		print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chanrecv: chan=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// channel为空就使goroutine 停止并报错
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanReceiveNilChan&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoStop&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unreachable&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是非阻塞并且队列为空并且channel未关闭就返回false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Loaduint&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blockprofilerate&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cputicks&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果channel已关闭, 并且没有数据了就清除ep中的数据立刻返回
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;())
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemclr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果已经有goroutine等着了，就直接让这个goroutine recive
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;) }, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// channel不为空将元素复制到ep中(ep := &amp;lt;- c)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Receive directly from queue
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chanbuf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquire&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;racerelease&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemmove&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemclr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qp&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataqsiz&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvx&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;qcount&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}


	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果是非阻塞直接返回false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 创建sudog
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireSudog&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ep&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlink&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isSelect&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enqueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;goparkunlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonChanReceive&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEvGoBlockRecv&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// someone woke us up
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G waiting list is corrupted&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waiting&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;blockevent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;t0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseSudog&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysg&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, !&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;33-关闭channel&#34;&gt;3.3 关闭channel&lt;/h2&gt;
&lt;p&gt;关闭channel大概逻辑就是，将buffer中的数据都释放掉，然后close设置为0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;closechan&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果为空抛出异常
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;close of nil channel&amp;#34;&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果channel已经关闭就抛出异常
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;plainError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;close of closed channel&amp;#34;&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getcallerpc&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;racewritepc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;funcPC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;closechan&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;racerelease&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;())
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;closed&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glist&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gList&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 清理所有的数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// release all readers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;recvq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;()
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;typedmemclr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elemtype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cputicks&lt;/span&gt;()
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquireg&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;())
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;glist&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// release all writers (they will panic)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dequeue&lt;/span&gt;()
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;elem&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;releasetime&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cputicks&lt;/span&gt;()
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;raceacquireg&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;raceaddr&lt;/span&gt;())
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;glist&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Ready all Gs now that we&amp;#39;ve dropped the channel lock.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;glist&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;glist&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;schedlink&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;goready&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;附录&#34;&gt;附录&lt;/h1&gt;
&lt;h2 id=&#34;chandot&#34;&gt;chan.dot&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;digraph &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    bgcolor&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#C6CFD532&amp;#34;&lt;/span&gt;; 

    node &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;record, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;, margin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.04&amp;#34;&lt;/span&gt;, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.2, color&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;gray&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
	edge &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;fontname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inconsolata, Consolas&amp;#34;&lt;/span&gt;, fontsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10, arrowhead&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;normal&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

    hchan &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;record,label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{qcount|dataqsiz|buf|elemsize|closed|elemtype|&amp;lt;sendx&amp;gt;sendx|&amp;lt;recvx&amp;gt;recvx|recvq|sendq|lock}&amp;#34;&lt;/span&gt;,xlabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hchan&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    waitq&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;record,label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;lt;first&amp;gt;first|&amp;lt;last&amp;gt;last}&amp;#34;&lt;/span&gt;,xlabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;waitq&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    sudog&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;record,label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{g|isSelect|next|prev|elem|acquiretime|releasetime|ticket|parent|waitlink|waittail|c}&amp;#34;&lt;/span&gt;,xlabel&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sudog&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

    hchan:sendx -&amp;gt; waitq &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;发送队列&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    hchan:recvx -&amp;gt; waitq &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;接收队列&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    waitq:first -&amp;gt; sudog
    waitq:last -&amp;gt; sudog
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
  </item>
  
  <item>
    <title>goroutine 源码阅读</title>
    <link>https://journey-c.github.io/golang-schedule/</link>
    <pubDate>Thu, 29 Oct 2020 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/golang-schedule/</guid>
    <description>&lt;h1 id=&#34;1数据结构&#34;&gt;1.数据结构&lt;/h1&gt;
&lt;p&gt;调度相关的数据结构有三个，M(线程)，P(调度器)，G(goroutine)
M表示线程，P作为调度器用来帮助每个线程管理自己的goroutine，G就是golang的协程。我们可以通过runtime.GOMAXPROCS(n int)函数设置P的个数，&lt;strong&gt;注意&lt;/strong&gt;P的个数并不代表M的个数，例如程序启动时runtime代码会出实话procs个P，但开始的时候只会启动一个M，就是M0和一个栈为64K(其他goroutine默认初始栈大小2K)来执行runtime代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那其他线程是什么时候创建的呐?&lt;/strong&gt;
当goroutine被唤醒时，要在M上运行(恢复goroutine的上下文)，P是帮助M管理goroutine的，恢复上下文的操作也由P来完成。如果被唤醒时发现还有空闲的P，并且没有其他M在窃取goroutine(M发现本地goroutine队列和全局goroutine队列都没有goroutine的时候，会去其他线程窃取goroutine)，说明其他M都在忙，就会创建一个M让这个空闲的P帮他来管理goroutine。
总之一句话，开始的时候创建一个M，当发现调度不过来且还有空闲P没有工作就在创建新的，直到创建procs个M(procs通过runtime.GOMAXPROCS设置)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/model.png&#34; alt=&#34;model&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-g&#34;&gt;1.1 G&lt;/h2&gt;
&lt;p&gt;golang 用结构体g表示goroutine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 当前栈的范围[stack.lo, stack.hi)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 用于抢占的，一般情况值为stack.lo + StackGuard
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 用于C语言的抢占
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_panic&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_panic&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 最内侧的panic函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_defer&lt;/span&gt;         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_defer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 最外侧的defer函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// 当前goroutine属于哪个m
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;gobuf&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 调度相关信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;schedlink&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;guintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// sched是全局的goroutine链表，schedlink表示这个goroutine在链表中的下一个goroutine的指针
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;preempt&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// 抢占标志，如果需要抢占就将preempt设置为true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;gobuf
gobuf保存goroutine的调度信息，当一个goroutine被调度的时，本质上就是把这个goroutine放到cpu，恢复各个寄存器的值，然后运行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gobuf&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 栈指针
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 程序计数器
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;guintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前被哪个goroutine持有
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ctxt&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Uintreg&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 系统调用返回值，防止系统调用后被其他goroutine抢占，所以有个地方保存返回值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;lr&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bp&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 保存CPU的rip寄存器的值
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12-m&#34;&gt;1.2 M&lt;/h2&gt;
&lt;p&gt;golang中M表示实际操作系统的线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;g0&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// g0帮M处理大小事务的goroutine，他是m中的第一个goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gsignal&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// 用于信号处理的goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tls&lt;/span&gt;           [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 线程私有空间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mstartfn&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;curg&lt;/span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// current running goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;puintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前正在运行的p(处理器)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nextp&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;puintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 暂存的p
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;puintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 执行系统调用之前的p
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;spinning&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 表示当前m没有goroutine了，正在从其他m偷取goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;blocked&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// m is blocked on a note
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;park&lt;/span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;note&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// m没有goroutine的时候会在park上sleep，需要其他m在park中wake up这个m
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;alllink&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// on allm // 所有m的链表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;thread&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// thread handle
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;13-p&#34;&gt;1.3 P&lt;/h2&gt;
&lt;p&gt;golang中P表示一个调度器，为M提供上下文环境，使得M可以执行多个goroutine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;muintptr&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 与哪个M关联(可能为空的)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;runqhead&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// p本地goroutine队列的头
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runqtail&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// p本地goroutine队列的尾
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runq&lt;/span&gt;     [&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;guintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 队列指针，和sync.pool中数据结构一样也是循环队列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogcache&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// sudog缓存，channel用的
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sudogbuf&lt;/span&gt;   [&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sudog&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 也是防止false sharing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pad&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cpu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CacheLinePad&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 防止false sharing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;14-schedt&#34;&gt;1.4 schedt&lt;/h2&gt;
&lt;p&gt;schedt结构体用来保存P的状态信息和goroutine的全局运行队列&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;schedt&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutex&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 全局锁
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 维护空闲的M
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;midle&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;muintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 等待中的M链表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nmidle&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 等待中的M的数量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nmidlelocked&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// number of locked m&amp;#39;s waiting for work
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mnext&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// number of m&amp;#39;s that have been created and next M ID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;maxmcount&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 最多创建多少个M(10000)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nmsys&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// number of system m&amp;#39;s not counted for deadlock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nmfreed&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// cumulative number of freed m&amp;#39;s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ngsys&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// number of system goroutines; updated atomically
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	
	&lt;span style=&#34;color:#75715e&#34;&gt;// 维护空闲的P
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pidle&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;puintptr&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// idle p&amp;#39;s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;npidle&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;nmspinning&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// See &amp;#34;Worker thread parking/unparking&amp;#34; comment in proc.go.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// goroutine的全局队列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runq&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;gQueue&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;runqsize&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 全局缓存已经退出的goroutine链表，下次再创建的时候直接用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Global cache of dead G&amp;#39;s.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;gFree&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mutex&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;gList&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Gs with stacks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;noStack&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gList&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Gs without stacks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;
	}
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;15-重要的全局变量&#34;&gt;1.5 重要的全局变量&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allgs&lt;/span&gt;    []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 保存所有的g
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allm&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// 所有的m构成的一个链表，包括下面的m0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;     []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 保存所有的p，len(allp) == gomaxprocs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ncpu&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 系统中cpu核的数量，程序启动时由runtime代码初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gomaxprocs&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// p的最大值，默认等于ncpu，但可以通过GOMAXPROCS修改
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;schedt&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 调度器结构体对象，记录了调度器的工作状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;m0&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 代表进程的主线程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g0&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;// m0的g0，也就是m0.g0 = &amp;amp;g0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2分步骤剖析调度的初始化&#34;&gt;2.分步骤剖析调度的初始化&lt;/h1&gt;
&lt;p&gt;下面是用go实现的hello world，代码里并没有关于调度的初始化，所以程序的入口并非是main.main，下面通过gdb一步步找到go是如何初始化调度的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// test.go
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	println(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;21-编译&#34;&gt;2.1 编译&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;go build -gcflags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-N -l&amp;#34;&lt;/span&gt; test.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用OS X的同学注意，go1.11之后压缩的debug信息，OS X的同学需要同时做以下设置参考&lt;a href=&#34;https://stackoverflow.com/questions/52534287/debug-go-program-with-gdb-on-macos&#34;&gt;Debug Go Program With Gdb On Macos&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;export GOFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-ldflags=-compressdwarf=false&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-调试&#34;&gt;2.2 调试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;利用断点可以找出目标文件的信息，在入口处打一个断点，找到程序入口在rt0_darwin_amd64.s的第8行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  sudo gdb test 
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; info files
Symbols from &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Users/journey/workspace/src/tool/gdb/test&amp;#34;&lt;/span&gt;.
Local exec file:
	&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/Users/journey/workspace/src/tool/gdb/test&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;, file type mach-o-x86-64.
	Entry point: 0x104cd00
	0x0000000001001000 - 0x00000000010515b1 is .text
	0x00000000010515c0 - 0x000000000108162a is __TEXT.__rodata
	0x0000000001081640 - 0x0000000001081706 is __TEXT.__symbol_stub1
	0x0000000001081720 - 0x0000000001081e80 is __TEXT.__typelink
	0x0000000001081e80 - 0x0000000001081e88 is __TEXT.__itablink
	0x0000000001081e88 - 0x0000000001081e88 is __TEXT.__gosymtab
	0x0000000001081ea0 - 0x00000000010bfacd is __TEXT.__gopclntab
	0x00000000010c0000 - 0x00000000010c0020 is __DATA.__go_buildinfo
	0x00000000010c0020 - 0x00000000010c0128 is __DATA.__nl_symbol_ptr
	0x00000000010c0140 - 0x00000000010c0d08 is __DATA.__noptrdata
	0x00000000010c0d20 - 0x00000000010c27f0 is .data
	0x00000000010c2800 - 0x00000000010ddc90 is .bss
	0x00000000010ddca0 - 0x00000000010e01e8 is __DATA.__noptrbss
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; b *0x104cd00
Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; at 0x104cd00: file /usr/local/go/src/runtime/rt0_darwin_amd64.s, line 8.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;进入上面找到的文件rt0_darwin_amd64.s(不同的架构文件是不同的)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  runtime ls rt0_*
rt0_aix_ppc64.s       rt0_darwin_amd64.s    rt0_freebsd_arm.s     rt0_linux_arm64.s     rt0_nacl_386.s        rt0_netbsd_arm64.s    rt0_plan9_amd64.s
rt0_android_386.s     rt0_darwin_arm.s      rt0_illumos_amd64.s   rt0_linux_mips64x.s   rt0_nacl_amd64p32.s   rt0_openbsd_386.s     rt0_plan9_arm.s
rt0_android_amd64.s   rt0_darwin_arm64.s    rt0_js_wasm.s         rt0_linux_mipsx.s     rt0_nacl_arm.s        rt0_openbsd_amd64.s   rt0_solaris_amd64.s
rt0_android_arm.s     rt0_dragonfly_amd64.s rt0_linux_386.s       rt0_linux_ppc64.s     rt0_netbsd_386.s      rt0_openbsd_arm.s     rt0_windows_386.s
rt0_android_arm64.s   rt0_freebsd_386.s     rt0_linux_amd64.s     rt0_linux_ppc64le.s   rt0_netbsd_amd64.s    rt0_openbsd_arm64.s   rt0_windows_amd64.s
rt0_darwin_386.s      rt0_freebsd_amd64.s   rt0_linux_arm.s       rt0_linux_s390x.s     rt0_netbsd_arm.s      rt0_plan9_386.s       rt0_windows_arm.s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;打开文件go/src/runtime/rt0_darwin_amd64.s:8
这里没有做什么就调了函数_rt0_amd64&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TEXT&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_rt0_amd64_darwin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;NOSPLIT&lt;/span&gt;,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 参数+返回值共8字节
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;JMP&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_rt0_amd64&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;然后在打断点看看_rt0_amd64在哪
在ams_amd64.s第15行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; b _rt0_amd64
Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; at 0x1049350: file /usr/local/go/src/runtime/asm_amd64.s, line 15.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里首先把参数放到DI，SI寄存器中，然后调用runtime.rt0_go，这就是进程初始化主要函数了
参数0放在DI通用寄存器
参数1放在SI通用寄存器
参数2放在DX通用寄存器
参数3放在CX通用寄存器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TEXT&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_rt0_amd64&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;NOSPLIT&lt;/span&gt;,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 参数+返回值共8字节
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// argc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;LEAQ&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;SI&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// argv
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;JMP&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rt0_go&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;然后跳转到runtime.rt0_go&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; b runtime.rt0_go
Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; at 0x1049360: file /usr/local/go/src/runtime/asm_amd64.s, line 89.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;23-初始化&#34;&gt;2.3 初始化&lt;/h2&gt;
&lt;p&gt;这个函数有点长，下面我们分段来看rt0_go这个函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化参数以及创建g0&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先将之前放入通用寄存器的参数放入AX，BX寄存器，然后调整栈顶指针(真SP寄存器)的位置，SP指针先减39，关于16字节向下对齐(因为CPU有一组 SSE 指令，这些指令中出现的内存地址必须是16的倍数)，然后把参数放到SP+16字节和SP+24字节处
&lt;strong&gt;golang的汇编有抽象出来的寄存器，通过是否有前缀变量区分真假寄存器，例如a+8(SP)就是golang的寄存器，8(SP)就是真的寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建g0，并初始化g.stackgruard0，g.stackguard1以及g.stack.lo，g.stack.hi的值(实际上是分配一段内存，然后分割成小段，约定哪小段表示哪个变量)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TEXT&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rt0_go&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;),&lt;span style=&#34;color:#a6e22e&#34;&gt;NOSPLIT&lt;/span&gt;,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// argc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;SI&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// argv
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;SUBQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 2args 2auto
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ANDQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化g0，g0就是go的第一个协程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 给g0分配栈空间大概64K
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LEAQ&lt;/span&gt;	(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// BX = SP - 64 * 1024 + 104
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g_stackguard0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// g0.g_stackguard0 = SP - 64 * 1024 + 104
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g_stackguard1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// g0.g_stackguard1 = SP - 64 * 1024 + 104
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;g_stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack_lo&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// g0.stack.lo = SP - 64 * 1024 + 104
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;g_stack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stack_hi&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// g0.stack.hi = SP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建完g0的内存分布&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/stack_0.png&#34; alt=&#34;stack_0&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后略过一段CPU型号检测和CGO初始化的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建m0&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建将m0.tls放入DI寄存器，然后调用runtime.settls将m0设置为线程私有变量(mac下什么也没干)，将m0与主线程绑定，然后对m0.tls进行存取操作验证是否能用，不能用就直接退出&lt;/li&gt;
&lt;li&gt;绑定m0和g0的关系，m0.g0 = g0，g0.m = m0&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 将m0与主线程绑定
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;LEAQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m_tls&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;DI&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 将m0的thread local store成员的地址到DI
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;settls&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 调用settls设置线程本地存储(mac 下settls什么都没做，线程已经设置好本地存储了)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 通过往TLS存0x123在判断tls[0]是不是0x123验证TLS是否可用，如果不可用就abort
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;get_tls&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x123&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m_tls&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CMPQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x123&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;JEQ&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PC&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;abort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt;:
	&lt;span style=&#34;color:#75715e&#34;&gt;// 把g0存入m0的本地存储tls[0]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;get_tls&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 将m0.tls[0]地址放入BX
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;LEAQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;CX&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 将g0地址放入CX
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CX&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BX&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// m0.tls[0] = &amp;amp;g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;LEAQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 将m0地址放入AX
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 将m0和g0建立映射关系
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// save m-&amp;gt;g0 = g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CX&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;m_g0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// m0.g0 = g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// save m0 to g0-&amp;gt;m
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;g_m&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;CX&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// g0.m = m0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CLD&lt;/span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;// convention is D is always left cleared
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建完m0之后的内存分布&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/stack_1.png&#34; alt=&#34;stack_1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m0和g0的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;m0表示主线程，g0表示主线程的第一个goroutine&lt;/li&gt;
&lt;li&gt;g0主要是记录主线程的栈信息，执行调度函数(schedule后边会讲)时会用，而用户goroutine有自己的栈，执行的时候会从g0栈切换到用户goroutine栈&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;初始化调度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;g0和m0都创建并初始化好了，下面就该进行调度初始化了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将参数放入AX(初始化g0时将参数放入SP+16和SP+24的位置&lt;/li&gt;
&lt;li&gt;runtime.args初始化参数的&lt;/li&gt;
&lt;li&gt;runtime.osinit是初始化CPU核数的&lt;/li&gt;
&lt;li&gt;重点看runtime.schedinit&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化m0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 将argc和argv入栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVL&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// copy argc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// copy argv
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SP&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 处理参数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取cpu的核数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;osinit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 调度系统初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;schedinit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;runtime.schedinit
下面函数省略了调度无关的代码，大概流程:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;设置最大线程数&lt;/li&gt;
&lt;li&gt;根据GOMAXPROCS设置procs(P的数量)&lt;/li&gt;
&lt;li&gt;调用procresizeprocs调整P的数量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;schedinit&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 取出g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;racectx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;raceprocctx0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;raceinit&lt;/span&gt;()
	}	

	&lt;span style=&#34;color:#75715e&#34;&gt;// 设置最大线程数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;maxmcount&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;
	
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;	

	&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化m0, 前边已经将m0和g0的关系绑定好了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 只是检查一下各种变量，然后将m0挂到allm链表中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mcommoninit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)

	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lastpoll&lt;/span&gt; = uint64(&lt;span style=&#34;color:#a6e22e&#34;&gt;nanotime&lt;/span&gt;())
	&lt;span style=&#34;color:#75715e&#34;&gt;// ncpu在osinit时已经获取
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;procs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ncpu&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果GOMAXPROCS设置并且合法就将procs的设置为GOMAXPROCS
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atoi32&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gogetenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GOMAXPROCS&amp;#34;&lt;/span&gt;)); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;procs&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;procresize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;procs&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unknown runnable goroutine during bootstrap&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;	
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;runtime.procresize&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调度初始化最后一步&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;更新最后一次修改P数量动作的时间戳并累加花费时间&lt;/li&gt;
&lt;li&gt;根据nprocs调整P的数量(加锁)
&lt;ol&gt;
&lt;li&gt;nprocs &amp;gt; 现有P数量，就扩展allp(p的全局数组)的长度为nprocs&lt;/li&gt;
&lt;li&gt;nprocs &amp;lt; 现有P数量，就缩容allp的长度为nprocs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果上一步是扩容了，就从堆中创建新P，并把P放入扩容出来的位置&lt;/li&gt;
&lt;li&gt;通过g0找到m0，然后将allp[0]和m0绑定&lt;/li&gt;
&lt;li&gt;如果allp缩容了，就将多余的p销毁&lt;/li&gt;
&lt;li&gt;将空闲的p加入空闲链表
到目前为止，创建了m0，g0，和nprocs个P，但是还是没有让调度真正的跑起来&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;procresize&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;old&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gomaxprocs&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;old&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;procresize: invalid arg&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGomaxprocs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// update statistics
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nanotime&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;procresizetime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;totaltime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; int64(&lt;span style=&#34;color:#a6e22e&#34;&gt;old&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;procresizetime&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;procresizetime&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; &amp;gt; int32(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;)) { &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化的len(allp) == 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allpLock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; int32(cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;)) { &lt;span style=&#34;color:#75715e&#34;&gt;// 需要缩容
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;]
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 扩容
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;nallp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;)
			&lt;span style=&#34;color:#75715e&#34;&gt;// Copy everything up to allp&amp;#39;s cap so we
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// never lose old allocated Ps.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			copy(&lt;span style=&#34;color:#a6e22e&#34;&gt;nallp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[:cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;)])
			&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;nallp&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allpLock&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;old&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt; = new(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;atomicstorep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]), &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;))
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// 获取g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 进程初始化时g0.m与p没有绑定，所以g0.m.p == 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_Prunning&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;mcache&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareForSweep&lt;/span&gt;()
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoSched&lt;/span&gt;()
				&lt;span style=&#34;color:#a6e22e&#34;&gt;traceProcStop&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;())
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mcache&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_Pidle&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;acquirep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 把allp[0]和m0关联起来
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoStart&lt;/span&gt;()
		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果有需要销毁的p，就是销毁
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;old&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;destroy&lt;/span&gt;()
		&lt;span style=&#34;color:#75715e&#34;&gt;// can&amp;#39;t free P itself because it can be referenced by an M in syscall
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int32(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allpLock&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;allpLock&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 将空闲p放入空闲链表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runnablePs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allp&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// allp[0]已经和m0关联了，所以不用放入空闲链表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_Pidle&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runqempty&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;pidleput&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mget&lt;/span&gt;())
			&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;link&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;runnablePs&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;runnablePs&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;stealOrder&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;(uint32(&lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int32p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gomaxprocs&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// make compiler check that gomaxprocs is an int32
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;((&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;int32p&lt;/span&gt;)), uint32(&lt;span style=&#34;color:#a6e22e&#34;&gt;nprocs&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runnablePs&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.4 创建&amp;quot;第一个&amp;quot;goroutine&lt;/p&gt;
&lt;p&gt;我们返回runtime·rt0_go接着看&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将runtime.main地址放入AX&lt;/li&gt;
&lt;li&gt;参数AX, 0入栈(函数参数入栈由右向左)&lt;/li&gt;
&lt;li&gt;然后调用runtime.newproc创建goroutine&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// create a new goroutine to start program
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 创建第一个goroutine执行runtime.main，源码里没搜到runtime.mainPC，在schedinit函数前注释里找到的runtime.mainPC就是runtime.main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mainPC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// entry AX = func(runtime.main)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;PUSHQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;PUSHQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// arg size runtime.main没有参数所以入栈0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newproc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;// 创建goroutine执行runtime.main(还没执行，只是将goroutine加入待运行队列)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;POPQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;// 出栈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;POPQ&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;// 出栈
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;newproc&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;首先获取参数地址&lt;/li&gt;
&lt;li&gt;获取当前所在goroutine(初始化时runtime代码都在g0执行)&lt;/li&gt;
&lt;li&gt;获取要执行指令地址&lt;/li&gt;
&lt;li&gt;在gp的栈上执行runtime.newproc1(在g0栈上执行)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newproc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;siz&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;funcval&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取函数fn的第一个参数的位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;argp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PtrSize&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前所有goroutine ---- g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取要执行指令的位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getcallerpc&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	systemstack是将函数切换到g0的栈上运行，初始化时本来就在g0的栈上，所以直接调用函数返回
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newproc1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;, (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;argp&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;siz&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;)
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;newproc1函数主要的工作
这个函数有点长分段来看&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;首先获得当前所在goroutine(g0)&lt;/li&gt;
&lt;li&gt;禁止抢占&lt;/li&gt;
&lt;li&gt;计算参数位置&lt;/li&gt;
&lt;li&gt;计算下参数是否过大&lt;/li&gt;
&lt;li&gt;获取当前goroutine所在m的p，前边讲过g0对应的m是m0，m0对应的p是allp[0]&lt;/li&gt;
&lt;li&gt;创建一个goroutine(先从p的缓存里找，找不到就new一个)，并且确认goroutine栈边界是初始化好的(方式p缓存里的goroutine参数没初始化)&lt;/li&gt;
&lt;li&gt;计算栈顶的地址，如果有参数就将参数放到新创建的这个goroutine上&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newproc1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;funcval&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;argp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;narg&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;callergp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前所在goroutine，初始化的是g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;throwing&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// do not dump full stacks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go of nil func value&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 禁止抢占，把p固定在本地变量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;acquirem&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// disable preemption because it can be holding p in a local var
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;siz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;narg&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;siz&lt;/span&gt; = (&lt;span style=&#34;color:#a6e22e&#34;&gt;siz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 检查一下参数是否需要空间是否过大，参数大小 和 栈大小 - (额外栈底空间(猜的)) - 返回需要的栈大小
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;siz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_StackMin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegSize&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newproc: function arguments too large for new goroutine&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// _p_ = allp[0]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 从_p_的缓存中取一个g，初始化的时候没有可用的g所以newg==nil
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gfget&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// 创建一个新g，栈空间2k, 并且给stack,stackguard0,stackguard1初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;malg&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_StackMin&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// 将g的状态设置为_Gdead
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gidle&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gdead&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// 将g加入allg链表
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;allgadd&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// publishes with a g-&amp;gt;status of Gdead so GC scanner doesn&amp;#39;t look at uninitialized stack.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 确认刚才的初始化是否有效
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newproc1: newg missing stack&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gdead&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newproc1: new g is not Gdead&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 省略一段调整sp指针的函数，并且如果有参数就将参数放入new goroutine的栈中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置各个寄存器的值(在cpu上恢复上下文时使用)
1) 清理sched
2) 设置栈顶置针位置
3) 设置pc寄存器值(goexit函数第二条指令，常理应该是goroutine本身函数的第一条指令，这个妙用后边说)
4) 设置goroutine地址
5) 调用gostartcallfn，参数是sched和goroutine的参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 清理sched(各参数清零)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;memclrNoHeapPointers&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sizeof&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;))
	&lt;span style=&#34;color:#75715e&#34;&gt;// 设置sched, 在CPU上运行的相关参数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stktopsp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 设置pc，被调度时第一条指令的位置，将pc设置为goexit函数一个偏移量的位置(goexit函数第二条指令)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 这里把pc设置为goexit函数的第二条指令的作用就是，伪装成goexit函数调用的fn函数，当fn执行完跳回goexit函数继续做退出需要的操作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;funcPC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;goexit&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PCQuantum&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// +PCQuantum so that previous instruction is in same function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;guintptr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gostartcallfn&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;判断一下goroutine的函数是否为空，然后调用gostartcall&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gostartcallfn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gobuf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gobuf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;funcval&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;)
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funcPC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nilfunc&lt;/span&gt;))
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gostartcall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gobuf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fv&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;获取sp，现在新goroutine的栈上之后本身的函数，sp指向函数的第一个参数&lt;/li&gt;
&lt;li&gt;将sp指向pc里面的指令地址，也就是goexit的第二条指令，然后重新设置新goroutinesp地址&lt;/li&gt;
&lt;li&gt;这时候pc才指向goroutine自己的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;gostartcall的主要作用就是将goexit入栈，然后设置goroutine的pc指向自身函数，伪装成是goexit调用的自身函数，当自身函数执行完时返回goexit清理线程，大概就是下面这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;goexit&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;goroutine自身函数&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;清理现场&lt;/span&gt;()	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gostartcall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gobuf&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ctxt&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegSize&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PtrSize&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PtrSize&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)) = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 预留返回值空间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PtrSize&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// sp指向pc指令的位置，前边已经将goexit第二条指令的地址放入pc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)) = &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt; 
	&lt;span style=&#34;color:#75715e&#34;&gt;// 然后设置sp
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 这时候的pc才是goroutine的函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt; = uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ctxt&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;ctxt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后再回到newproc函数，剩下的就是设置goroutine的状态，然后把goroutine放入p的待执行队列中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;gopc&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 用于traceback
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ancestors&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;saveAncestors&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;callergp&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// newg的函数从哪里开始执行依赖于sched.pc 不依赖于startpc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;startpc&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;curg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;labels&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;curg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;labels&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isSystemGoroutine&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Xadd&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ngsys&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;gcscanvalid&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 设置newg状态为_Grunnable, 到这里newg就可以运行了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gdead&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunnable&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcacheend&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcache&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Xadd64&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidgen&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_GoidCacheBatch&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_GoidCacheBatch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcacheend&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_GoidCacheBatch&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goid&lt;/span&gt; = int64(&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcache&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goidcache&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;raceenabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;racectx&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;racegostart&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;callerpc&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoCreate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;startpc&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 将newg加入p的待运行队列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runqput&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_p_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newg&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;npidle&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nmspinning&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mainStarted&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;wakep&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 取消m的固定
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;releasem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总结一下创建第一个goroutine执行runtime.main的过程(只是创建啊，整个调度这时候还是没有跑起来)
&lt;img src=&#34;https://journey-c.github.io/images/creat_goroutine_main.png&#34; alt=&#34;create_goroutine_main&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;24-调度循环&#34;&gt;2.4 调度循环&lt;/h2&gt;
&lt;p&gt;我们再返回runtime·rt0_go继续看，总结一下到目前为止已经准备好的事情&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将m0与主线程绑定了(将m0结构体设为主线程的私有变量)&lt;/li&gt;
&lt;li&gt;创建了g0，并且与m0绑定&lt;/li&gt;
&lt;li&gt;创建了procs个p并且初始化，将allp[0]与m0绑定，形成初步的GMP模型(g0,m0,p0)&lt;/li&gt;
&lt;li&gt;创建了一个执行runtime.main(不是代码里的main.main，runtime.main会做加载init函数等操作然后调用main.main)的goroutine并且放入了p0的待运行队列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来就是调度循环了，调用runtime.mstart，这个函数就是调度循环，除非程序退出否则永远阻塞住&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// start this M
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 运行runtime.mstart这个函数会阻塞住，运行结束的时候就是程序退出的时候
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mstart&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;CALL&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;abort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;)	&lt;span style=&#34;color:#75715e&#34;&gt;// mstart should never return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;RET&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Prevent dead-code elimination of debugCallV1, which is
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// intended to be called by debuggers.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;MOVQ&lt;/span&gt;	&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;·&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;debugCallV1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;SB&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;AX&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;RET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;runtime.mstart&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;获取了当前所在goroutine(初始化时代码都是在g0上执行的)&lt;/li&gt;
&lt;li&gt;初始化栈保护&lt;/li&gt;
&lt;li&gt;调用mstart1
go/src/runtime/proc.go, line 1146&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mstart&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// 获取g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;osStack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// g0.stack.lo在前边已经初始化过了，所以osStack = false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;osStack&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sys&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StackGuardMultiplier&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt; = uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;noescape&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lo&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化栈保护
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_StackGuard&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard1&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// 开始m0开始运行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mstart1&lt;/span&gt;()

	&lt;span style=&#34;color:#75715e&#34;&gt;// Exit this thread.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GOOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GOOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;solaris&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GOOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;illumos&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GOOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plan9&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GOOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;darwin&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GOOS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aix&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;osStack&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mexit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;osStack&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;runtime.mstart1&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;保存g0的指令指针和栈指针，保存这两个值是理解调度循环的关键，mstart1执行完之后，g0继续执行指令，不会再返回来了，保存了指令和栈指针之后，g0要继续执行指令的时候，就会又从上面开始执行&lt;/li&gt;
&lt;li&gt;做一些初始化工作&lt;/li&gt;
&lt;li&gt;调用schedule开始调度&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mstart1&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前goroutine g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;g0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad runtime·mstart&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// save函数保存了g0再次运行时(循环调度下一次回头)调度相关信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;getcallerpc&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;getcallersp&lt;/span&gt;())
	&lt;span style=&#34;color:#75715e&#34;&gt;// asminit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;asminit&lt;/span&gt;()
	&lt;span style=&#34;color:#75715e&#34;&gt;// 信号相关初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;minit&lt;/span&gt;()

	&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化时m == m0，mstartm0也是信号相关的初始化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;mstartm0&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化时fn == ni
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mstartfn&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;acquirep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nextp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nextp&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 开始调度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;schedule&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;runtime.schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调度开始了，m要找gorutine放到cpu上执行了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每调度61次(具体为啥是61有待思考)，就从全局的goroutine列表中选goroutine&lt;/li&gt;
&lt;li&gt;如果上一步没找到，就从m对应的p的缓存里找&lt;/li&gt;
&lt;li&gt;如果上一步还没有找到，就调findrunnable从其他线程窃取goroutine，如果发现有就窃取一半放到自己的p缓存中，如果都没有就说明真的没有待运行的goroutine了，就陷入睡眠一直阻塞在findrunnable函数，等待被唤醒&lt;/li&gt;
&lt;li&gt;直到有goroutine需要执行了，就调用execute执行goroutine&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;schedule&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获得g0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;schedule: holding locks&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lockedg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stoplockedm&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lockedg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Never returns.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;incgo&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;schedule: in cgo&amp;#34;&lt;/span&gt;)
	}

&lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;:
	&lt;span style=&#34;color:#75715e&#34;&gt;// 等待gc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;gcwaiting&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gcstopm&lt;/span&gt;()
		&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;runSafePointFn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;runSafePointFn&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inheritTime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;tryWakeP&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdown&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;traceReader&lt;/span&gt;()
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gwaiting&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunnable&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoUnpark&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;tryWakeP&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcBlackenEnabled&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;gcController&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;findRunnableGCWorker&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;tryWakeP&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;tryWakeP&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 先从全局队列中获取，每61次调度都会从全局队列中获取goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;schedtick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;runqsize&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;globrunqget&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果还空就从本地队列中获取
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inheritTime&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;runqget&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;())
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;spinning&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;schedule: spinning with local work&amp;#34;&lt;/span&gt;)
		}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// 如果本地也没有就调用findrunnable从其他线程偷一个过来，直到偷过来在运行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inheritTime&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;findrunnable&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// blocks until work is available
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;spinning&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;resetspinning&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;disable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;schedEnabled&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;schedEnabled&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;disable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;runnable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pushBack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;disable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryWakeP&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;npidle&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;nmspinning&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;wakep&lt;/span&gt;()
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lockedm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;startlockedm&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;
	}
	
	&lt;span style=&#34;color:#75715e&#34;&gt;// 执行这个goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;inheritTime&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;25-触发调度&#34;&gt;2.5 触发调度&lt;/h2&gt;
&lt;p&gt;触发调度地方大致有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主动挂起&lt;/li&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;协作式调度&lt;/li&gt;
&lt;li&gt;正常退出&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;proc.go:1208 runtime.mstart1(调度开始)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主动挂起&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc.go:2610 runtime.park_m
在上一章内容里讲过&lt;a href=&#34;https://www.cnblogs.com/wuwangchuxin0924/p/13022386.html&#34;&gt;golang channel源码阅读&lt;/a&gt;，当goroutine接收一个channel为空且为阻塞的时候，goroutine会调用goparkunlock使goroutine陷入睡眠，等待send端调用goready函数唤醒函数，主动挂起就是这种情况，当goroutine由于某些条件在等待时，就会主动挂起，不放回待运行队列，等待被唤醒&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各种阻塞条件 -&amp;gt; runtime.gopark() -&amp;gt; runtime.park_m() -&amp;gt; runtime.schedule&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前所在m，并且固定m&lt;/li&gt;
&lt;li&gt;获取当前程序所在goroutine&lt;/li&gt;
&lt;li&gt;设置锁状态以及阻塞原因&lt;/li&gt;
&lt;li&gt;调用runtime.park_m挂起goroutine&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gopark&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unlockf&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reason&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReason&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEv&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;traceskip&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reason&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;waitReasonSleep&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;checkTimeouts&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// timeouts may expire while two goroutines keep the scheduler busy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquirem&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;curg&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunning&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gscanrunning&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gopark: bad g status&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlock&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitunlockf&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;unlockf&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitreason&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;reason&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waittraceev&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;traceEv&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waittraceskip&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;traceskip&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;releasem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mp&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;// can&amp;#39;t do anything that might move the G between Ms here.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mcall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;park_m&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;获取当前goroutine&lt;/li&gt;
&lt;li&gt;将goroutine状态设置为Gwaiting&lt;/li&gt;
&lt;li&gt;重新调度&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;park_m&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoPark&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waittraceev&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waittraceskip&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunning&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gwaiting&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dropg&lt;/span&gt;()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitunlockf&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlock&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitunlockf&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitlock&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoUnpark&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
			}
			&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gwaiting&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunnable&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Schedule it back, never returns.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;schedule&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;协作式调度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc.go:2625 runtime.goschedImpl(协作式调度)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;主动让出cpu，这个情况不会挂起goroutine，而是放回队列，等待下次调度，这个函数(GoSched)被暴露出去，可以调用，例如，线上有这种情况，写log是异步的，但由于机器磁盘老旧性能不佳，所以当log goroutine运行时还是会过多的占用cpu，这时候可以调用GoSched适当降低当前goroutine优先级&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;runtime.Gosched -&amp;gt; runtime.gosched_m -&amp;gt; runtime.goschedImpl runtime.schedule&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Gosched continuation on g0.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gosched_m&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoSched&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;goschedImpl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;调度保护，当调度器发现goroutine处于禁止的状态时就会主动调度让出cpu&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// goschedguarded is a forbidden-states-avoided version of gosched_m
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;goschedguarded_m&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;) {

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mallocing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;preemptoff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Prunning&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;gogo&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// never return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoSched&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;goschedImpl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;发生抢占，例如当一个goroutine运行时间过长但不像等待channel那样阻塞，一直有事情做时，其他goroutine可能会抢占cpu&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gopreempt_m&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoPreempt&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;goschedImpl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;goschedImpl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;^&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_Gscan&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunning&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;dumpgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bad g status&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunning&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunnable&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dropg&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;globrunqput&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gp&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;schedule&lt;/span&gt;()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非main goroutine结束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc.go:2704,2727 runtime.goexit0(goroutine正常执行完)
非main goroutine结束后会继续调度，这个是正常继续下一次调度不做过多介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc.go:3141 runtime.exitsyscall0(系统调用)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;runtime·exitsyscall -&amp;gt; runtime·exitsyscall0 -&amp;gt; runtime.schedule&lt;/p&gt;
&lt;p&gt;我们来看下系统调用的过程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall_syscall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a3&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;r1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;entersyscall&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;libcCall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funcPC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;)), &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Pointer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fn&lt;/span&gt;))
	&lt;span style=&#34;color:#a6e22e&#34;&gt;exitsyscall&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;syscall&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先会调用runtime.entersyscall获取当前的指令位置和栈指针，然后调用reentersyscall做goroutine进入系统调用之前的准备&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;entersyscall&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;reentersyscall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;getcallerpc&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;getcallersp&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;禁止线程抢占防止出现栈不一致的情况&lt;/li&gt;
&lt;li&gt;保证当前函数不会触发栈调整(golang进程的栈初始2k，然后动态调整)&lt;/li&gt;
&lt;li&gt;设置goroutine状态为Gsyscall&lt;/li&gt;
&lt;li&gt;将goroutine的P暂时和M分离，并且设置P状态为Psyscall&lt;/li&gt;
&lt;li&gt;释放锁&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reentersyscall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 获得当前goroutine
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;stackPreempt&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;throwsplit&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Leave SP around for GC and traceback.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallpc&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunning&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gsyscall&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
			print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entersyscall inconsistent &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lo&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]\n&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entersyscall&amp;#34;&lt;/span&gt;)
		})
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoSysCall&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Load&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sysmonwait&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;entersyscall_sysmon&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;runSafePointFn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;runSafePointFn&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sysblocktraced&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mcache&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Psyscall&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;gcwaiting&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;entersyscall_gcwait&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就进入系统调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;获得goroutine&lt;/li&gt;
&lt;li&gt;线程加锁&lt;/li&gt;
&lt;li&gt;调exitsyscallfast替当前goroutine找一个P
&lt;ol&gt;
&lt;li&gt;如果原P处于Psyscall就让这个P接管，否则的话进行2)&lt;/li&gt;
&lt;li&gt;否则的话就找空闲的P，有的话就调用exitsyscall0继续调度，否则的话进行3)&lt;/li&gt;
&lt;li&gt;将goroutine设置为Grunning，加入全局队列，调用Gosched()继续调度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exitsyscall&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getg&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// see comment in entersyscall
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getcallersp&lt;/span&gt;() &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exitsyscall: syscall frame is no longer valid&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;waitsince&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exitsyscallfast&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mcache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lost mcache&amp;#34;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;systemstack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;traceGoStart&lt;/span&gt;)
			}
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// There&amp;#39;s a cpu for us, so we can run.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// We need to cas the status and scan before resuming...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;casgstatus&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Gsyscall&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_Grunning&lt;/span&gt;)

		&lt;span style=&#34;color:#75715e&#34;&gt;// Garbage collector isn&amp;#39;t running (since we are),
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// so okay to clear syscallsp.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;preempt&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// restore the preemption request in case we&amp;#39;ve cleared it in newstack
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;stackPreempt&lt;/span&gt;
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// otherwise restore the real _StackGuard, we&amp;#39;ve spoiled it in entersyscall/entersyscallblock
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stackguard0&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stack&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_StackGuard&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;throwsplit&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sched&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;disable&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;schedEnabled&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;) {
			&lt;span style=&#34;color:#75715e&#34;&gt;// Scheduling of this goroutine is disabled.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;Gosched&lt;/span&gt;()
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sysexitticks&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// Wait till traceGoSysBlock event is emitted.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// This ensures consistency of the trace (the goroutine is started after it is blocked).
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oldp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;osyield&lt;/span&gt;()
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// We can&amp;#39;t trace syscall exit right now because we don&amp;#39;t have a P.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// Tracing code can invoke write barriers that cannot run without a P.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// So instead we remember the syscall exit time and emit the event
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// in execute when we have a P.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sysexitticks&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cputicks&lt;/span&gt;()
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;locks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Call the scheduler.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;mcall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;exitsyscall0&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mcache&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;throw&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lost mcache&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Scheduler returned, so we&amp;#39;re allowed to run now.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Delete the syscallsp information that we left for
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// the garbage collector during the system call.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Must wait until now because until gosched returns
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// we don&amp;#39;t know for sure that the garbage collector
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// is not running.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syscallsp&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;syscalltick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_g_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;throwsplit&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/abozhang/p/10766628.html&#34;&gt;参考资料go语言调度器源代码情景分析&lt;/a&gt;&lt;/p&gt;
</description>
  </item>
  
</channel>
</rss>
