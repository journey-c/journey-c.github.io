<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>黑科技 on Journey-C</title>
  <link>https://journey-c.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/</link>
  <description>Recent content in 黑科技 on Journey-C</description>
  <generator>Hugo -- gohugo.io</generator>
  
  <language>en-us</language>
  
  
  
  
  <lastBuildDate>Wed, 28 Oct 2020 20:58:31 +0800</lastBuildDate>
  
      <atom:link href="https://journey-c.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/index.xml" rel="self" type="application/rss+xml" />
  
  
  <item>
    <title>关于2的n次幂对齐</title>
    <link>https://journey-c.github.io/regarding-the-n-th-power-alignment-of-2/</link>
    <pubDate>Wed, 28 Oct 2020 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/regarding-the-n-th-power-alignment-of-2/</guid>
    <description>&lt;h1 id=&#34;1-应用场景&#34;&gt;1. 应用场景&lt;/h1&gt;
&lt;p&gt;内存对齐时基本都会求关于n位对齐的向上取整&lt;/p&gt;
&lt;h1 id=&#34;2-讲解&#34;&gt;2. 讲解&lt;/h1&gt;
&lt;p&gt;go1.13.8 中channel源码中有这样一个变量&lt;a href=&#34;https://github.com/golang/go/blob/885099d1550dad8387013c8f35ad3d4ad9f17c66/src/runtime/chan.go#L28&#34;&gt;hchansize&lt;/a&gt;用来表示hchan(channel对应的实际结构体)所需大小(申请内存空间时，是根据hchansize给hchan申请对应大小的内存空间)，这个变量的值大概就是hchan的size关于maxAlign向上取整下一个较大倍数，看到源码实现时，就感觉真是怪物。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hchanSize&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sizeof&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;{}) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; uintptr(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;int(&lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sizeof&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hchan&lt;/span&gt;{}))&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxAlign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了方便将上述表达式简化为 n + ( (-n) &amp;amp; (a - 1))，n是unsafe.Sizeof(hchan{})，a是maxAlign。等价于 n + (a - (n % a))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;( (-n) &amp;amp; (a - 1) ) 等价 a - (n % a) ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向上取整的问题实际可以转化为求出n距离下一个a的倍数差多少，然后n加上这个数就可以。&lt;/p&gt;
&lt;p&gt;当a为$2^n$时，n % a可以转化为 n &amp;amp; (a - 1)，取模运算就变成了n与(a - 1) AND时能留下多少个1。&lt;/p&gt;
&lt;p&gt;计算机实际计算时是以&lt;a href=&#34;https://www.cnblogs.com/wuwangchuxin0924/p/5851067.html&#34;&gt;补码&lt;/a&gt;进行运算的，-n转化为补码，符号位不变其他位取反转化为反码，然后最低位+1转化为补码，下面分两步讲。&lt;/p&gt;
&lt;p&gt;以n = 3, a = 8为例(实际计算时是8字节，下面用一字节举例):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;原码: -n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0011&lt;/span&gt;
反码: -n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1111&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1100&lt;/span&gt;
此时&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;-n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a - 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;实际为 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a - 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; - n % a，而咱们要求的是a - &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n % a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
补码：-n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1111&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1101&lt;/span&gt;
因为-n的反码变补码时最低位要+1，所以刚好&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a - 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; - n % a + 1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a - &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n % a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以( (-n) &amp;amp; (a - 1) ) 等价 a - (n % a)&lt;/p&gt;
</description>
  </item>
  
</channel>
</rss>
