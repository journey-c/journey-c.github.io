<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>操作系统 on Journey-C</title>
  <link>https://journey-c.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
  <description>Recent content in 操作系统 on Journey-C</description>
  <generator>Hugo -- gohugo.io</generator>
  
  <language>en-us</language>
  
  
  
  
  <lastBuildDate>Fri, 27 Nov 2020 20:58:31 +0800</lastBuildDate>
  
      <atom:link href="https://journey-c.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
  
  
  <item>
    <title>系统调用</title>
    <link>https://journey-c.github.io/what-is-system-call/</link>
    <pubDate>Fri, 27 Nov 2020 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/what-is-system-call/</guid>
    <description>&lt;h1 id=&#34;1-简介&#34;&gt;1 .简介&lt;/h1&gt;
&lt;p&gt;系统调用就是操作系统提供给用户态应用与硬件交互的一组接口。在用户空间和硬件之间添加一个中间层(系统调用)主要的作用有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为用户空间提供抽象接口，用户不需要关心硬件种类介质等。&lt;/li&gt;
&lt;li&gt;保障系统的稳定和安全，避免用户错误的使用硬件危害系统或者窃取其他进程的资源。&lt;/li&gt;
&lt;li&gt;由于Linux进程都是运行在虚拟系统中，如果操作系统对用户访问硬件一无所知，就几乎无法实现多任务和虚拟内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/unix_arch.jpeg&#34; alt=&#34;unix_arch&#34;&gt;&lt;/p&gt;
&lt;div&gt;
	&lt;center&gt;图片来源&lt;a href=&#34;https://www.amazon.com/Advanced-Programming-UNIX-Environment-3rd/dp/0321637739&#34;&gt;《Advanced Programming in the UNIX Environment, 3rd Edition》&lt;/a&gt;&lt;/center&gt;
&lt;/div&gt;
&lt;h1 id=&#34;2-三种使用系统调用方式&#34;&gt;2. 三种使用系统调用方式&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/syscall_method.png&#34; alt=&#34;syscall_method&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;21-软件中断&#34;&gt;2.1 软件中断&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/interrupt.png&#34; alt=&#34;interrupt&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有外界打扰的情况下处理器会一直执行给定指令，中断就是打断处理器的执行并且告诉他先执行另一段指令，执行完毕再接着执行中断前的指令。从中断指令发出的对象可以分为硬件中断和软件中断。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件中断就是硬件通过传输电信号到中断控制器的输入引脚，中断控制器收到电信号之后会给处理器发送一个电信号，处理器一经检测到电信号之后就中断当前工作转而处理中断。之后会通知操作系统已经产生中断，进而操作系统可以处理这个中断了。&lt;/li&gt;
&lt;li&gt;软件中断就是处理器执行特定指令时触发的中断，之后也会通知操作系统。&lt;/li&gt;
&lt;li&gt;除了系统调用，还有中断下半部tasklet也是用软件中断实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在x86的机器上可以使用$INT$指令触发软件中断，Linux早期的时候就是使用软件中断来处理系统调用，中断号为128。
软件中断执行系统调用的流程为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户将中断号放入$eax$寄存器，前六个参数按顺序放入$ebx$、$ecx$、$edx$、$esi$、$edi$、$ebp$寄存器，六个以上的情况，需要把所有参数放在用户空间的一段连续内存中(类似用struct传参)，然后将指向该内存区域的指针放入$ebx$中。&lt;/li&gt;
&lt;li&gt;执行$int$ 0x80指令，处理器在中断向量表(&lt;a href=&#34;https://en.wikipedia.org/wiki/Interrupt_descriptor_table&#34;&gt;IDT&lt;/a&gt;)中查找对应的中端处理程序，执行中断处理程序(操作系统由ring3进入ring0)&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_32.S#L1052&#34;&gt;entry_INT80_32&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;a. 调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_32.S#L1056&#34;&gt;SAVE_ALL&lt;/a&gt;将当前上下文保存到内核栈，然后调用&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L84&#34;&gt;do_int80_syscall_32&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;b. &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L84&#34;&gt;do_int80_syscall_32&lt;/a&gt; 从用户空间进入内核空间然后调用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L72&#34;&gt;do_syscall_32_irqs_on&lt;/a&gt;，退出内核空间返回用户空间。&lt;/li&gt;
&lt;li&gt;c. &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/common.c#L72&#34;&gt;do_syscall_32_irqs_on&lt;/a&gt; 检查系统调用号，从系统调用表&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/syscall_32.c#L18&#34;&gt;ia32_sys_call_table&lt;/a&gt; &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/syscalls/syscall_32.tbl&#34;&gt;syscall_32.tbl&lt;/a&gt;中找出对应函数，并且将参数传给对应系统调用函数，唤起软件中断，将返回值放入$eax$寄存器。&lt;/li&gt;
&lt;li&gt;d. 从内核栈恢复上下文。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/interrupt_call.png&#34; alt=&#34;interrupt_call&#34;&gt;
下面就是一个通过软件中断调用write系统调用的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;global _start

section .text
_start:
    mov eax,4      ; system call number
    mov ebx,1      ; args 1: fd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;STDOUT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    mov ecx,msg    ; args 2: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;
    mov edx,msglen ; args 3: len&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    int 0x80       ; soft interrupt
    mov eax,1      ; syscall exit number
    mov ebx,0      ; args 1: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;exit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
    int 0x80       ; soft interrupt

section .rodata
    msg: db &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    msglen: equ $ - msg 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nasm -g -f elf64 -o sys_call.o sys_call.s
ld -o sys_call sys_call.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;22-汇编指令&#34;&gt;2.2 汇编指令&lt;/h2&gt;
&lt;p&gt;由于中断实现的系统调用在个别处理器上表现非常差，Linux在较新版本上使用了intel和amd上实现的快速系统调用指令syscall/sysret(64)和sysenter/sysexit(32)。这也是目前最常用的系统调用方式。
&lt;img src=&#34;https://journey-c.github.io/images/asm.png&#34; alt=&#34;asm&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体流程为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cpu初始化&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/kernel/cpu/common.c#L1869&#34;&gt;cpu_init&lt;/a&gt; 调用 &lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/kernel/cpu/common.c#L1702&#34;&gt;syscall_init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/kernel/cpu/common.c#L1702&#34;&gt;syscall_init&lt;/a&gt; 将系统调用处理函数&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_64.S#L95&#34;&gt;entry_SYSCALL_64&lt;/a&gt;和&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/entry_32.S#L903&#34;&gt;entry_SYSENTER_32&lt;/a&gt;注册到&lt;a href=&#34;https://en.wikipedia.org/wiki/Model-specific_register&#34;&gt;MSR&lt;/a&gt;寄存器，&lt;a href=&#34;https://en.wikipedia.org/wiki/Model-specific_register&#34;&gt;MSR&lt;/a&gt;寄存器是用于控制CPU运行、功能开关、调试、跟踪程序执行、监测CPU性能等方面的寄存器。&lt;/li&gt;
&lt;li&gt;触发系统调用后，它会在&lt;a href=&#34;https://en.wikipedia.org/wiki/Model-specific_register&#34;&gt;MSR&lt;/a&gt;中读取需要执行的函数然后执行。&lt;/li&gt;
&lt;li&gt;剩余流程和软件中断方式差不多。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/asm_call.png&#34; alt=&#34;asm_call&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;23-vdos&#34;&gt;2.3 vDOS&lt;/h2&gt;
&lt;p&gt;Linux平台的用户使用系统调用的方式大多是通过&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;, 由于&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;库要兼容BSD，SysV Windows等平台，所以每当Linux新增系统调用时，&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;库都要间隔一段时间才会支持。并且有的用户升级Linux时并不会顺带升级&lt;a href=&#34;https://www.gnu.org/software/libc/&#34;&gt;libc&lt;/a&gt;，导致双方都带有沉重历史包袱。&lt;/p&gt;
&lt;p&gt;后来Linux实现了快速系统调用vsyscall，内核提供.so通过动态链接直接map到进程空间里供用户使用，但是vsyscall有一个风险点——map 的起始地址固定（0xffffffffff600000)，有潜在的安全风险。&lt;/p&gt;
&lt;p&gt;为了改善vsyscall的局限性，设计了&lt;a href=&#34;https://en.wikipedia.org/wiki/VDSO&#34;&gt;vDSO&lt;/a&gt;。但为了兼容vsyscall现在还保留着。&lt;/p&gt;
&lt;p&gt;vDSO利用&lt;a href=&#34;https://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;ASLR&lt;/a&gt;增强里安全性，随机地址。&lt;/p&gt;
&lt;p&gt;可以看到Linux中的进程大多包含vDSO的动态库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ ldd /bin/cat 
	linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffc03be0000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f52236dd000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	/lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f5223aa7000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是并不存在实际的.so文件，vsyscall以及vDOS将系统调用变为函数调用，并把他们映射到用户空间，明显的提高了系统调用的性能。
Linux 2.6时，vsyscall就支持了clock_gettime, gettimeofday, time。&lt;a href=&#34;https://github.com/torvalds/linux/blob/bbf5c979011a099af5dc76498918ed7df445635b/arch/x86/entry/vdso/vdso.lds.S&#34;&gt;vdso.lds.S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/vdso.jpeg&#34; alt=&#34;vdso&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到这里的时候突然想到，刚参加工作的时候一位前辈和我说获取时间可以不使用系统调用，当时一脸懵逼，现在想想确实知道的太少。一些知识不是需要多高的智商才能学到，而是就摆在那，看了就不知道，不看就不知道。&lt;/p&gt;
&lt;h1 id=&#34;3-总结&#34;&gt;3. 总结&lt;/h1&gt;
&lt;p&gt;系统调用是用户和硬件交互的媒介&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软中断实现是最初Linux实现系统调用方式，但现在还有使用的方式，例如golang在一些架构上系统调用还是使用软中断的方式，因为golang团队在做基准测试的时候发现，软中断方式和快速指令方式效率差不多。&lt;a href=&#34;https://go-review.googlesource.com/c/go/+/16996/&#34;&gt;runtime, syscall: use int $0x80 to invoke syscalls on android/386&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;快速汇编指令，intel和amd专门用于系统调用的指令。&lt;/li&gt;
&lt;li&gt;vsyscall和vDSO通过动态库的方式。&lt;/li&gt;
&lt;/ol&gt;
</description>
  </item>
  
</channel>
</rss>
