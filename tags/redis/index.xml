<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
  <title>Redis on Journey-C</title>
  <link>https://journey-c.github.io/tags/redis/</link>
  <description>Recent content in Redis on Journey-C</description>
  <generator>Hugo -- gohugo.io</generator>
  
  <language>en-us</language>
  
  
  
  
  <lastBuildDate>Sun, 16 May 2021 23:10:11 +0800</lastBuildDate>
  
      <atom:link href="https://journey-c.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
  
  
  <item>
    <title>Redis的网络模型</title>
    <link>https://journey-c.github.io/redis-network-model/</link>
    <pubDate>Sun, 16 May 2021 23:10:11 +0800</pubDate>
    
    <guid>https://journey-c.github.io/redis-network-model/</guid>
    <description>&lt;blockquote&gt;
&lt;p&gt;服务端程序几乎都会有网络交互的功能，一个优秀网络模型可以合理配合使用计算机的各资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis作为广为人知的内存数据库，从玩具级项目到工业级项目中都可以看到它的身影，而Redis在最初的几个版本中一直是单线程，却能扛住&lt;a href=&#34;https://redis.io/topics/faq#what39s-the-redis-memory-footprint&#34;&gt;1 million requests per second&lt;/a&gt;的请求量（非单点）。其实现的单线程网络模型必然十分优秀。
&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-share.png&#34; alt=&#34;redis-network-model-share&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;设计原理&#34;&gt;设计原理&lt;/h1&gt;
&lt;p&gt;在分析网络模型之前先分析一下Redis中网络交互的场景。一般来说我们在使用Redis时，一般会和Redis-Server建若干个连接，然后并发的给Redis-Server发送指令并得到回复。而Redis-Server就需要同时维护若干个与Redis-Client的连接，并且随时处理每个连接发来的请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-connecttion-per-thread.png&#34; alt=&#34;redis-network-model-connecttion-per-thread&#34;&gt;
一种方式是起一个线程监听一个端口，当新连接到来时，创建一个新线程处理这个连接。这样做的缺点是，当连接过多时线程数也随之增多，线程栈大小一般8MB，大量的线程会占用大量内存和CPU资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-connecttion-worker-pool.png&#34; alt=&#34;redis-network-model-connecttion-worker-pool&#34;&gt;
另一种方式是起一个线程监听端口，新连接交给线程池来处理，这样做的优点是连接数不再会压垮计算机，而缺点就是服务器的处理能力受限与线程池的大小，并且空闲连接也会占用线程池的资源。&lt;/p&gt;
&lt;p&gt;上边两种网络模型的问题就在于一个线程只处理一个连接，而操作系统提供的&lt;a href=&#34;https://journey-c.github.io/io-multiplexing&#34;&gt;IO多路复用技术&lt;/a&gt;可以解决这一问题。一个线程监听多个连接，每个连接只有在活跃时才会使用CPU，从而达到节省资源的目录。&lt;/p&gt;
&lt;p&gt;Redis采用Reactor模式实现的网络模型。主要由事件收集器、事件发送器、事件处理器组成。事件收集器主要收集所有事件，包括来自硬件软件的事件。事件发送器负责将事件发送到实现注册的事件处理器。而事件处理器则负责处理事件。其中事件收集器就是通过&lt;a href=&#34;https://journey-c.github.io/io-multiplexing&#34;&gt;IO多路复用技术&lt;/a&gt;来实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model.png&#34; alt=&#34;redis-network-model&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;数据结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-data-structure.png&#34; alt=&#34;redis-network-model-data-structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;结构体&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;封装了事件循环相关的变量，包括两种事件的链表(时间事件、文件事件)。然后文件事件（&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L72&#34;&gt;aeFileEvent&lt;/a&gt;）中封装了读写事件接口充当事件处理器，时间事件（&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L80&#34;&gt;aeTimeEvent&lt;/a&gt;）中也封装了相应接口作为事件处理器。&lt;/p&gt;
&lt;h1 id=&#34;事件&#34;&gt;事件&lt;/h1&gt;
&lt;p&gt;默认有两种事件：&lt;code&gt;文件事件&lt;/code&gt;, &lt;code&gt;时间事件&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件事件对应文件的I/O事件，例如socket可读可写事件。&lt;/li&gt;
&lt;li&gt;时间事件对应定时任务，例如Redis的定时清理等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先来看一下文件事件的封装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* File event structure */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeFileEvent {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mask; &lt;span style=&#34;color:#75715e&#34;&gt;/* one of AE_(READABLE|WRITABLE|BARRIER) */&lt;/span&gt;
    aeFileProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rfileProc;
    aeFileProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;wfileProc;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;clientData;
} aeFileEvent;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包含了一个标志位&lt;code&gt;mask&lt;/code&gt;和&lt;code&gt;read事件&lt;/code&gt;、&lt;code&gt;write事件&lt;/code&gt;的处理器。如果文件事件对应的是客户端的话&lt;code&gt;clientData&lt;/code&gt;就储存了对应&lt;code&gt;connection接口&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;时间事件就比较复杂，redis没有采用&lt;code&gt;Time FD&lt;/code&gt;来实现定时任务，采用事件循环的timeout来辅助实现的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Time event structure */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeTimeEvent {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; id; &lt;span style=&#34;color:#75715e&#34;&gt;/* time event identifier. */&lt;/span&gt;
    monotime when;
    aeTimeProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;timeProc;
    aeEventFinalizerProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;finalizerProc;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;clientData;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeTimeEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;prev;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeTimeEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; refcount; &lt;span style=&#34;color:#75715e&#34;&gt;/* refcount to prevent timer events from being
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;           * freed in recursive time event calls. */&lt;/span&gt;
} aeTimeEvent;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;id&lt;/code&gt;每个时间事件的ID。&lt;code&gt;when&lt;/code&gt;为事件发生的时间戳（毫秒）。&lt;code&gt;timeProc&lt;/code&gt;为事件发生时处理器。&lt;code&gt;finalizerProc&lt;/code&gt;为事件终止处理器，时间事件被删除时触发。&lt;code&gt;prev&lt;/code&gt;和&lt;code&gt;next&lt;/code&gt;为时间事件链表的指针，所有的时间事件都在一个链表中。&lt;code&gt;refcount&lt;/code&gt;为事件引用数。&lt;/p&gt;
&lt;h1 id=&#34;事件循环&#34;&gt;事件循环&lt;/h1&gt;
&lt;p&gt;首先最核心的数据结构就是&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;，它封装了redis-server的事件循环，充当了事件收集器和事件发送器的作用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* State of an event based program */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; aeEventLoop {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; maxfd;   &lt;span style=&#34;color:#75715e&#34;&gt;/* highest file descriptor currently registered */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; setsize; &lt;span style=&#34;color:#75715e&#34;&gt;/* max number of file descriptors tracked */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; timeEventNextId;
    aeFileEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;events; &lt;span style=&#34;color:#75715e&#34;&gt;/* Registered events */&lt;/span&gt;
    aeFiredEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fired; &lt;span style=&#34;color:#75715e&#34;&gt;/* Fired events */&lt;/span&gt;
    aeTimeEvent &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;timeEventHead;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; stop;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;apidata; &lt;span style=&#34;color:#75715e&#34;&gt;/* This is used for polling API specific data */&lt;/span&gt;
    aeBeforeSleepProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;beforesleep;
    aeBeforeSleepProc &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;aftersleep;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags;
} aeEventLoop;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;maxfd&lt;/code&gt;字段为当前监听fd的最大值。&lt;code&gt;setsize&lt;/code&gt;为最多监听事件的数量，一般为最大连接数加上一部分冗余。&lt;code&gt;timeEventNextId&lt;/code&gt;为下一个时间事件的id。&lt;code&gt;stop&lt;/code&gt;为停止标志。&lt;code&gt;beforesleep&lt;/code&gt;和&lt;code&gt;aftersleep&lt;/code&gt;为事件循环之前和之后触发的函数。&lt;code&gt;flags&lt;/code&gt;用于存各种标记。
最后再看一下几个主要的字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt;为所有注册的文件事件(最大长度为&lt;code&gt;setsize&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fired&lt;/code&gt;为已触发的文件事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeEventHead&lt;/code&gt;用于存时间事件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apidata&lt;/code&gt;为&lt;a href=&#34;https://journey-c.github.io/io-multiplexing/&#34;&gt;多路复用&lt;/a&gt;的接口，根据平台的不同其实现可能是evport/epoll/kqueue/select等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要数据结构介绍完了，下面再来通过客户端和服务端一次交互来分析网络模型的工作过程。&lt;/p&gt;
&lt;p&gt;Redis初始化时，首先调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/server.c#L2893&#34;&gt;adjustOpenFilesLimit&lt;/a&gt;函数根据配置文件中的最大连接数修改进程最大文件打开数。然后调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L66&#34;&gt;aeCreateEventLoop&lt;/a&gt;创建&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;结构维护事件循环。&lt;/p&gt;
&lt;p&gt;根据配置文件监听端口之后，会调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/server.c#L3000&#34;&gt;createSocketAcceptHandler&lt;/a&gt;将&lt;code&gt;Listen FD&lt;/code&gt;封装成文件事件加入&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;此时服务端准备工作基本完成了，端口监听了，&lt;code&gt;Listen FD&lt;/code&gt;的&lt;code&gt;accept&lt;/code&gt;动作也监听了。&lt;/p&gt;
&lt;p&gt;然后就会调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L484&#34;&gt;aeMain&lt;/a&gt;进入事件循环了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-eventloop.png&#34; alt=&#34;redis-network-model-eventloop&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L484&#34;&gt;aeMain&lt;/a&gt;函数中是一个循环，不断判断是否停止，不停止就执行&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L348&#34;&gt;aeProcessEvents&lt;/a&gt;函数。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.c#L348&#34;&gt;aeProcessEvents&lt;/a&gt;中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算最近一个时间事件距离现在的时间差和已触发时间事件。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;aeApiPoll&lt;/code&gt;接口（对应底层封装的select/poll/epoll_wait函数）。&lt;/li&gt;
&lt;li&gt;文件事件来临时执行实现注册的读写处理器。&lt;/li&gt;
&lt;li&gt;执行已触发的时间事件（如果有）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时如果客户端连接到Redis的话，会触发初始化时注册的&lt;code&gt;Listen FD&lt;/code&gt;的&lt;code&gt;accept&lt;/code&gt;事件，对应处理器为&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L1106&#34;&gt;acceptTcpHandler&lt;/a&gt;，这个函数主要是调用&lt;code&gt;anetTcpAccept&lt;/code&gt;接口（对应各平台的accept函数）获取&lt;code&gt;Conn FD&lt;/code&gt;。得到&lt;code&gt;Conn FD&lt;/code&gt;之后调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L1034&#34;&gt;acceptCommonHandler&lt;/a&gt;处理这个连接，参数为&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L95&#34;&gt;connCreateAcceptedSocket&lt;/a&gt;函数根据&lt;code&gt;Conn FD&lt;/code&gt;创建的连接对象（&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.h#L73&#34;&gt;connection&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L95&#34;&gt;connCreateAcceptedSocket&lt;/a&gt;首先根据&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.h#L73&#34;&gt;connection&lt;/a&gt;调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L110&#34;&gt;createClient&lt;/a&gt;创建一个&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/server.h#L859&#34;&gt;client&lt;/a&gt;对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L110&#34;&gt;createClient&lt;/a&gt;中首先会调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.h#L165&#34;&gt;connSetReadHandler&lt;/a&gt;执行&lt;code&gt;conn-&amp;gt;type-&amp;gt;set_read_handler&lt;/code&gt;接口，如果是TCP连接的话对应&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L348&#34;&gt;CT_Socket&lt;/a&gt;的&lt;code&gt;set_read_handler&lt;/code&gt;接口，也就是&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/connection.c#L238&#34;&gt;connSocketSetReadHandler&lt;/a&gt;设置读处理器并且将&lt;code&gt;Conn FD&lt;/code&gt;封装成文件事件加入&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/ae.h#L99&#34;&gt;aeEventLoop&lt;/a&gt;。最后将&lt;code&gt;Connection&lt;/code&gt;和&lt;code&gt;Client&lt;/code&gt;关联起来。&lt;/p&gt;
&lt;p&gt;然后调用&lt;a href=&#34;https://github.com/redis/redis/blob/e90e5640e7840860bc6726a08135ea86687bbd58/src/networking.c#L973&#34;&gt;clientAcceptHandler&lt;/a&gt;函数处理一些客户端需要做的事情。&lt;/p&gt;
&lt;p&gt;到此为止，监听动作可以处理了，客户端发来的数据（读事件）也可以处理了。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;上面分析的网络模型在Redis中都是在单线程中实现的，所有事件执行也是串行的，这也是很多人使用Redis实现分布式锁而不用考虑并发原因了。Redis采用单线程实现网络模型也能扛住大量请求，一方面是网络模型足够优秀，另一方面就是所有操作都在内存中，单事物处理时间短，并且Redis数据库中数据结构实现优化到了极致，比如同种数据结构根据数据量大小选择不同底层实现，通用回复字符串共享，秒级时间戳缓存等等。&lt;/p&gt;
&lt;p&gt;事件驱动实现并非只能单线程实现，Redis之所以使用单线程实现一方面是为了方便开发者，另一方面是Redis的瓶颈并不在网络请求。而多线程实现的代表就是&lt;a href=&#34;https://nginx.org/&#34;&gt;Nginx&lt;/a&gt;了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-nginx.png&#34; alt=&#34;redis-network-model-nginx&#34;&gt;&lt;/p&gt;
&lt;p&gt;nginx实现时，Master监听，将连接分发给若干个Worker线程处理，每个Worker线程有自己的事件循环。为了避免调度对网络响应的损耗，nginx会调用&lt;a href=&#34;https://man7.org/linux/man-pages/man2/sched_setaffinity.2.html&#34;&gt;SCHED_SETAFFINITY&lt;/a&gt;将每个Worker分散绑定到不同CPU上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/redis-network-model-golang.png&#34; alt=&#34;redis-network-model-golang&#34;&gt;&lt;/p&gt;
&lt;p&gt;而以高并发著称的golang语言却不适合采用事件驱动编程。golang标准库中的网络模型都是&lt;code&gt;connection-per-goroutine&lt;/code&gt;，这样做的原因是go无法将goroutine固定到指定&lt;code&gt;P&lt;/code&gt;上，如果采用事件驱动模型，最坏的情况下所有Worker被调度到同一个&lt;code&gt;P&lt;/code&gt;上，就变成单线程模型了。从上面golang事件驱动模型的尖刺非常明显（蓝色为 netpoll + 多路复用，绿色为 netpoll + 长连接，黄色为 net 库 + 长连接）。&lt;/p&gt;
</description>
  </item>
  
  <item>
    <title>为什么redis有多个数据库?</title>
    <link>https://journey-c.github.io/why-redis-has-multiple-databases/</link>
    <pubDate>Fri, 01 Jan 2021 20:58:31 +0800</pubDate>
    
    <guid>https://journey-c.github.io/why-redis-has-multiple-databases/</guid>
    <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Redis&#34;&gt;Redis&lt;/a&gt;是一个开源内存数据库，在今天几乎每个服务端程序员都会或多或少的使用到。但是很少有人会注意到一个Redis实例并不是只有一个数据库。&lt;/p&gt;
&lt;h1 id=&#34;设计&#34;&gt;设计&lt;/h1&gt;
&lt;p&gt;Redis实例使用&lt;a href=&#34;https://github.com/redis/redis/blob/25214bd7dc2f4c995d76020e95180eb4e6d51672/src/server.h#L1055&#34;&gt;redisServer&lt;/a&gt;结构体表示，结构体成员变量中的&lt;a href=&#34;https://github.com/redis/redis/blob/25214bd7dc2f4c995d76020e95180eb4e6d51672/src/server.h#L1068&#34;&gt;redisDb *db;&lt;/a&gt;是redisServer用来存储用户存入的键值。(默认有16个，通过配置文件中databases配置。每个客户端可以通过&lt;code&gt;SELECT index&lt;/code&gt;命令选择要访问的数据库)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redis/redis/blob/25214bd7dc2f4c995d76020e95180eb4e6d51672/src/server.h#L1068&#34;&gt;redisDb *db&lt;/a&gt;成员变量如下图最右边方框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/server_data_structure.png&#34; alt=&#34;server&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;h2 id=&#34;数据分块优化查询速度&#34;&gt;数据分块优化查询速度?&lt;/h2&gt;
&lt;p&gt;将数据分块添加多级索引，但是找了很多地方发现每个db都是独立的，而且客户端对单个数据库操作时不会访问其他数据库，并且其他客户端无关操作例如RDB、AOF持久化操作也不会将各db关联起来。&lt;/p&gt;
&lt;p&gt;并且redisdb中的dict本身就会在数据增多时对数据进行rehash，所以这个可能大概率不存在。&lt;/p&gt;
&lt;h2 id=&#34;对数据进行分类&#34;&gt;对数据进行分类?&lt;/h2&gt;
&lt;p&gt;redis本身是一个nosql数据库，想查询部分特征的数据本身操作会非常复杂，所以可能作者想用户可以根据需要将不同数据存入不同的db，但是db本身不支持自定义名称，只有编号，用户如果想将数据分类只能记住db的编号，每次访问数据时先用&lt;code&gt;SELECT index&lt;/code&gt;命令切换数据库然后再操作。这个可能性很高，但也说服力不强。&lt;/p&gt;
&lt;p&gt;因为实在没有想到其他的可能，所以我开始在网上找一下其他同行对此的见解，意外的搜到了作者一封邮件&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://journey-c.github.io/images/mail.jpeg&#34; alt=&#34;mail&#34;&gt;&lt;/p&gt;
&lt;p&gt;原来作者最初的想法很多，但最后觉得很鸡肋，由于要保持向下兼容，所以就保留了这个功能。虽然实际生产中Redis实例很少会用到多个DB，但每个DB大概1m左右也不是十分耗费资源，所以无伤大雅。&lt;/p&gt;
</description>
  </item>
  
</channel>
</rss>
